DIRECTORY TREE:
└── school_merit_tracker/
    ├── controllers/
    │   ├── csvController.js
    │   ├── pinController.js
    │   ├── prizeController.js
    │   ├── pupilController.js
    │   └── purchaseController.js
    ├── middlewares/
    │   └── auth.js
    ├── public/
    │   ├── addPrize/
    │   │   ├── addPrize.css
    │   │   ├── addPrize.html
    │   │   └── addPrize.js
    │   ├── addPupil/
    │   │   ├── addPupil.css
    │   │   ├── addPupil.html
    │   │   └── addPupil.js
    │   ├── enterPin/
    │   │   └── enterPin.html
    │   ├── pinLogin/
    │   │   ├── pinLogin.css
    │   │   ├── pinLogin.html
    │   │   └── pinLogin.js
    │   ├── prizes/
    │   │   ├── editPrize.html
    │   │   ├── prizes.css
    │   │   ├── prizes.html
    │   │   └── prizes.js
    │   ├── pupils/
    │   │   ├── pupils.css
    │   │   ├── pupils.html
    │   │   └── pupils.js
    │   ├── purchase/
    │   │   ├── purchase.css
    │   │   ├── purchase.html
    │   │   └── purchase.js
    │   ├── uploadCSV/
    │   │   ├── uploadCSV.css
    │   │   ├── uploadCSV.html
    │   │   └── uploadCSV.js
    │   ├── uploadMeritsCSV/
    │   │   ├── uploadMeritsCSV.css
    │   │   ├── uploadMeritsCSV.html
    │   │   └── uploadMeritsCSV.js
    │   ├── commonMenu.js
    │   └── index.html
    ├── routes/
    │   ├── csvRoutes.js
    │   ├── pinRoutes.js
    │   ├── prizeRoutes.js
    │   ├── pupilRoutes.js
    │   └── purchaseRoutes.js
    ├── testdata/
    │   ├── meritupdate.csv
    │   ├── meritupdate2.csv
    │   └── sampledata.sql
    ├── .gitignore
    ├── README.md
    ├── create_tables.sql
    ├── current_files.txt
    ├── db.js
    ├── gather_files.py
    ├── package.json
    └── server.js

========================================
FILE CONTENTS:
========================================


===== FILE: .gitignore =====
# .gitignore

# Node modules folder
node_modules/

# Environment variables
.env

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Just to be safe build artifact folders you don’t want to commit
dist/
build/

# Just to be safe
.DS_Store
.idea/
.vscode/

.git/

package-lock.json

LICENSE

output.txt

images/
temp/


===== FILE: README.md =====
# School Reward Site

This document outlines the steps taken so far to set up the PostgreSQL database for the School Reward Site on Gentoo Linux. These instructions assume you have administrative (root or sudo) privileges on your Gentoo system. Adjust any commands as needed for your particular environment.

---

## 1. Install PostgreSQL on Gentoo

1. Sync the Portage tree:
   sudo emerge --sync

2. Install PostgreSQL (e.g., version 15):
   sudo emerge --ask dev-db/postgresql:15

3. Configure the newly installed PostgreSQL:
   sudo emerge --config dev-db/postgresql:15
   This step initializes your PostgreSQL data directory (commonly found under /var/lib/postgresql/15/data or a similar path).


---

## 2. Start and Enable PostgreSQL

1. Start the PostgreSQL service:
   sudo rc-service postgresql start

2. Enable PostgreSQL to start automatically on boot:
   sudo rc-update add postgresql default


---

3# 3. Verify PostgreSQL Installation
open psql as apostgres user:

"sudo -iu postgres"


Check if PostgreSQL is running:

pg-isready

You can also verify via:

"psql -c "SELECT version()""

(This enters psql as postgres and prints out the PostgreSQL version.)


---

4. Create a New Database and User

### 4.1 Creating the Database

While logged in as the postgres user, enter the psql shell:

psql

Create a database named merits:

CREATE DATABASE merits;

### 4.2 Creating a User

Create a new role (user) named merit_user with an encrypted password:

CREATE USER merit_user WITH: ENCRYPTED PASSWORD 'yourpassword';

Grant all privileges on the merits database to merit_user:

GRANT ALL PRIVILEGES ON DATABASE merits TO merit_user;

Exit psql:

\q


---

## 5. Checking Databases and Users

- Show list existing databases inside psql:
   `l`
- Show list users (roles) inside psql:
   `\u `

---

## 6. Import the Schema

We have an SQL file (e.g., create_tables.sql) containing the table definitions and other objects needed for this project.

Example:
psql -U merit_user -d merits -f /path/to/create_tables.sql
eplace /path/to/create_tables.sql with the actual path
to your file.

Replace /path/to/create_tables.sql with the actual path to your file.

Once imported, verify the tables were created:

"psql -U merit_user -d merits"

Then inside psql:

"\dt"

This should list the newly created tables (form, pupils, prizes, purchase, etc.)


---

7. Handling Permissions

If you encounter a â€¢permission denied for schema publi`â€™ error, grant create privileges on the public schema to your user:

grant CREATE, USAGE oN SCHEMA public TO merit_user;

Then re-run your import command. You can also change table ownershis if you need merit_user to own the tables:

alter TABLE table_name OWNER TO merit_user;


2. To reassign all objects from one role to another, connect as a superuser and run:

BEAFORE: This ass covers ALL OBJECTS oned by that role in the current database (tables, views, sequences, etc.).

Example:

REASSIGN OWNED BY old_role TO merit_user;

---

## 8. Next Steps

1. Import Pupil Merits:
	You may have a CSV file with pupil names and the number of merits they have. The next step is to import that data (e.g., via COPY statements or by parsing it in your Node.js code).

2. Set Up Node.js Application:
  - Build a Node.js server (using Express or similar) that connects to this PostgreSQL database.
  - Implement routes for adding/removing merits, displaying pupil data, etc.
  - Keep the UI touch-friendly for tablets.


3. Extend for Future Features:
	- Keep track of prize stock and alert when running low.
	- Allow pupils to log in to see their merits.
	- Add more security checks (e.g., authentication, authorization, etc.).

---

## 9. Troubleshooting

- Service Doesnâ€t Start:
	Make sure the data directory is correctly set ap/var/lib/postgresql/15/data or the correct directory for your version.

	sudo emerge --config dev-db/postgresql:15

	Verify /var/lib/postgresql/15/data (or the correct directory for your slot/version) exists.


- Connection Issues:
  - Check listen_addresses in postgresql.conf and pg_hba.conf if remote access is needed.
  - Verify firewall settings if connecting from another machine.

- Permission Errors: 

- Confirm that merit_user has privileges on the merits database with:
  \vâu

	- Use GRANT statements or ALTER TABLE to fix ownership and privileges.

---

## 10. References

- Gentoo PostgreSQL Wiki: https://wiki.gentoo.org/wiki/PostgreSQL
- PostgreSQL Official Docs: https://www.postgresql.org/docs/
- Node.js Documentation: https://node.js.org/en/docs


---

This document summarizes the steps taken so far to set up the PostgreSQL database on Gentoo Linux for the School Reward Site. Feel free to modify or extend as the project evolves.


===== FILE: controllers/csvController.js =====
// controllers/csvController.js
const path = require('path');
const pool = require('../db');
const fs = require('fs');
const csv = require('csv-parser');

/**
 * Show the CSV Upload page for Pupils.
 */
exports.showUploadPupilCSVPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'uploadCSV', 'uploadCSV.html'));
};

exports.showUploadMeritsCSVPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'uploadMeritsCSV', 'uploadMeritsCSV.html'));
};

/**
 * Handle CSV file upload & parse. For each row:
 * 1) Check if pupil with same first_name & last_name already exists.
 * 2) If not, insert a new pupil record.
 */
exports.uploadPupilCSV = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send('No CSV file uploaded.');
    }

    // The CSV file is temporarily stored at req.file.path
    const results = [];

    fs.createReadStream(req.file.path)
      .pipe(csv())  // parse the CSV
      .on('data', (row) => {
        results.push(row);
      })
      .on('end', async () => {
        // Now we have all rows in results
        let insertedCount = 0;
        let skippedCount = 0;

        for (const row of results) {
          // Expect row.first_name, row.last_name, row.form_id
          const first_name = row.first_name?.trim();
          const last_name = row.last_name?.trim();
          const form_id = row.form_id ? parseInt(row.form_id, 10) : null;

          // Basic validation
          if (!first_name || !last_name || !form_id) {
            // You could skip or log an error. For now, skip.
            skippedCount++;
            continue;
          }

          // Check if a pupil with same first & last name exists
          const checkQuery = `
            SELECT pupil_id 
            FROM pupils 
            WHERE LOWER(first_name) = LOWER($1) 
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount > 0) {
            // Already exists, skip insertion
            skippedCount++;
          } else {
            // Insert new pupil
            const insertQuery = `
              INSERT INTO pupils (first_name, last_name, merits, form_id, active)
              VALUES ($1, $2, 0, $3, true);
            `;
            await pool.query(insertQuery, [first_name, last_name, form_id]);
            insertedCount++;
          }
        }

        // Optionally delete the temp file
        fs.unlinkSync(req.file.path);

        // Provide some feedback
        res.send(`Upload complete. Inserted: ${insertedCount}, Skipped (duplicates or invalid): ${skippedCount}.`);
      });
  } catch (err) {
    console.error('Error uploading CSV:', err);
    res.status(500).send('Failed to process CSV file.');
  }
};

/**
 * POST /upload/csv/merits
 * Expects a CSV with "first_name,last_name,merits".
 * For each row, update the pupil's total merits to the CSV value.
 * If no pupil found, collect that name and return it as "missing".
 */
exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const missing = [];
  let updatedCount = 0;

  // Read the uploaded file
  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      // We'll store each row for processing later or do immediate updates. 
      // Let's do immediate updates for demonstration. 
      // But be aware we might do a large number of queries in quick succession.
      // For more advanced usage, you'd queue these or do them in "end" event.
      // However, for simplicity, let's collect them and handle in .on('end') 
      // to use async/await properly.
    })
    .on('end', async () => {
      // Actually, let's parse the entire CSV into an array first:
      // But we need to restructure the code a bit. We'll do that approach below.

      // We realized we need the data from each row, so let's parse differently:
    });
};

/*
 * We'll store rows in an array. Let's rewrite for clarity:
 */

exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const rows = [];
  const missing = [];
  let updatedCount = 0;

  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      rows.push(row);
    })
    .on('end', async () => {
      // Now we have all rows in `rows`
      // We'll process each row with async/await so we can do DB queries in sequence
      for (const row of rows) {
        const first_name = (row.first_name || '').trim();
        const last_name = (row.last_name || '').trim();
        const meritsStr = (row.merits || '').trim();
        const merits = parseInt(meritsStr, 10);

        // Basic validation
        if (!first_name || !last_name || isNaN(merits)) {
          // skip invalid row
          continue;
        }

        try {
          // Check if pupil exists
          const checkQuery = `
            SELECT pupil_id
            FROM pupils
            WHERE LOWER(first_name) = LOWER($1)
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount === 0) {
            // Not found, push to missing
            missing.push(`${first_name} ${last_name}`);
          } else {
            // We found them, update merits
            const pupilId = checkResult.rows[0].pupil_id;
            const updateQuery = `
              UPDATE pupils
              SET merits = $1
              WHERE pupil_id = $2;
            `;
            await pool.query(updateQuery, [merits, pupilId]);
            updatedCount++;
          }
        } catch (err) {
          console.error('DB error updating merits:', err);
          // We could continue or break. Let's continue for now.
        }
      }

      // Cleanup the temp file
      fs.unlinkSync(req.file.path);

      // Return JSON with updatedCount & missing
      res.json({
        updatedCount,
        missing,
      });
    })
    .on('error', (err) => {
      console.error('Error reading CSV:', err);
      res.status(500).json({ error: 'Error reading CSV file.' });
    });
};

// controllers/csvController.js

exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const rows = [];
  const missing = [];
  let updatedCount = 0;

  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      rows.push(row);
    })
    .on('end', async () => {
      // We now have the entire CSV in 'rows'
      for (const row of rows) {
        // Extract and validate
        const first_name = (row.first_name || '').trim();
        const last_name = (row.last_name || '').trim();
        const meritsStr = (row.merits || '').trim();
        const meritsToAdd = parseInt(meritsStr, 10);

        if (!first_name || !last_name || isNaN(meritsToAdd)) {
          // Skip invalid rows silently, or record them in 'missing' if you prefer
          continue;
        }

        try {
          // Check if pupil exists
          const checkQuery = `
            SELECT pupil_id
            FROM pupils
            WHERE LOWER(first_name) = LOWER($1)
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount === 0) {
            // Pupil not found; record the name
            missing.push(`${first_name} ${last_name}`);
          } else {
            // We found them, add to existing merits
            const pupilId = checkResult.rows[0].pupil_id;
            const updateQuery = `
              UPDATE pupils
              SET merits = merits + $1
              WHERE pupil_id = $2;
            `;
            await pool.query(updateQuery, [meritsToAdd, pupilId]);
            updatedCount++;
          }
        } catch (err) {
          console.error('DB error updating merits:', err);
          // continue on next row
        }
      }

      // Remove temp file
      fs.unlinkSync(req.file.path);

      // Return JSON for the front-end
      res.json({
        updatedCount,
        missing
      });
    })
    .on('error', (err) => {
      console.error('Error reading CSV:', err);
      res.status(500).json({ error: 'Error reading CSV file.' });
    });
};



===== FILE: controllers/pinController.js =====
// controllers/pinController.js

const path = require('path');

exports.showPinPage = (req, res) => {
  // Render the numeric PIN entry page
  res.sendFile(path.join(__dirname, '..', 'public', 'pinLogin', 'pinLogin.html'));
};

exports.checkPin = (req, res) => {
  const purchasePin = process.env.PURCHASE_PIN;
  const fullPin = process.env.FULL_PIN;
  const enteredPin = req.body.pin;

  if (!enteredPin) {
    return res.status(400).send('No PIN entered.');
  }

  if (enteredPin === purchasePin) {
    req.session.userRole = 'purchase';
    // Go directly to the purchase page, or redirect to home
    return res.redirect('/purchase');
  } else if (enteredPin === fullPin) {
    req.session.userRole = 'full';
    // Could redirect to a main dashboard or anywhere
    return res.redirect('/');
  } else {
    // Invalid
    return res.send(`
      <h1>Incorrect PIN</h1>
      <p><a href="/enter-pin">Try again</a></p>
    `);
  }
};

exports.logout = (req, res) => {
  req.session.destroy(() => {
    // Wipe out the session and redirect
    res.redirect('/enter-pin');
  });
};



===== FILE: controllers/prizeController.js =====
// controllers/prizeController.js
const path = require('path');
const pool = require('../db'); // same db.js pool

/**
 * Show the main "Prizes" page (HTML).
 * This is similar to the Pupils page: it lists all existing prizes.
 */
exports.showPrizesPage = (req, res) => {
  // Send the static HTML file for listing prizes
  res.sendFile(path.join(__dirname, '..', 'public', 'prizes', 'prizes.html'));
};

/**
 * Return all active prizes as JSON.
 * We'll keep it simple, ignoring columns like total_stocked_ever for now,
 * or you can expand the columns if needed.
 */
exports.getAllPrizes = async (req, res) => {
  try {
    // Example: list all prizes, including any columns you want to display
    // If you only want active ones, add "WHERE active = true"
    const query = `
      SELECT
        prize_id,
        description,
        cost_merits,
        cost_money,
        image_path,
        active
      FROM prizes
      ORDER BY prize_id;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching prizes:', err);
    res.status(500).json({ error: 'Failed to fetch prizes' });
  }
};

/**
 * Show the "Add Prize" page (HTML).
 * This is similar to the Pupils version.
 */
exports.showAddPrizeForm = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'addPrize', 'addPrize.html'));
};

/**
 * Handle "Add Prize" form submission.
 * For now, set total_stocked_ever = 0 and stock_adjustment = 0, active = true.
 */
exports.addPrize = async (req, res) => {
  try {
    // Expect these from the form
    const { description, cost_merits, cost_money, image_path } = req.body;

    // Insert into the prizes table
    // We'll default total_stocked_ever=0, stock_adjustment=0, active=true
    const insertQuery = `
      INSERT INTO prizes 
        (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
      VALUES 
        ($1, $2, $3, $4, 0, 0, true);
    `;
    await pool.query(insertQuery, [description, cost_merits, cost_money, image_path]);

    // Redirect to the main prizes list or wherever you like
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error adding prize:', err);
    res.status(500).send('Failed to add prize');
  }
};

/**
 * Show the "Edit Prize" page (HTML).
 * Typically you’d have a separate HTML (e.g., editPrize.html) or reuse the same page.
 * For example’s sake, we’ll serve a new page that can fetch existing data via /prizes/:id/json.
 */
exports.showEditPrizeForm = (req, res) => {
  // For demonstration, serve a static HTML file
  res.sendFile(path.join(__dirname, '..', 'public', 'prizes', 'editPrize.html'));
};

/**
 * Return the details for a single prize as JSON,
 * used by an edit form to pre-populate fields.
 */
exports.getPrizeById = async (req, res) => {
  const { id } = req.params;
  try {
    const query = `
      SELECT
        prize_id,
        description,
        cost_merits,
        cost_money,
        image_path,
        active
      FROM prizes
      WHERE prize_id = $1
      LIMIT 1;
    `;
    const result = await pool.query(query, [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Prize not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching prize by ID:', err);
    res.status(500).json({ error: 'Failed to fetch prize' });
  }
};

/**
 * Handle "Edit Prize" form submission.
 * Update the record in the DB.
 */
exports.editPrize = async (req, res) => {
  const { id } = req.params;
  const { description, cost_merits, cost_money, image_path, active } = req.body;
  try {
    const updateQuery = `
      UPDATE prizes
      SET
        description = $1,
        cost_merits = $2,
        cost_money = $3,
        image_path = $4,
        active = $5
      WHERE prize_id = $6;
    `;
    await pool.query(updateQuery, [
      description,
      cost_merits,
      cost_money,
      image_path,
      active === 'true' || active === true, // handle checkbox or string
      id
    ]);

    res.redirect('/prizes');
  } catch (err) {
    console.error('Error editing prize:', err);
    res.status(500).send('Failed to edit prize');
  }
};

/**
 * Delete a prize.
 * This example does a real DELETE. 
 * If you prefer a "soft delete," do: UPDATE prizes SET active=false WHERE prize_id=$1.
 */
exports.deletePrize = async (req, res) => {
  const { id } = req.params;
  try {
    const deleteQuery = `DELETE FROM prizes WHERE prize_id = $1;`;
    await pool.query(deleteQuery, [id]);
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error deleting prize:', err);
    res.status(500).send('Failed to delete prize');
  }
};

exports.addPrize = async (req, res) => {
  try {
    const { description, cost_merits, cost_money } = req.body;
    // Ensure a file was uploaded
    if (!req.file) {
      return res.status(400).json({ error: 'Image upload required' });
    }
    // Build the publically accessible path for the image
    const image_path = '/images/' + req.file.filename;

    const insertQuery = `
      INSERT INTO prizes 
        (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
      VALUES 
        ($1, $2, $3, $4, 0, 0, true);
    `;
    await pool.query(insertQuery, [description, cost_merits, cost_money, image_path]);

    // For AJAX or JSON responses you might return JSON,
    // but here we redirect back to the prizes page.
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error adding prize:', err);
    res.status(500).send('Failed to add prize');
  }
};

/**
 * Handle "Edit Prize" form submission.
 */
exports.editPrize = async (req, res) => {
  const { id } = req.params;
  let { description, cost_merits, cost_money, active } = req.body;
  // Set image_path to the original path unless a new image is uploaded
  let image_path = req.body.image_path || '';

  // If a new file was uploaded, update image_path accordingly
  if (req.file) {
    image_path = '/images/' + req.file.filename;
  }

  try {
    const updateQuery = `
      UPDATE prizes
      SET
        description = $1,
        cost_merits = $2,
        cost_money = $3,
        image_path = $4,
        active = $5
      WHERE prize_id = $6;
    `;
    await pool.query(updateQuery, [
      description,
      cost_merits,
      cost_money,
      image_path,
      active === 'true' || active === true,
      id
    ]);

    res.redirect('/prizes');
  } catch (err) {
    console.error('Error editing prize:', err);
    res.status(500).send('Failed to edit prize');
  }
};



===== FILE: controllers/pupilController.js =====
// controllers/pupilController.js
const path = require('path');
const pool = require('../db');

// Render Pupils page
exports.showPupilPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'pupils', 'pupils.html'));
};

// controllers/pupilController.js
exports.getAllPupils = async (req, res) => {
  try {
    const { form_id } = req.query;

    // Updated query: left-join the "pupils_remaining_merits" view
    // (assuming it has a column "pupil_id" and "remaining_merits").
    let query = `
      SELECT 
        p.pupil_id,
        p.first_name,
        p.last_name,
        p.merits,
        p.active,
        p.form_id,
        f.form_name,
        pr.remaining_merits
      FROM pupils p
      JOIN form f 
        ON p.form_id = f.form_id
      LEFT JOIN pupil_remaining_merits pr
        ON p.pupil_id = pr.pupil_id
      WHERE p.active = TRUE
    `;

    const params = [];
    // If form_id is provided for filtering
    if (form_id) {
      params.push(form_id);
      query += ` AND p.form_id = $${params.length}`;
    }

    // Sort by last name, first name
    query += ' ORDER BY p.last_name ASC, p.first_name ASC';

    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching pupils:', err);
    res.status(500).json({ error: 'Failed to fetch pupils' });
  }
};

// Add Pupil
exports.addPupil = async (req, res) => {
  try {
    const { first_name, last_name, form_id } = req.body;

    // Basic validation
    if (!first_name || !last_name || !form_id) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const insertQuery = `
      INSERT INTO pupils (first_name, last_name, merits, form_id, active)
      VALUES ($1, $2, 0, $3, TRUE)
    `;
    await pool.query(insertQuery, [first_name, last_name, form_id]);

    res.json({ message: 'Pupil added successfully' });
  } catch (err) {
    console.error('Error adding pupil:', err);
    res.status(500).send('Failed to add pupil');
  }
};

// Show Edit Pupil (not a separate page in the final approach, but left as is)
exports.showEditPupilForm = async (req, res) => {
  res.send('Edit form page not yet implemented. (We will use a modal instead.)');
};

// Fetch a single pupil by ID (for the modal)
exports.getSinglePupil = async (req, res) => {
  try {
    const { id } = req.params;
    const query = `
      SELECT 
        p.pupil_id, 
        p.first_name, 
        p.last_name, 
        p.merits,
        p.active,
        p.form_id,
        f.form_name,
        f.form_tutor,
        f.year_group
      FROM pupils p
      JOIN form f ON p.form_id = f.form_id
      WHERE p.pupil_id = $1
      LIMIT 1
    `;
    const result = await pool.query(query, [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Pupil not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching single pupil:', err);
    res.status(500).json({ error: 'Failed to fetch pupil' });
  }
};

// POST edit pupil
exports.editPupil = async (req, res) => {
  try {
    const { id } = req.params;
    let { first_name, last_name, form_id, merits } = req.body;

    // Validate input
    if (!first_name || !last_name || !form_id || merits == null) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    merits = parseInt(merits, 10);
    if (isNaN(merits) || merits < 0) {
      return res.status(400).json({ error: 'Merits must be a non-negative number' });
    }

    // Example: If you have a separate "merits_spent" field, add that here
    // We'll assume you want to store total merits in "merits" column
    const updateQuery = `
      UPDATE pupils
      SET first_name = $1,
          last_name  = $2,
          form_id    = $3,
          merits     = $4
      WHERE pupil_id = $5
      RETURNING *;
    `;

    const result = await pool.query(updateQuery, [first_name, last_name, form_id, merits, id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pupil not found or not updated' });
    }

    res.json({ message: 'Pupil updated successfully', pupil: result.rows[0] });
  } catch (err) {
    console.error('Error editing pupil:', err);
    res.status(500).json({ error: 'Failed to edit pupil' });
  }
};

// "Delete" pupil - set active to false
exports.deletePupil = async (req, res) => {
  try {
    const { id } = req.params;
    const query = `
      UPDATE pupils
      SET active = FALSE
      WHERE pupil_id = $1
      RETURNING *;
    `;
    const result = await pool.query(query, [id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pupil not found' });
    }

    // If this is an AJAX request, you can respond with JSON
    // If it’s a simple link or redirect, you can do a redirect instead:
    res.json({ message: 'Pupil deleted (set to inactive)' });
  } catch (err) {
    console.error('Error deleting pupil:', err);
    res.status(500).json({ error: 'Failed to delete pupil' });
  }
};

// Return all active Forms as JSON
exports.getAllForms = async (req, res) => {
  try {
    const query = `
      SELECT form_id, form_name, form_tutor, year_group
      FROM form
      WHERE active = TRUE
      ORDER BY form_name;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching forms:', err);
    res.status(500).json({ error: 'Failed to fetch forms' });
  }
};

// Add Form
exports.addForm = async (req, res) => {
  try {
    const { form_name, form_tutor, year_group } = req.body;
    const insertFormQuery = `
      INSERT INTO form (form_name, form_tutor, year_group, active)
      VALUES ($1, $2, $3, TRUE);
    `;
    await pool.query(insertFormQuery, [form_name, form_tutor, year_group]);
    res.json({ message: 'Form created successfully' });
  } catch (err) {
    console.error('Error adding form:', err);
    res.status(500).json({ error: 'Failed to add form' });
  }
};



===== FILE: controllers/purchaseController.js =====
// controllers/purchaseController.js
const path = require('path');
const pool = require('../db');

// 1) Serve the purchase.html page
exports.showPurchasePage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'purchase', 'purchase.html'));
};

// 2) Return all active prizes as JSON
exports.getAllPrizes = async (req, res) => {
  try {
    const query = `
      SELECT prize_id, description, cost_merits, cost_money, image_path
      FROM prizes
      WHERE active = TRUE
      ORDER BY prize_id;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching prizes:', error);
    res.status(500).json({ error: 'Failed to fetch prizes' });
  }
};

// 3) Search Pupil by partial name
//    We can do case-insensitive match on first/last_name
// purchaseController.js
exports.searchPupil = async (req, res) => {
  try {
    const { query } = req.query; 
    if (!query) {
      return res.json([]); 
    }

    // Use the view, returning "remaining_merits" 
    // Rename "remaining_merits" as "merits" if you want the front-end 
    // to keep using "merits" consistently.
    const sql = `
      SELECT 
        pupil_id,
        first_name,
        last_name,
        remaining_merits AS merits
      FROM pupil_remaining_merits
      WHERE 
        LOWER(first_name) LIKE LOWER($1)
        OR LOWER(last_name) LIKE LOWER($1)
        OR LOWER(CONCAT(first_name, ' ', last_name)) LIKE LOWER($1)
      ORDER BY last_name, first_name
      LIMIT 10;
    `;
    const likePattern = `%${query}%`;
    const result = await pool.query(sql, [likePattern]);
    res.json(result.rows);

  } catch (error) {
    console.error('Error searching pupils:', error);
    res.status(500).json({ error: 'Failed to search pupils' });
  }
};


// 4) Create a Purchase (deduct merits)
exports.createPurchase = async (req, res) => {
  try {
    const { prize_id, pupil_id } = req.body;

    // 1) Get the prize cost
    const prizeCheck = await pool.query(`
      SELECT cost_merits
      FROM prizes
      WHERE prize_id = $1 AND active = TRUE
    `, [prize_id]);
    if (prizeCheck.rowCount === 0) {
      return res.status(400).json({ error: 'Invalid or inactive prize' });
    }
    const cost_merits = prizeCheck.rows[0].cost_merits;

    // 2) Check pupil’s current *remaining* merits using the view
    //    pupil_remaining_merits has "pupil_id" and "remaining_merits"
    const remainCheck = await pool.query(`
      SELECT remaining_merits
      FROM pupil_remaining_merits
      WHERE pupil_id = $1
    `, [pupil_id]);
    if (remainCheck.rowCount === 0) {
      return res.status(400).json({ error: 'Invalid or inactive pupil' });
    }
    const currentRemaining = remainCheck.rows[0].remaining_merits;

    // 3) Ensure pupil has enough remaining merits
    if (currentRemaining < cost_merits) {
      return res.status(400).json({
        error: `Not enough merits. Pupil has ${currentRemaining} left, needs ${cost_merits}.`
      });
    }

    // 4) Insert into purchase (do NOT update pupils.merits)
    const insertResult = await pool.query(`
      INSERT INTO purchase (pupil_id, prize_id, merit_cost_at_time, date, active)
      VALUES ($1, $2, $3, NOW(), TRUE)
      RETURNING purchase_id
    `, [pupil_id, prize_id, cost_merits]);

    // This is the newly created purchase ID
    const newPurchaseId = insertResult.rows[0].purchase_id;

    // Return both newRemaining and newPurchaseId so front-end can track it
    return res.json({ 
      success: true, 
      newRemaining: currentRemaining - cost_merits,
      newPurchaseId
    });
  } catch (err) {
    console.error('Error creating purchase:', err);
    res.status(500).json({ error: 'Failed to create purchase' });
  }
};
// controllers/purchaseController.js

// 5) Cancel (undo) a purchase by ID
exports.cancelPurchase = async (req, res) => {
  try {
    const { purchaseId } = req.params;

    // Delete that purchase record. Alternatively, you could do a "soft delete"
    // e.g., UPDATE purchase SET active=false WHERE purchase_id=$1
    const result = await pool.query(`
      DELETE FROM purchase
      WHERE purchase_id = $1
      RETURNING purchase_id
    `, [purchaseId]);

    if (result.rowCount === 0) {
      // No matching purchase found
      return res.status(404).json({ error: 'Purchase not found' });
    }

    // If successful:
    return res.json({ success: true, message: 'Purchase canceled' });
  } catch (err) {
    console.error('Error canceling purchase:', err);
    res.status(500).json({ error: 'Failed to cancel purchase' });
  }
};



===== FILE: create_tables.sql =====
-- =========================================================
-- Drop existing objects (views & tables) if they already exist
-- =========================================================

-- Drop views first (they depend on the tables)
DROP VIEW IF EXISTS pupil_remaining_merits;
DROP VIEW IF EXISTS prize_stock;

-- Drop tables in correct order to avoid FK constraint issues
DROP TABLE IF EXISTS purchase;
DROP TABLE IF EXISTS prizes;
DROP TABLE IF EXISTS pupils;
DROP TABLE IF EXISTS form;

-- =========================================================
-- Recreate tables
-- =========================================================

-- 1. form table
CREATE TABLE form (
    form_id     SERIAL PRIMARY KEY,
    form_name   VARCHAR(100) NOT NULL,
    form_tutor  VARCHAR(100) NOT NULL,
    year_group  INTEGER      NOT NULL CHECK (year_group >= 0 AND year_group <= 14),
    active      BOOLEAN      NOT NULL DEFAULT TRUE
);

-- 2. pupils table
CREATE TABLE pupils (
    pupil_id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name  VARCHAR(100) NOT NULL,
    merits     INTEGER      NOT NULL CHECK (merits >= 0),
    form_id    INTEGER      NOT NULL,
    active     BOOLEAN      NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_pupils_form
        FOREIGN KEY (form_id)
        REFERENCES form(form_id)
        ON DELETE NO ACTION
);

-- 3. prizes table
CREATE TABLE prizes (
    prize_id           INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    description        TEXT         NOT NULL,
    cost_merits        INTEGER      NOT NULL CHECK (cost_merits >= 0),
    cost_money         INTEGER      NOT NULL CHECK (cost_money >= 0),  -- cost in pence
    image_path         VARCHAR(255) NOT NULL,
    total_stocked_ever INTEGER      NOT NULL CHECK (total_stocked_ever >= 0),
    stock_adjustment   INTEGER      NOT NULL,
    active             BOOLEAN      NOT NULL DEFAULT TRUE
);

-- 4. purchase table
CREATE TABLE purchase (
    purchase_id        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pupil_id           INTEGER   NOT NULL,
    prize_id           INTEGER   NOT NULL,
    merit_cost_at_time INTEGER   NOT NULL CHECK (merit_cost_at_time >= 0),
    date               TIMESTAMP NOT NULL,
    active             BOOLEAN   NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_purchase_pupil
        FOREIGN KEY (pupil_id)
        REFERENCES pupils(pupil_id)
        ON DELETE NO ACTION,
    CONSTRAINT fk_purchase_prize
        FOREIGN KEY (prize_id)
        REFERENCES prizes(prize_id)
        ON DELETE NO ACTION
);

-- =========================================================
-- Create views
-- =========================================================

-- View to show current stock of prizes
CREATE VIEW prize_stock AS
SELECT
    p.prize_id,
    p.description,
    p.total_stocked_ever
      + p.stock_adjustment
      - COUNT(pu.purchase_id)::INT
      AS current_stock
FROM prizes p
LEFT JOIN purchase pu
       ON p.prize_id = pu.prize_id
       AND pu.active = TRUE
WHERE p.active = TRUE
GROUP BY
    p.prize_id,
    p.description,
    p.total_stocked_ever,
    p.stock_adjustment;

-- View to show remaining merits per pupil
CREATE VIEW pupil_remaining_merits AS
SELECT
    p.pupil_id,
    p.first_name,
    p.last_name,
    p.merits
      - COALESCE(SUM(pu.merit_cost_at_time), 0)
      AS remaining_merits
FROM pupils p
LEFT JOIN purchase pu
       ON p.pupil_id = pu.pupil_id
       AND pu.active = TRUE    -- Only count active purchases
WHERE p.active = TRUE          -- Only show active pupils
GROUP BY
    p.pupil_id,
    p.first_name,
    p.last_name,
    p.merits;

ALTER TABLE purchase OWNER TO merit_user;
ALTER TABLE prizes OWNER TO merit_user;
ALTER TABLE form OWNER TO merit_user;
ALTER TABLE pupils OWNER TO merit_user;
ALTER VIEW prize_stock OWNER TO merit_user;
ALTER VIEW pupil_remaining_merits OWNER TO merit_user;


===== FILE: current_files.txt =====
DIRECTORY TREE:
└── school_merit_tracker/
    ├── controllers/
    │   ├── csvController.js
    │   ├── pinController.js
    │   ├── prizeController.js
    │   ├── pupilController.js
    │   └── purchaseController.js
    ├── middlewares/
    │   └── auth.js
    ├── public/
    │   ├── addPrize/
    │   │   ├── addPrize.css
    │   │   ├── addPrize.html
    │   │   └── addPrize.js
    │   ├── addPupil/
    │   │   ├── addPupil.css
    │   │   ├── addPupil.html
    │   │   └── addPupil.js
    │   ├── enterPin/
    │   │   └── enterPin.html
    │   ├── pinLogin/
    │   │   ├── pinLogin.css
    │   │   ├── pinLogin.html
    │   │   └── pinLogin.js
    │   ├── prizes/
    │   │   ├── editPrize.html
    │   │   ├── prizes.css
    │   │   ├── prizes.html
    │   │   └── prizes.js
    │   ├── pupils/
    │   │   ├── pupils.css
    │   │   ├── pupils.html
    │   │   └── pupils.js
    │   ├── purchase/
    │   │   ├── purchase.css
    │   │   ├── purchase.html
    │   │   └── purchase.js
    │   ├── uploadCSV/
    │   │   ├── uploadCSV.css
    │   │   ├── uploadCSV.html
    │   │   └── uploadCSV.js
    │   ├── uploadMeritsCSV/
    │   │   ├── uploadMeritsCSV.css
    │   │   ├── uploadMeritsCSV.html
    │   │   └── uploadMeritsCSV.js
    │   └── index.html
    ├── routes/
    │   ├── csvRoutes.js
    │   ├── pinRoutes.js
    │   ├── prizeRoutes.js
    │   ├── pupilRoutes.js
    │   └── purchaseRoutes.js
    ├── testdata/
    │   ├── meritupdate.csv
    │   ├── meritupdate2.csv
    │   └── sampledata.sql
    ├── .gitignore
    ├── README.md
    ├── create_tables.sql
    ├── current_files.txt
    ├── db.js
    ├── gather_files.py
    ├── package.json
    └── server.js

========================================
FILE CONTENTS:
========================================


===== FILE: .gitignore =====
# .gitignore

# Node modules folder
node_modules/

# Environment variables
.env

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Just to be safe build artifact folders you don’t want to commit
dist/
build/

# Just to be safe
.DS_Store
.idea/
.vscode/

.git/

package-lock.json

LICENSE

output.txt

images/
temp/


===== FILE: README.md =====
# School Reward Site

This document outlines the steps taken so far to set up the PostgreSQL database for the School Reward Site on Gentoo Linux. These instructions assume you have administrative (root or sudo) privileges on your Gentoo system. Adjust any commands as needed for your particular environment.

---

## 1. Install PostgreSQL on Gentoo

1. Sync the Portage tree:
   sudo emerge --sync

2. Install PostgreSQL (e.g., version 15):
   sudo emerge --ask dev-db/postgresql:15

3. Configure the newly installed PostgreSQL:
   sudo emerge --config dev-db/postgresql:15
   This step initializes your PostgreSQL data directory (commonly found under /var/lib/postgresql/15/data or a similar path).


---

## 2. Start and Enable PostgreSQL

1. Start the PostgreSQL service:
   sudo rc-service postgresql start

2. Enable PostgreSQL to start automatically on boot:
   sudo rc-update add postgresql default


---

3# 3. Verify PostgreSQL Installation
open psql as apostgres user:

"sudo -iu postgres"


Check if PostgreSQL is running:

pg-isready

You can also verify via:

"psql -c "SELECT version()""

(This enters psql as postgres and prints out the PostgreSQL version.)


---

4. Create a New Database and User

### 4.1 Creating the Database

While logged in as the postgres user, enter the psql shell:

psql

Create a database named merits:

CREATE DATABASE merits;

### 4.2 Creating a User

Create a new role (user) named merit_user with an encrypted password:

CREATE USER merit_user WITH: ENCRYPTED PASSWORD 'yourpassword';

Grant all privileges on the merits database to merit_user:

GRANT ALL PRIVILEGES ON DATABASE merits TO merit_user;

Exit psql:

\q


---

## 5. Checking Databases and Users

- Show list existing databases inside psql:
   `l`
- Show list users (roles) inside psql:
   `\u `

---

## 6. Import the Schema

We have an SQL file (e.g., create_tables.sql) containing the table definitions and other objects needed for this project.

Example:
psql -U merit_user -d merits -f /path/to/create_tables.sql
eplace /path/to/create_tables.sql with the actual path
to your file.

Replace /path/to/create_tables.sql with the actual path to your file.

Once imported, verify the tables were created:

"psql -U merit_user -d merits"

Then inside psql:

"\dt"

This should list the newly created tables (form, pupils, prizes, purchase, etc.)


---

7. Handling Permissions

If you encounter a â€¢permission denied for schema publi`â€™ error, grant create privileges on the public schema to your user:

grant CREATE, USAGE oN SCHEMA public TO merit_user;

Then re-run your import command. You can also change table ownershis if you need merit_user to own the tables:

alter TABLE table_name OWNER TO merit_user;


2. To reassign all objects from one role to another, connect as a superuser and run:

BEAFORE: This ass covers ALL OBJECTS oned by that role in the current database (tables, views, sequences, etc.).

Example:

REASSIGN OWNED BY old_role TO merit_user;

---

## 8. Next Steps

1. Import Pupil Merits:
	You may have a CSV file with pupil names and the number of merits they have. The next step is to import that data (e.g., via COPY statements or by parsing it in your Node.js code).

2. Set Up Node.js Application:
  - Build a Node.js server (using Express or similar) that connects to this PostgreSQL database.
  - Implement routes for adding/removing merits, displaying pupil data, etc.
  - Keep the UI touch-friendly for tablets.


3. Extend for Future Features:
	- Keep track of prize stock and alert when running low.
	- Allow pupils to log in to see their merits.
	- Add more security checks (e.g., authentication, authorization, etc.).

---

## 9. Troubleshooting

- Service Doesnâ€t Start:
	Make sure the data directory is correctly set ap/var/lib/postgresql/15/data or the correct directory for your version.

	sudo emerge --config dev-db/postgresql:15

	Verify /var/lib/postgresql/15/data (or the correct directory for your slot/version) exists.


- Connection Issues:
  - Check listen_addresses in postgresql.conf and pg_hba.conf if remote access is needed.
  - Verify firewall settings if connecting from another machine.

- Permission Errors: 

- Confirm that merit_user has privileges on the merits database with:
  \vâu

	- Use GRANT statements or ALTER TABLE to fix ownership and privileges.

---

## 10. References

- Gentoo PostgreSQL Wiki: https://wiki.gentoo.org/wiki/PostgreSQL
- PostgreSQL Official Docs: https://www.postgresql.org/docs/
- Node.js Documentation: https://node.js.org/en/docs


---

This document summarizes the steps taken so far to set up the PostgreSQL database on Gentoo Linux for the School Reward Site. Feel free to modify or extend as the project evolves.


===== FILE: controllers/csvController.js =====
// controllers/csvController.js
const path = require('path');
const pool = require('../db');
const fs = require('fs');
const csv = require('csv-parser');

/**
 * Show the CSV Upload page for Pupils.
 */
exports.showUploadPupilCSVPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'uploadCSV', 'uploadCSV.html'));
};

exports.showUploadMeritsCSVPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'uploadMeritsCSV', 'uploadMeritsCSV.html'));
};

/**
 * Handle CSV file upload & parse. For each row:
 * 1) Check if pupil with same first_name & last_name already exists.
 * 2) If not, insert a new pupil record.
 */
exports.uploadPupilCSV = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send('No CSV file uploaded.');
    }

    // The CSV file is temporarily stored at req.file.path
    const results = [];

    fs.createReadStream(req.file.path)
      .pipe(csv())  // parse the CSV
      .on('data', (row) => {
        results.push(row);
      })
      .on('end', async () => {
        // Now we have all rows in results
        let insertedCount = 0;
        let skippedCount = 0;

        for (const row of results) {
          // Expect row.first_name, row.last_name, row.form_id
          const first_name = row.first_name?.trim();
          const last_name = row.last_name?.trim();
          const form_id = row.form_id ? parseInt(row.form_id, 10) : null;

          // Basic validation
          if (!first_name || !last_name || !form_id) {
            // You could skip or log an error. For now, skip.
            skippedCount++;
            continue;
          }

          // Check if a pupil with same first & last name exists
          const checkQuery = `
            SELECT pupil_id 
            FROM pupils 
            WHERE LOWER(first_name) = LOWER($1) 
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount > 0) {
            // Already exists, skip insertion
            skippedCount++;
          } else {
            // Insert new pupil
            const insertQuery = `
              INSERT INTO pupils (first_name, last_name, merits, form_id, active)
              VALUES ($1, $2, 0, $3, true);
            `;
            await pool.query(insertQuery, [first_name, last_name, form_id]);
            insertedCount++;
          }
        }

        // Optionally delete the temp file
        fs.unlinkSync(req.file.path);

        // Provide some feedback
        res.send(`Upload complete. Inserted: ${insertedCount}, Skipped (duplicates or invalid): ${skippedCount}.`);
      });
  } catch (err) {
    console.error('Error uploading CSV:', err);
    res.status(500).send('Failed to process CSV file.');
  }
};

/**
 * POST /upload/csv/merits
 * Expects a CSV with "first_name,last_name,merits".
 * For each row, update the pupil's total merits to the CSV value.
 * If no pupil found, collect that name and return it as "missing".
 */
exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const missing = [];
  let updatedCount = 0;

  // Read the uploaded file
  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      // We'll store each row for processing later or do immediate updates. 
      // Let's do immediate updates for demonstration. 
      // But be aware we might do a large number of queries in quick succession.
      // For more advanced usage, you'd queue these or do them in "end" event.
      // However, for simplicity, let's collect them and handle in .on('end') 
      // to use async/await properly.
    })
    .on('end', async () => {
      // Actually, let's parse the entire CSV into an array first:
      // But we need to restructure the code a bit. We'll do that approach below.

      // We realized we need the data from each row, so let's parse differently:
    });
};

/*
 * We'll store rows in an array. Let's rewrite for clarity:
 */

exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const rows = [];
  const missing = [];
  let updatedCount = 0;

  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      rows.push(row);
    })
    .on('end', async () => {
      // Now we have all rows in `rows`
      // We'll process each row with async/await so we can do DB queries in sequence
      for (const row of rows) {
        const first_name = (row.first_name || '').trim();
        const last_name = (row.last_name || '').trim();
        const meritsStr = (row.merits || '').trim();
        const merits = parseInt(meritsStr, 10);

        // Basic validation
        if (!first_name || !last_name || isNaN(merits)) {
          // skip invalid row
          continue;
        }

        try {
          // Check if pupil exists
          const checkQuery = `
            SELECT pupil_id
            FROM pupils
            WHERE LOWER(first_name) = LOWER($1)
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount === 0) {
            // Not found, push to missing
            missing.push(`${first_name} ${last_name}`);
          } else {
            // We found them, update merits
            const pupilId = checkResult.rows[0].pupil_id;
            const updateQuery = `
              UPDATE pupils
              SET merits = $1
              WHERE pupil_id = $2;
            `;
            await pool.query(updateQuery, [merits, pupilId]);
            updatedCount++;
          }
        } catch (err) {
          console.error('DB error updating merits:', err);
          // We could continue or break. Let's continue for now.
        }
      }

      // Cleanup the temp file
      fs.unlinkSync(req.file.path);

      // Return JSON with updatedCount & missing
      res.json({
        updatedCount,
        missing,
      });
    })
    .on('error', (err) => {
      console.error('Error reading CSV:', err);
      res.status(500).json({ error: 'Error reading CSV file.' });
    });
};

// controllers/csvController.js

exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const rows = [];
  const missing = [];
  let updatedCount = 0;

  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      rows.push(row);
    })
    .on('end', async () => {
      // We now have the entire CSV in 'rows'
      for (const row of rows) {
        // Extract and validate
        const first_name = (row.first_name || '').trim();
        const last_name = (row.last_name || '').trim();
        const meritsStr = (row.merits || '').trim();
        const meritsToAdd = parseInt(meritsStr, 10);

        if (!first_name || !last_name || isNaN(meritsToAdd)) {
          // Skip invalid rows silently, or record them in 'missing' if you prefer
          continue;
        }

        try {
          // Check if pupil exists
          const checkQuery = `
            SELECT pupil_id
            FROM pupils
            WHERE LOWER(first_name) = LOWER($1)
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount === 0) {
            // Pupil not found; record the name
            missing.push(`${first_name} ${last_name}`);
          } else {
            // We found them, add to existing merits
            const pupilId = checkResult.rows[0].pupil_id;
            const updateQuery = `
              UPDATE pupils
              SET merits = merits + $1
              WHERE pupil_id = $2;
            `;
            await pool.query(updateQuery, [meritsToAdd, pupilId]);
            updatedCount++;
          }
        } catch (err) {
          console.error('DB error updating merits:', err);
          // continue on next row
        }
      }

      // Remove temp file
      fs.unlinkSync(req.file.path);

      // Return JSON for the front-end
      res.json({
        updatedCount,
        missing
      });
    })
    .on('error', (err) => {
      console.error('Error reading CSV:', err);
      res.status(500).json({ error: 'Error reading CSV file.' });
    });
};



===== FILE: controllers/pinController.js =====
// controllers/pinController.js

const path = require('path');

exports.showPinPage = (req, res) => {
  // Render the numeric PIN entry page
  res.sendFile(path.join(__dirname, '..', 'public', 'pinLogin', 'pinLogin.html'));
};

exports.checkPin = (req, res) => {
  const purchasePin = process.env.PURCHASE_PIN;
  const fullPin = process.env.FULL_PIN;
  const enteredPin = req.body.pin;

  if (!enteredPin) {
    return res.status(400).send('No PIN entered.');
  }

  if (enteredPin === purchasePin) {
    req.session.userRole = 'purchase';
    // Go directly to the purchase page, or redirect to home
    return res.redirect('/purchase');
  } else if (enteredPin === fullPin) {
    req.session.userRole = 'full';
    // Could redirect to a main dashboard or anywhere
    return res.redirect('/');
  } else {
    // Invalid
    return res.send(`
      <h1>Incorrect PIN</h1>
      <p><a href="/enter-pin">Try again</a></p>
    `);
  }
};

exports.logout = (req, res) => {
  req.session.destroy(() => {
    // Wipe out the session and redirect
    res.redirect('/enter-pin');
  });
};



===== FILE: controllers/prizeController.js =====
// controllers/prizeController.js
const path = require('path');
const pool = require('../db'); // same db.js pool

/**
 * Show the main "Prizes" page (HTML).
 * This is similar to the Pupils page: it lists all existing prizes.
 */
exports.showPrizesPage = (req, res) => {
  // Send the static HTML file for listing prizes
  res.sendFile(path.join(__dirname, '..', 'public', 'prizes', 'prizes.html'));
};

/**
 * Return all active prizes as JSON.
 * We'll keep it simple, ignoring columns like total_stocked_ever for now,
 * or you can expand the columns if needed.
 */
exports.getAllPrizes = async (req, res) => {
  try {
    // Example: list all prizes, including any columns you want to display
    // If you only want active ones, add "WHERE active = true"
    const query = `
      SELECT
        prize_id,
        description,
        cost_merits,
        cost_money,
        image_path,
        active
      FROM prizes
      ORDER BY prize_id;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching prizes:', err);
    res.status(500).json({ error: 'Failed to fetch prizes' });
  }
};

/**
 * Show the "Add Prize" page (HTML).
 * This is similar to the Pupils version.
 */
exports.showAddPrizeForm = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'addPrize', 'addPrize.html'));
};

/**
 * Handle "Add Prize" form submission.
 * For now, set total_stocked_ever = 0 and stock_adjustment = 0, active = true.
 */
exports.addPrize = async (req, res) => {
  try {
    // Expect these from the form
    const { description, cost_merits, cost_money, image_path } = req.body;

    // Insert into the prizes table
    // We'll default total_stocked_ever=0, stock_adjustment=0, active=true
    const insertQuery = `
      INSERT INTO prizes 
        (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
      VALUES 
        ($1, $2, $3, $4, 0, 0, true);
    `;
    await pool.query(insertQuery, [description, cost_merits, cost_money, image_path]);

    // Redirect to the main prizes list or wherever you like
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error adding prize:', err);
    res.status(500).send('Failed to add prize');
  }
};

/**
 * Show the "Edit Prize" page (HTML).
 * Typically you’d have a separate HTML (e.g., editPrize.html) or reuse the same page.
 * For example’s sake, we’ll serve a new page that can fetch existing data via /prizes/:id/json.
 */
exports.showEditPrizeForm = (req, res) => {
  // For demonstration, serve a static HTML file
  res.sendFile(path.join(__dirname, '..', 'public', 'prizes', 'editPrize.html'));
};

/**
 * Return the details for a single prize as JSON,
 * used by an edit form to pre-populate fields.
 */
exports.getPrizeById = async (req, res) => {
  const { id } = req.params;
  try {
    const query = `
      SELECT
        prize_id,
        description,
        cost_merits,
        cost_money,
        image_path,
        active
      FROM prizes
      WHERE prize_id = $1
      LIMIT 1;
    `;
    const result = await pool.query(query, [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Prize not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching prize by ID:', err);
    res.status(500).json({ error: 'Failed to fetch prize' });
  }
};

/**
 * Handle "Edit Prize" form submission.
 * Update the record in the DB.
 */
exports.editPrize = async (req, res) => {
  const { id } = req.params;
  const { description, cost_merits, cost_money, image_path, active } = req.body;
  try {
    const updateQuery = `
      UPDATE prizes
      SET
        description = $1,
        cost_merits = $2,
        cost_money = $3,
        image_path = $4,
        active = $5
      WHERE prize_id = $6;
    `;
    await pool.query(updateQuery, [
      description,
      cost_merits,
      cost_money,
      image_path,
      active === 'true' || active === true, // handle checkbox or string
      id
    ]);

    res.redirect('/prizes');
  } catch (err) {
    console.error('Error editing prize:', err);
    res.status(500).send('Failed to edit prize');
  }
};

/**
 * Delete a prize.
 * This example does a real DELETE. 
 * If you prefer a "soft delete," do: UPDATE prizes SET active=false WHERE prize_id=$1.
 */
exports.deletePrize = async (req, res) => {
  const { id } = req.params;
  try {
    const deleteQuery = `DELETE FROM prizes WHERE prize_id = $1;`;
    await pool.query(deleteQuery, [id]);
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error deleting prize:', err);
    res.status(500).send('Failed to delete prize');
  }
};

exports.addPrize = async (req, res) => {
  try {
    const { description, cost_merits, cost_money } = req.body;
    // Ensure a file was uploaded
    if (!req.file) {
      return res.status(400).json({ error: 'Image upload required' });
    }
    // Build the publically accessible path for the image
    const image_path = '/images/' + req.file.filename;

    const insertQuery = `
      INSERT INTO prizes 
        (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
      VALUES 
        ($1, $2, $3, $4, 0, 0, true);
    `;
    await pool.query(insertQuery, [description, cost_merits, cost_money, image_path]);

    // For AJAX or JSON responses you might return JSON,
    // but here we redirect back to the prizes page.
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error adding prize:', err);
    res.status(500).send('Failed to add prize');
  }
};

/**
 * Handle "Edit Prize" form submission.
 */
exports.editPrize = async (req, res) => {
  const { id } = req.params;
  let { description, cost_merits, cost_money, active } = req.body;
  // Set image_path to the original path unless a new image is uploaded
  let image_path = req.body.image_path || '';

  // If a new file was uploaded, update image_path accordingly
  if (req.file) {
    image_path = '/images/' + req.file.filename;
  }

  try {
    const updateQuery = `
      UPDATE prizes
      SET
        description = $1,
        cost_merits = $2,
        cost_money = $3,
        image_path = $4,
        active = $5
      WHERE prize_id = $6;
    `;
    await pool.query(updateQuery, [
      description,
      cost_merits,
      cost_money,
      image_path,
      active === 'true' || active === true,
      id
    ]);

    res.redirect('/prizes');
  } catch (err) {
    console.error('Error editing prize:', err);
    res.status(500).send('Failed to edit prize');
  }
};



===== FILE: controllers/pupilController.js =====
// controllers/pupilController.js
const path = require('path');
const pool = require('../db');

// Render Pupils page
exports.showPupilPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'pupils', 'pupils.html'));
};

// controllers/pupilController.js
exports.getAllPupils = async (req, res) => {
  try {
    const { form_id } = req.query;

    // Updated query: left-join the "pupils_remaining_merits" view
    // (assuming it has a column "pupil_id" and "remaining_merits").
    let query = `
      SELECT 
        p.pupil_id,
        p.first_name,
        p.last_name,
        p.merits,
        p.active,
        p.form_id,
        f.form_name,
        pr.remaining_merits
      FROM pupils p
      JOIN form f 
        ON p.form_id = f.form_id
      LEFT JOIN pupil_remaining_merits pr
        ON p.pupil_id = pr.pupil_id
      WHERE p.active = TRUE
    `;

    const params = [];
    // If form_id is provided for filtering
    if (form_id) {
      params.push(form_id);
      query += ` AND p.form_id = $${params.length}`;
    }

    // Sort by last name, first name
    query += ' ORDER BY p.last_name ASC, p.first_name ASC';

    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching pupils:', err);
    res.status(500).json({ error: 'Failed to fetch pupils' });
  }
};

// Add Pupil
exports.addPupil = async (req, res) => {
  try {
    const { first_name, last_name, form_id } = req.body;

    // Basic validation
    if (!first_name || !last_name || !form_id) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const insertQuery = `
      INSERT INTO pupils (first_name, last_name, merits, form_id, active)
      VALUES ($1, $2, 0, $3, TRUE)
    `;
    await pool.query(insertQuery, [first_name, last_name, form_id]);

    res.json({ message: 'Pupil added successfully' });
  } catch (err) {
    console.error('Error adding pupil:', err);
    res.status(500).send('Failed to add pupil');
  }
};

// Show Edit Pupil (not a separate page in the final approach, but left as is)
exports.showEditPupilForm = async (req, res) => {
  res.send('Edit form page not yet implemented. (We will use a modal instead.)');
};

// Fetch a single pupil by ID (for the modal)
exports.getSinglePupil = async (req, res) => {
  try {
    const { id } = req.params;
    const query = `
      SELECT 
        p.pupil_id, 
        p.first_name, 
        p.last_name, 
        p.merits,
        p.active,
        p.form_id,
        f.form_name,
        f.form_tutor,
        f.year_group
      FROM pupils p
      JOIN form f ON p.form_id = f.form_id
      WHERE p.pupil_id = $1
      LIMIT 1
    `;
    const result = await pool.query(query, [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Pupil not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching single pupil:', err);
    res.status(500).json({ error: 'Failed to fetch pupil' });
  }
};

// POST edit pupil
exports.editPupil = async (req, res) => {
  try {
    const { id } = req.params;
    let { first_name, last_name, form_id, merits } = req.body;

    // Validate input
    if (!first_name || !last_name || !form_id || merits == null) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    merits = parseInt(merits, 10);
    if (isNaN(merits) || merits < 0) {
      return res.status(400).json({ error: 'Merits must be a non-negative number' });
    }

    // Example: If you have a separate "merits_spent" field, add that here
    // We'll assume you want to store total merits in "merits" column
    const updateQuery = `
      UPDATE pupils
      SET first_name = $1,
          last_name  = $2,
          form_id    = $3,
          merits     = $4
      WHERE pupil_id = $5
      RETURNING *;
    `;

    const result = await pool.query(updateQuery, [first_name, last_name, form_id, merits, id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pupil not found or not updated' });
    }

    res.json({ message: 'Pupil updated successfully', pupil: result.rows[0] });
  } catch (err) {
    console.error('Error editing pupil:', err);
    res.status(500).json({ error: 'Failed to edit pupil' });
  }
};

// "Delete" pupil - set active to false
exports.deletePupil = async (req, res) => {
  try {
    const { id } = req.params;
    const query = `
      UPDATE pupils
      SET active = FALSE
      WHERE pupil_id = $1
      RETURNING *;
    `;
    const result = await pool.query(query, [id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pupil not found' });
    }

    // If this is an AJAX request, you can respond with JSON
    // If it’s a simple link or redirect, you can do a redirect instead:
    res.json({ message: 'Pupil deleted (set to inactive)' });
  } catch (err) {
    console.error('Error deleting pupil:', err);
    res.status(500).json({ error: 'Failed to delete pupil' });
  }
};

// Return all active Forms as JSON
exports.getAllForms = async (req, res) => {
  try {
    const query = `
      SELECT form_id, form_name, form_tutor, year_group
      FROM form
      WHERE active = TRUE
      ORDER BY form_name;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching forms:', err);
    res.status(500).json({ error: 'Failed to fetch forms' });
  }
};

// Add Form
exports.addForm = async (req, res) => {
  try {
    const { form_name, form_tutor, year_group } = req.body;
    const insertFormQuery = `
      INSERT INTO form (form_name, form_tutor, year_group, active)
      VALUES ($1, $2, $3, TRUE);
    `;
    await pool.query(insertFormQuery, [form_name, form_tutor, year_group]);
    res.json({ message: 'Form created successfully' });
  } catch (err) {
    console.error('Error adding form:', err);
    res.status(500).json({ error: 'Failed to add form' });
  }
};



===== FILE: controllers/purchaseController.js =====
// controllers/purchaseController.js
const path = require('path');
const pool = require('../db');

// 1) Serve the purchase.html page
exports.showPurchasePage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'purchase', 'purchase.html'));
};

// 2) Return all active prizes as JSON
exports.getAllPrizes = async (req, res) => {
  try {
    const query = `
      SELECT prize_id, description, cost_merits, cost_money, image_path
      FROM prizes
      WHERE active = TRUE
      ORDER BY prize_id;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching prizes:', error);
    res.status(500).json({ error: 'Failed to fetch prizes' });
  }
};

// 3) Search Pupil by partial name
//    We can do case-insensitive match on first/last_name
// purchaseController.js
exports.searchPupil = async (req, res) => {
  try {
    const { query } = req.query; 
    if (!query) {
      return res.json([]); 
    }

    // Use the view, returning "remaining_merits" 
    // Rename "remaining_merits" as "merits" if you want the front-end 
    // to keep using "merits" consistently.
    const sql = `
      SELECT 
        pupil_id,
        first_name,
        last_name,
        remaining_merits AS merits
      FROM pupil_remaining_merits
      WHERE 
        LOWER(first_name) LIKE LOWER($1)
        OR LOWER(last_name) LIKE LOWER($1)
        OR LOWER(CONCAT(first_name, ' ', last_name)) LIKE LOWER($1)
      ORDER BY last_name, first_name
      LIMIT 10;
    `;
    const likePattern = `%${query}%`;
    const result = await pool.query(sql, [likePattern]);
    res.json(result.rows);

  } catch (error) {
    console.error('Error searching pupils:', error);
    res.status(500).json({ error: 'Failed to search pupils' });
  }
};


// 4) Create a Purchase (deduct merits)
exports.createPurchase = async (req, res) => {
  try {
    const { prize_id, pupil_id } = req.body;

    // 1) Get the prize cost
    const prizeCheck = await pool.query(`
      SELECT cost_merits
      FROM prizes
      WHERE prize_id = $1 AND active = TRUE
    `, [prize_id]);
    if (prizeCheck.rowCount === 0) {
      return res.status(400).json({ error: 'Invalid or inactive prize' });
    }
    const cost_merits = prizeCheck.rows[0].cost_merits;

    // 2) Check pupil’s current *remaining* merits using the view
    //    pupil_remaining_merits has "pupil_id" and "remaining_merits"
    const remainCheck = await pool.query(`
      SELECT remaining_merits
      FROM pupil_remaining_merits
      WHERE pupil_id = $1
    `, [pupil_id]);
    if (remainCheck.rowCount === 0) {
      return res.status(400).json({ error: 'Invalid or inactive pupil' });
    }
    const currentRemaining = remainCheck.rows[0].remaining_merits;

    // 3) Ensure pupil has enough remaining merits
    if (currentRemaining < cost_merits) {
      return res.status(400).json({
        error: `Not enough merits. Pupil has ${currentRemaining} left, needs ${cost_merits}.`
      });
    }

    // 4) Insert into purchase (do NOT update pupils.merits)
    const insertResult = await pool.query(`
      INSERT INTO purchase (pupil_id, prize_id, merit_cost_at_time, date, active)
      VALUES ($1, $2, $3, NOW(), TRUE)
      RETURNING purchase_id
    `, [pupil_id, prize_id, cost_merits]);

    // This is the newly created purchase ID
    const newPurchaseId = insertResult.rows[0].purchase_id;

    // Return both newRemaining and newPurchaseId so front-end can track it
    return res.json({ 
      success: true, 
      newRemaining: currentRemaining - cost_merits,
      newPurchaseId
    });
  } catch (err) {
    console.error('Error creating purchase:', err);
    res.status(500).json({ error: 'Failed to create purchase' });
  }
};
// controllers/purchaseController.js

// 5) Cancel (undo) a purchase by ID
exports.cancelPurchase = async (req, res) => {
  try {
    const { purchaseId } = req.params;

    // Delete that purchase record. Alternatively, you could do a "soft delete"
    // e.g., UPDATE purchase SET active=false WHERE purchase_id=$1
    const result = await pool.query(`
      DELETE FROM purchase
      WHERE purchase_id = $1
      RETURNING purchase_id
    `, [purchaseId]);

    if (result.rowCount === 0) {
      // No matching purchase found
      return res.status(404).json({ error: 'Purchase not found' });
    }

    // If successful:
    return res.json({ success: true, message: 'Purchase canceled' });
  } catch (err) {
    console.error('Error canceling purchase:', err);
    res.status(500).json({ error: 'Failed to cancel purchase' });
  }
};



===== FILE: create_tables.sql =====
-- =========================================================
-- Drop existing objects (views & tables) if they already exist
-- =========================================================

-- Drop views first (they depend on the tables)
DROP VIEW IF EXISTS pupil_remaining_merits;
DROP VIEW IF EXISTS prize_stock;

-- Drop tables in correct order to avoid FK constraint issues
DROP TABLE IF EXISTS purchase;
DROP TABLE IF EXISTS prizes;
DROP TABLE IF EXISTS pupils;
DROP TABLE IF EXISTS form;

-- =========================================================
-- Recreate tables
-- =========================================================

-- 1. form table
CREATE TABLE form (
    form_id     SERIAL PRIMARY KEY,
    form_name   VARCHAR(100) NOT NULL,
    form_tutor  VARCHAR(100) NOT NULL,
    year_group  INTEGER      NOT NULL CHECK (year_group >= 0 AND year_group <= 14),
    active      BOOLEAN      NOT NULL DEFAULT TRUE
);

-- 2. pupils table
CREATE TABLE pupils (
    pupil_id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name  VARCHAR(100) NOT NULL,
    merits     INTEGER      NOT NULL CHECK (merits >= 0),
    form_id    INTEGER      NOT NULL,
    active     BOOLEAN      NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_pupils_form
        FOREIGN KEY (form_id)
        REFERENCES form(form_id)
        ON DELETE NO ACTION
);

-- 3. prizes table
CREATE TABLE prizes (
    prize_id           INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    description        TEXT         NOT NULL,
    cost_merits        INTEGER      NOT NULL CHECK (cost_merits >= 0),
    cost_money         INTEGER      NOT NULL CHECK (cost_money >= 0),  -- cost in pence
    image_path         VARCHAR(255) NOT NULL,
    total_stocked_ever INTEGER      NOT NULL CHECK (total_stocked_ever >= 0),
    stock_adjustment   INTEGER      NOT NULL,
    active             BOOLEAN      NOT NULL DEFAULT TRUE
);

-- 4. purchase table
CREATE TABLE purchase (
    purchase_id        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pupil_id           INTEGER   NOT NULL,
    prize_id           INTEGER   NOT NULL,
    merit_cost_at_time INTEGER   NOT NULL CHECK (merit_cost_at_time >= 0),
    date               TIMESTAMP NOT NULL,
    active             BOOLEAN   NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_purchase_pupil
        FOREIGN KEY (pupil_id)
        REFERENCES pupils(pupil_id)
        ON DELETE NO ACTION,
    CONSTRAINT fk_purchase_prize
        FOREIGN KEY (prize_id)
        REFERENCES prizes(prize_id)
        ON DELETE NO ACTION
);

-- =========================================================
-- Create views
-- =========================================================

-- View to show current stock of prizes
CREATE VIEW prize_stock AS
SELECT
    p.prize_id,
    p.description,
    p.total_stocked_ever
      + p.stock_adjustment
      - COUNT(pu.purchase_id)::INT
      AS current_stock
FROM prizes p
LEFT JOIN purchase pu
       ON p.prize_id = pu.prize_id
       AND pu.active = TRUE
WHERE p.active = TRUE
GROUP BY
    p.prize_id,
    p.description,
    p.total_stocked_ever,
    p.stock_adjustment;

-- View to show remaining merits per pupil
CREATE VIEW pupil_remaining_merits AS
SELECT
    p.pupil_id,
    p.first_name,
    p.last_name,
    p.merits
      - COALESCE(SUM(pu.merit_cost_at_time), 0)
      AS remaining_merits
FROM pupils p
LEFT JOIN purchase pu
       ON p.pupil_id = pu.pupil_id
       AND pu.active = TRUE    -- Only count active purchases
WHERE p.active = TRUE          -- Only show active pupils
GROUP BY
    p.pupil_id,
    p.first_name,
    p.last_name,
    p.merits;

ALTER TABLE purchase OWNER TO merit_user;
ALTER TABLE prizes OWNER TO merit_user;
ALTER TABLE form OWNER TO merit_user;
ALTER TABLE pupils OWNER TO merit_user;
ALTER VIEW prize_stock OWNER TO merit_user;
ALTER VIEW pupil_remaining_merits OWNER TO merit_user;


===== FILE: current_files.txt =====
DIRECTORY TREE:
└── school_merit_tracker/
    ├── controllers/
    │   ├── csvController.js
    │   ├── prizeController.js
    │   ├── pupilController.js
    │   └── purchaseController.js
    ├── public/
    │   ├── addPrize/
    │   │   ├── addPrize.css
    │   │   ├── addPrize.html
    │   │   └── addPrize.js
    │   ├── addPupil/
    │   │   ├── addPupil.css
    │   │   ├── addPupil.html
    │   │   └── addPupil.js
    │   ├── prizes/
    │   │   ├── editPrize.html
    │   │   ├── prizes.css
    │   │   ├── prizes.html
    │   │   └── prizes.js
    │   ├── pupils/
    │   │   ├── pupils.css
    │   │   ├── pupils.html
    │   │   └── pupils.js
    │   ├── purchase/
    │   │   ├── purchase.css
    │   │   ├── purchase.html
    │   │   └── purchase.js
    │   ├── uploadCSV/
    │   │   ├── uploadCSV.css
    │   │   ├── uploadCSV.html
    │   │   └── uploadCSV.js
    │   ├── uploadMeritsCSV/
    │   │   ├── uploadMeritsCSV.css
    │   │   ├── uploadMeritsCSV.html
    │   │   └── uploadMeritsCSV.js
    │   └── index.html
    ├── routes/
    │   ├── csvRoutes.js
    │   ├── prizeRoutes.js
    │   ├── pupilRoutes.js
    │   └── purchaseRoutes.js
    ├── testdata/
    │   └── sampledata.sql
    ├── .gitignore
    ├── README.md
    ├── create_tables.sql
    ├── db.js
    ├── gather_files.py
    ├── package.json
    └── server.js

========================================
FILE CONTENTS:
========================================


===== FILE: .gitignore =====
# .gitignore

# Node modules folder
node_modules/

# Environment variables
.env

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Just to be safe build artifact folders you don’t want to commit
dist/
build/

# Just to be safe
.DS_Store
.idea/
.vscode/

.git/

package-lock.json

LICENSE

output.txt

images/
temp/


===== FILE: README.md =====
# School Reward Site

This document outlines the steps taken so far to set up the PostgreSQL database for the School Reward Site on Gentoo Linux. These instructions assume you have administrative (root or sudo) privileges on your Gentoo system. Adjust any commands as needed for your particular environment.

---

## 1. Install PostgreSQL on Gentoo

1. Sync the Portage tree:
   sudo emerge --sync

2. Install PostgreSQL (e.g., version 15):
   sudo emerge --ask dev-db/postgresql:15

3. Configure the newly installed PostgreSQL:
   sudo emerge --config dev-db/postgresql:15
   This step initializes your PostgreSQL data directory (commonly found under /var/lib/postgresql/15/data or a similar path).


---

## 2. Start and Enable PostgreSQL

1. Start the PostgreSQL service:
   sudo rc-service postgresql start

2. Enable PostgreSQL to start automatically on boot:
   sudo rc-update add postgresql default


---

3# 3. Verify PostgreSQL Installation
open psql as apostgres user:

"sudo -iu postgres"


Check if PostgreSQL is running:

pg-isready

You can also verify via:

"psql -c "SELECT version()""

(This enters psql as postgres and prints out the PostgreSQL version.)


---

4. Create a New Database and User

### 4.1 Creating the Database

While logged in as the postgres user, enter the psql shell:

psql

Create a database named merits:

CREATE DATABASE merits;

### 4.2 Creating a User

Create a new role (user) named merit_user with an encrypted password:

CREATE USER merit_user WITH: ENCRYPTED PASSWORD 'yourpassword';

Grant all privileges on the merits database to merit_user:

GRANT ALL PRIVILEGES ON DATABASE merits TO merit_user;

Exit psql:

\q


---

## 5. Checking Databases and Users

- Show list existing databases inside psql:
   `l`
- Show list users (roles) inside psql:
   `\u `

---

## 6. Import the Schema

We have an SQL file (e.g., create_tables.sql) containing the table definitions and other objects needed for this project.

Example:
psql -U merit_user -d merits -f /path/to/create_tables.sql
eplace /path/to/create_tables.sql with the actual path
to your file.

Replace /path/to/create_tables.sql with the actual path to your file.

Once imported, verify the tables were created:

"psql -U merit_user -d merits"

Then inside psql:

"\dt"

This should list the newly created tables (form, pupils, prizes, purchase, etc.)


---

7. Handling Permissions

If you encounter a â€¢permission denied for schema publi`â€™ error, grant create privileges on the public schema to your user:

grant CREATE, USAGE oN SCHEMA public TO merit_user;

Then re-run your import command. You can also change table ownershis if you need merit_user to own the tables:

alter TABLE table_name OWNER TO merit_user;


2. To reassign all objects from one role to another, connect as a superuser and run:

BEAFORE: This ass covers ALL OBJECTS oned by that role in the current database (tables, views, sequences, etc.).

Example:

REASSIGN OWNED BY old_role TO merit_user;

---

## 8. Next Steps

1. Import Pupil Merits:
	You may have a CSV file with pupil names and the number of merits they have. The next step is to import that data (e.g., via COPY statements or by parsing it in your Node.js code).

2. Set Up Node.js Application:
  - Build a Node.js server (using Express or similar) that connects to this PostgreSQL database.
  - Implement routes for adding/removing merits, displaying pupil data, etc.
  - Keep the UI touch-friendly for tablets.


3. Extend for Future Features:
	- Keep track of prize stock and alert when running low.
	- Allow pupils to log in to see their merits.
	- Add more security checks (e.g., authentication, authorization, etc.).

---

## 9. Troubleshooting

- Service Doesnâ€t Start:
	Make sure the data directory is correctly set ap/var/lib/postgresql/15/data or the correct directory for your version.

	sudo emerge --config dev-db/postgresql:15

	Verify /var/lib/postgresql/15/data (or the correct directory for your slot/version) exists.


- Connection Issues:
  - Check listen_addresses in postgresql.conf and pg_hba.conf if remote access is needed.
  - Verify firewall settings if connecting from another machine.

- Permission Errors: 

- Confirm that merit_user has privileges on the merits database with:
  \vâu

	- Use GRANT statements or ALTER TABLE to fix ownership and privileges.

---

## 10. References

- Gentoo PostgreSQL Wiki: https://wiki.gentoo.org/wiki/PostgreSQL
- PostgreSQL Official Docs: https://www.postgresql.org/docs/
- Node.js Documentation: https://node.js.org/en/docs


---

This document summarizes the steps taken so far to set up the PostgreSQL database on Gentoo Linux for the School Reward Site. Feel free to modify or extend as the project evolves.


===== FILE: controllers/csvController.js =====
// controllers/csvController.js
const path = require('path');
const pool = require('../db');
const fs = require('fs');
const csv = require('csv-parser');

/**
 * Show the CSV Upload page for Pupils.
 */
exports.showUploadPupilCSVPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'uploadCSV', 'uploadCSV.html'));
};

/**
 * Handle CSV file upload & parse. For each row:
 * 1) Check if pupil with same first_name & last_name already exists.
 * 2) If not, insert a new pupil record.
 */
exports.uploadPupilCSV = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send('No CSV file uploaded.');
    }

    // The CSV file is temporarily stored at req.file.path
    const results = [];

    fs.createReadStream(req.file.path)
      .pipe(csv())  // parse the CSV
      .on('data', (row) => {
        results.push(row);
      })
      .on('end', async () => {
        // Now we have all rows in results
        let insertedCount = 0;
        let skippedCount = 0;

        for (const row of results) {
          // Expect row.first_name, row.last_name, row.form_id
          const first_name = row.first_name?.trim();
          const last_name = row.last_name?.trim();
          const form_id = row.form_id ? parseInt(row.form_id, 10) : null;

          // Basic validation
          if (!first_name || !last_name || !form_id) {
            // You could skip or log an error. For now, skip.
            skippedCount++;
            continue;
          }

          // Check if a pupil with same first & last name exists
          const checkQuery = `
            SELECT pupil_id 
            FROM pupils 
            WHERE LOWER(first_name) = LOWER($1) 
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount > 0) {
            // Already exists, skip insertion
            skippedCount++;
          } else {
            // Insert new pupil
            const insertQuery = `
              INSERT INTO pupils (first_name, last_name, merits, form_id, active)
              VALUES ($1, $2, 0, $3, true);
            `;
            await pool.query(insertQuery, [first_name, last_name, form_id]);
            insertedCount++;
          }
        }

        // Optionally delete the temp file
        fs.unlinkSync(req.file.path);

        // Provide some feedback
        res.send(`Upload complete. Inserted: ${insertedCount}, Skipped (duplicates or invalid): ${skippedCount}.`);
      });
  } catch (err) {
    console.error('Error uploading CSV:', err);
    res.status(500).send('Failed to process CSV file.');
  }
};

/**
 * POST /upload/csv/merits
 * Expects a CSV with "first_name,last_name,merits".
 * For each row, update the pupil's total merits to the CSV value.
 * If no pupil found, collect that name and return it as "missing".
 */
exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const missing = [];
  let updatedCount = 0;

  // Read the uploaded file
  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      // We'll store each row for processing later or do immediate updates. 
      // Let's do immediate updates for demonstration. 
      // But be aware we might do a large number of queries in quick succession.
      // For more advanced usage, you'd queue these or do them in "end" event.
      // However, for simplicity, let's collect them and handle in .on('end') 
      // to use async/await properly.
    })
    .on('end', async () => {
      // Actually, let's parse the entire CSV into an array first:
      // But we need to restructure the code a bit. We'll do that approach below.

      // We realized we need the data from each row, so let's parse differently:
    });
};

/*
 * We'll store rows in an array. Let's rewrite for clarity:
 */

exports.uploadMeritsCSV = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No CSV file provided.' });
  }

  const rows = [];
  const missing = [];
  let updatedCount = 0;

  fs.createReadStream(req.file.path)
    .pipe(csv())
    .on('data', (row) => {
      rows.push(row);
    })
    .on('end', async () => {
      // Now we have all rows in `rows`
      // We'll process each row with async/await so we can do DB queries in sequence
      for (const row of rows) {
        const first_name = (row.first_name || '').trim();
        const last_name = (row.last_name || '').trim();
        const meritsStr = (row.merits || '').trim();
        const merits = parseInt(meritsStr, 10);

        // Basic validation
        if (!first_name || !last_name || isNaN(merits)) {
          // skip invalid row
          continue;
        }

        try {
          // Check if pupil exists
          const checkQuery = `
            SELECT pupil_id
            FROM pupils
            WHERE LOWER(first_name) = LOWER($1)
              AND LOWER(last_name) = LOWER($2)
            LIMIT 1;
          `;
          const checkResult = await pool.query(checkQuery, [first_name, last_name]);

          if (checkResult.rowCount === 0) {
            // Not found, push to missing
            missing.push(`${first_name} ${last_name}`);
          } else {
            // We found them, update merits
            const pupilId = checkResult.rows[0].pupil_id;
            const updateQuery = `
              UPDATE pupils
              SET merits = $1
              WHERE pupil_id = $2;
            `;
            await pool.query(updateQuery, [merits, pupilId]);
            updatedCount++;
          }
        } catch (err) {
          console.error('DB error updating merits:', err);
          // We could continue or break. Let's continue for now.
        }
      }

      // Cleanup the temp file
      fs.unlinkSync(req.file.path);

      // Return JSON with updatedCount & missing
      res.json({
        updatedCount,
        missing,
      });
    })
    .on('error', (err) => {
      console.error('Error reading CSV:', err);
      res.status(500).json({ error: 'Error reading CSV file.' });
    });
};



===== FILE: controllers/prizeController.js =====
// controllers/prizeController.js
const path = require('path');
const pool = require('../db'); // same db.js pool

/**
 * Show the main "Prizes" page (HTML).
 * This is similar to the Pupils page: it lists all existing prizes.
 */
exports.showPrizesPage = (req, res) => {
  // Send the static HTML file for listing prizes
  res.sendFile(path.join(__dirname, '..', 'public', 'prizes', 'prizes.html'));
};

/**
 * Return all active prizes as JSON.
 * We'll keep it simple, ignoring columns like total_stocked_ever for now,
 * or you can expand the columns if needed.
 */
exports.getAllPrizes = async (req, res) => {
  try {
    // Example: list all prizes, including any columns you want to display
    // If you only want active ones, add "WHERE active = true"
    const query = `
      SELECT
        prize_id,
        description,
        cost_merits,
        cost_money,
        image_path,
        active
      FROM prizes
      ORDER BY prize_id;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching prizes:', err);
    res.status(500).json({ error: 'Failed to fetch prizes' });
  }
};

/**
 * Show the "Add Prize" page (HTML).
 * This is similar to the Pupils version.
 */
exports.showAddPrizeForm = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'addPrize', 'addPrize.html'));
};

/**
 * Handle "Add Prize" form submission.
 * For now, set total_stocked_ever = 0 and stock_adjustment = 0, active = true.
 */
exports.addPrize = async (req, res) => {
  try {
    // Expect these from the form
    const { description, cost_merits, cost_money, image_path } = req.body;

    // Insert into the prizes table
    // We'll default total_stocked_ever=0, stock_adjustment=0, active=true
    const insertQuery = `
      INSERT INTO prizes 
        (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
      VALUES 
        ($1, $2, $3, $4, 0, 0, true);
    `;
    await pool.query(insertQuery, [description, cost_merits, cost_money, image_path]);

    // Redirect to the main prizes list or wherever you like
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error adding prize:', err);
    res.status(500).send('Failed to add prize');
  }
};

/**
 * Show the "Edit Prize" page (HTML).
 * Typically you’d have a separate HTML (e.g., editPrize.html) or reuse the same page.
 * For example’s sake, we’ll serve a new page that can fetch existing data via /prizes/:id/json.
 */
exports.showEditPrizeForm = (req, res) => {
  // For demonstration, serve a static HTML file
  res.sendFile(path.join(__dirname, '..', 'public', 'prizes', 'editPrize.html'));
};

/**
 * Return the details for a single prize as JSON,
 * used by an edit form to pre-populate fields.
 */
exports.getPrizeById = async (req, res) => {
  const { id } = req.params;
  try {
    const query = `
      SELECT
        prize_id,
        description,
        cost_merits,
        cost_money,
        image_path,
        active
      FROM prizes
      WHERE prize_id = $1
      LIMIT 1;
    `;
    const result = await pool.query(query, [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Prize not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching prize by ID:', err);
    res.status(500).json({ error: 'Failed to fetch prize' });
  }
};

/**
 * Handle "Edit Prize" form submission.
 * Update the record in the DB.
 */
exports.editPrize = async (req, res) => {
  const { id } = req.params;
  const { description, cost_merits, cost_money, image_path, active } = req.body;
  try {
    const updateQuery = `
      UPDATE prizes
      SET
        description = $1,
        cost_merits = $2,
        cost_money = $3,
        image_path = $4,
        active = $5
      WHERE prize_id = $6;
    `;
    await pool.query(updateQuery, [
      description,
      cost_merits,
      cost_money,
      image_path,
      active === 'true' || active === true, // handle checkbox or string
      id
    ]);

    res.redirect('/prizes');
  } catch (err) {
    console.error('Error editing prize:', err);
    res.status(500).send('Failed to edit prize');
  }
};

/**
 * Delete a prize.
 * This example does a real DELETE. 
 * If you prefer a "soft delete," do: UPDATE prizes SET active=false WHERE prize_id=$1.
 */
exports.deletePrize = async (req, res) => {
  const { id } = req.params;
  try {
    const deleteQuery = `DELETE FROM prizes WHERE prize_id = $1;`;
    await pool.query(deleteQuery, [id]);
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error deleting prize:', err);
    res.status(500).send('Failed to delete prize');
  }
};

exports.addPrize = async (req, res) => {
  try {
    const { description, cost_merits, cost_money } = req.body;
    // Ensure a file was uploaded
    if (!req.file) {
      return res.status(400).json({ error: 'Image upload required' });
    }
    // Build the publically accessible path for the image
    const image_path = '/images/' + req.file.filename;

    const insertQuery = `
      INSERT INTO prizes 
        (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
      VALUES 
        ($1, $2, $3, $4, 0, 0, true);
    `;
    await pool.query(insertQuery, [description, cost_merits, cost_money, image_path]);

    // For AJAX or JSON responses you might return JSON,
    // but here we redirect back to the prizes page.
    res.redirect('/prizes');
  } catch (err) {
    console.error('Error adding prize:', err);
    res.status(500).send('Failed to add prize');
  }
};

/**
 * Handle "Edit Prize" form submission.
 */
exports.editPrize = async (req, res) => {
  const { id } = req.params;
  let { description, cost_merits, cost_money, active } = req.body;
  // Set image_path to the original path unless a new image is uploaded
  let image_path = req.body.image_path || '';

  // If a new file was uploaded, update image_path accordingly
  if (req.file) {
    image_path = '/images/' + req.file.filename;
  }

  try {
    const updateQuery = `
      UPDATE prizes
      SET
        description = $1,
        cost_merits = $2,
        cost_money = $3,
        image_path = $4,
        active = $5
      WHERE prize_id = $6;
    `;
    await pool.query(updateQuery, [
      description,
      cost_merits,
      cost_money,
      image_path,
      active === 'true' || active === true,
      id
    ]);

    res.redirect('/prizes');
  } catch (err) {
    console.error('Error editing prize:', err);
    res.status(500).send('Failed to edit prize');
  }
};



===== FILE: controllers/pupilController.js =====
// controllers/pupilController.js
const path = require('path');
const pool = require('../db');

// Render Pupils page
exports.showPupilPage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'pupils', 'pupils.html'));
};

// controllers/pupilController.js
exports.getAllPupils = async (req, res) => {
  try {
    const { form_id } = req.query;

    // Updated query: left-join the "pupils_remaining_merits" view
    // (assuming it has a column "pupil_id" and "remaining_merits").
    let query = `
      SELECT 
        p.pupil_id,
        p.first_name,
        p.last_name,
        p.merits,
        p.active,
        p.form_id,
        f.form_name,
        pr.remaining_merits
      FROM pupils p
      JOIN form f 
        ON p.form_id = f.form_id
      LEFT JOIN pupil_remaining_merits pr
        ON p.pupil_id = pr.pupil_id
      WHERE p.active = TRUE
    `;

    const params = [];
    // If form_id is provided for filtering
    if (form_id) {
      params.push(form_id);
      query += ` AND p.form_id = $${params.length}`;
    }

    // Sort by last name, first name
    query += ' ORDER BY p.last_name ASC, p.first_name ASC';

    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching pupils:', err);
    res.status(500).json({ error: 'Failed to fetch pupils' });
  }
};

// Add Pupil
exports.addPupil = async (req, res) => {
  try {
    const { first_name, last_name, form_id } = req.body;

    // Basic validation
    if (!first_name || !last_name || !form_id) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const insertQuery = `
      INSERT INTO pupils (first_name, last_name, merits, form_id, active)
      VALUES ($1, $2, 0, $3, TRUE)
    `;
    await pool.query(insertQuery, [first_name, last_name, form_id]);

    res.json({ message: 'Pupil added successfully' });
  } catch (err) {
    console.error('Error adding pupil:', err);
    res.status(500).send('Failed to add pupil');
  }
};

// Show Edit Pupil (not a separate page in the final approach, but left as is)
exports.showEditPupilForm = async (req, res) => {
  res.send('Edit form page not yet implemented. (We will use a modal instead.)');
};

// Fetch a single pupil by ID (for the modal)
exports.getSinglePupil = async (req, res) => {
  try {
    const { id } = req.params;
    const query = `
      SELECT 
        p.pupil_id, 
        p.first_name, 
        p.last_name, 
        p.merits,
        p.active,
        p.form_id,
        f.form_name,
        f.form_tutor,
        f.year_group
      FROM pupils p
      JOIN form f ON p.form_id = f.form_id
      WHERE p.pupil_id = $1
      LIMIT 1
    `;
    const result = await pool.query(query, [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Pupil not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching single pupil:', err);
    res.status(500).json({ error: 'Failed to fetch pupil' });
  }
};

// POST edit pupil
exports.editPupil = async (req, res) => {
  try {
    const { id } = req.params;
    let { first_name, last_name, form_id, merits } = req.body;

    // Validate input
    if (!first_name || !last_name || !form_id || merits == null) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    merits = parseInt(merits, 10);
    if (isNaN(merits) || merits < 0) {
      return res.status(400).json({ error: 'Merits must be a non-negative number' });
    }

    // Example: If you have a separate "merits_spent" field, add that here
    // We'll assume you want to store total merits in "merits" column
    const updateQuery = `
      UPDATE pupils
      SET first_name = $1,
          last_name  = $2,
          form_id    = $3,
          merits     = $4
      WHERE pupil_id = $5
      RETURNING *;
    `;

    const result = await pool.query(updateQuery, [first_name, last_name, form_id, merits, id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pupil not found or not updated' });
    }

    res.json({ message: 'Pupil updated successfully', pupil: result.rows[0] });
  } catch (err) {
    console.error('Error editing pupil:', err);
    res.status(500).json({ error: 'Failed to edit pupil' });
  }
};

// "Delete" pupil - set active to false
exports.deletePupil = async (req, res) => {
  try {
    const { id } = req.params;
    const query = `
      UPDATE pupils
      SET active = FALSE
      WHERE pupil_id = $1
      RETURNING *;
    `;
    const result = await pool.query(query, [id]);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Pupil not found' });
    }

    // If this is an AJAX request, you can respond with JSON
    // If it’s a simple link or redirect, you can do a redirect instead:
    res.json({ message: 'Pupil deleted (set to inactive)' });
  } catch (err) {
    console.error('Error deleting pupil:', err);
    res.status(500).json({ error: 'Failed to delete pupil' });
  }
};

// Return all active Forms as JSON
exports.getAllForms = async (req, res) => {
  try {
    const query = `
      SELECT form_id, form_name, form_tutor, year_group
      FROM form
      WHERE active = TRUE
      ORDER BY form_name;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching forms:', err);
    res.status(500).json({ error: 'Failed to fetch forms' });
  }
};

// Add Form
exports.addForm = async (req, res) => {
  try {
    const { form_name, form_tutor, year_group } = req.body;
    const insertFormQuery = `
      INSERT INTO form (form_name, form_tutor, year_group, active)
      VALUES ($1, $2, $3, TRUE);
    `;
    await pool.query(insertFormQuery, [form_name, form_tutor, year_group]);
    res.json({ message: 'Form created successfully' });
  } catch (err) {
    console.error('Error adding form:', err);
    res.status(500).json({ error: 'Failed to add form' });
  }
};



===== FILE: controllers/purchaseController.js =====
// controllers/purchaseController.js
const path = require('path');
const pool = require('../db');

// 1) Serve the purchase.html page
exports.showPurchasePage = (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'purchase', 'purchase.html'));
};

// 2) Return all active prizes as JSON
exports.getAllPrizes = async (req, res) => {
  try {
    const query = `
      SELECT prize_id, description, cost_merits, cost_money, image_path
      FROM prizes
      WHERE active = TRUE
      ORDER BY prize_id;
    `;
    const result = await pool.query(query);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching prizes:', error);
    res.status(500).json({ error: 'Failed to fetch prizes' });
  }
};

// 3) Search Pupil by partial name
//    We can do case-insensitive match on first/last_name
// purchaseController.js
exports.searchPupil = async (req, res) => {
  try {
    const { query } = req.query; 
    if (!query) {
      return res.json([]); 
    }

    // Use the view, returning "remaining_merits" 
    // Rename "remaining_merits" as "merits" if you want the front-end 
    // to keep using "merits" consistently.
    const sql = `
      SELECT 
        pupil_id,
        first_name,
        last_name,
        remaining_merits AS merits
      FROM pupil_remaining_merits
      WHERE 
        LOWER(first_name) LIKE LOWER($1)
        OR LOWER(last_name) LIKE LOWER($1)
        OR LOWER(CONCAT(first_name, ' ', last_name)) LIKE LOWER($1)
      ORDER BY last_name, first_name
      LIMIT 10;
    `;
    const likePattern = `%${query}%`;
    const result = await pool.query(sql, [likePattern]);
    res.json(result.rows);

  } catch (error) {
    console.error('Error searching pupils:', error);
    res.status(500).json({ error: 'Failed to search pupils' });
  }
};


// 4) Create a Purchase (deduct merits)
exports.createPurchase = async (req, res) => {
  try {
    const { prize_id, pupil_id } = req.body;

    // 1) Get the prize cost
    const prizeCheck = await pool.query(`
      SELECT cost_merits
      FROM prizes
      WHERE prize_id = $1 AND active = TRUE
    `, [prize_id]);
    if (prizeCheck.rowCount === 0) {
      return res.status(400).json({ error: 'Invalid or inactive prize' });
    }
    const cost_merits = prizeCheck.rows[0].cost_merits;

    // 2) Check pupil’s current *remaining* merits using the view
    //    pupil_remaining_merits has "pupil_id" and "remaining_merits"
    const remainCheck = await pool.query(`
      SELECT remaining_merits
      FROM pupil_remaining_merits
      WHERE pupil_id = $1
    `, [pupil_id]);
    if (remainCheck.rowCount === 0) {
      return res.status(400).json({ error: 'Invalid or inactive pupil' });
    }
    const currentRemaining = remainCheck.rows[0].remaining_merits;

    // 3) Ensure pupil has enough remaining merits
    if (currentRemaining < cost_merits) {
      return res.status(400).json({
        error: `Not enough merits. Pupil has ${currentRemaining} left, needs ${cost_merits}.`
      });
    }

    // 4) Insert into purchase (do NOT update pupils.merits)
    const insertResult = await pool.query(`
      INSERT INTO purchase (pupil_id, prize_id, merit_cost_at_time, date, active)
      VALUES ($1, $2, $3, NOW(), TRUE)
      RETURNING purchase_id
    `, [pupil_id, prize_id, cost_merits]);

    // This is the newly created purchase ID
    const newPurchaseId = insertResult.rows[0].purchase_id;

    // Return both newRemaining and newPurchaseId so front-end can track it
    return res.json({ 
      success: true, 
      newRemaining: currentRemaining - cost_merits,
      newPurchaseId
    });
  } catch (err) {
    console.error('Error creating purchase:', err);
    res.status(500).json({ error: 'Failed to create purchase' });
  }
};
// controllers/purchaseController.js

// 5) Cancel (undo) a purchase by ID
exports.cancelPurchase = async (req, res) => {
  try {
    const { purchaseId } = req.params;

    // Delete that purchase record. Alternatively, you could do a "soft delete"
    // e.g., UPDATE purchase SET active=false WHERE purchase_id=$1
    const result = await pool.query(`
      DELETE FROM purchase
      WHERE purchase_id = $1
      RETURNING purchase_id
    `, [purchaseId]);

    if (result.rowCount === 0) {
      // No matching purchase found
      return res.status(404).json({ error: 'Purchase not found' });
    }

    // If successful:
    return res.json({ success: true, message: 'Purchase canceled' });
  } catch (err) {
    console.error('Error canceling purchase:', err);
    res.status(500).json({ error: 'Failed to cancel purchase' });
  }
};



===== FILE: create_tables.sql =====
-- =========================================================
-- Drop existing objects (views & tables) if they already exist
-- =========================================================

-- Drop views first (they depend on the tables)
DROP VIEW IF EXISTS pupil_remaining_merits;
DROP VIEW IF EXISTS prize_stock;

-- Drop tables in correct order to avoid FK constraint issues
DROP TABLE IF EXISTS purchase;
DROP TABLE IF EXISTS prizes;
DROP TABLE IF EXISTS pupils;
DROP TABLE IF EXISTS form;

-- =========================================================
-- Recreate tables
-- =========================================================

-- 1. form table
CREATE TABLE form (
    form_id     SERIAL PRIMARY KEY,
    form_name   VARCHAR(100) NOT NULL,
    form_tutor  VARCHAR(100) NOT NULL,
    year_group  INTEGER      NOT NULL CHECK (year_group >= 0 AND year_group <= 14),
    active      BOOLEAN      NOT NULL DEFAULT TRUE
);

-- 2. pupils table
CREATE TABLE pupils (
    pupil_id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name  VARCHAR(100) NOT NULL,
    merits     INTEGER      NOT NULL CHECK (merits >= 0),
    form_id    INTEGER      NOT NULL,
    active     BOOLEAN      NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_pupils_form
        FOREIGN KEY (form_id)
        REFERENCES form(form_id)
        ON DELETE NO ACTION
);

-- 3. prizes table
CREATE TABLE prizes (
    prize_id           INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    description        TEXT         NOT NULL,
    cost_merits        INTEGER      NOT NULL CHECK (cost_merits >= 0),
    cost_money         INTEGER      NOT NULL CHECK (cost_money >= 0),  -- cost in pence
    image_path         VARCHAR(255) NOT NULL,
    total_stocked_ever INTEGER      NOT NULL CHECK (total_stocked_ever >= 0),
    stock_adjustment   INTEGER      NOT NULL,
    active             BOOLEAN      NOT NULL DEFAULT TRUE
);

-- 4. purchase table
CREATE TABLE purchase (
    purchase_id        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pupil_id           INTEGER   NOT NULL,
    prize_id           INTEGER   NOT NULL,
    merit_cost_at_time INTEGER   NOT NULL CHECK (merit_cost_at_time >= 0),
    date               TIMESTAMP NOT NULL,
    active             BOOLEAN   NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_purchase_pupil
        FOREIGN KEY (pupil_id)
        REFERENCES pupils(pupil_id)
        ON DELETE NO ACTION,
    CONSTRAINT fk_purchase_prize
        FOREIGN KEY (prize_id)
        REFERENCES prizes(prize_id)
        ON DELETE NO ACTION
);

-- =========================================================
-- Create views
-- =========================================================

-- View to show current stock of prizes
CREATE VIEW prize_stock AS
SELECT
    p.prize_id,
    p.description,
    p.total_stocked_ever
      + p.stock_adjustment
      - COUNT(pu.purchase_id)::INT
      AS current_stock
FROM prizes p
LEFT JOIN purchase pu
       ON p.prize_id = pu.prize_id
       AND pu.active = TRUE
WHERE p.active = TRUE
GROUP BY
    p.prize_id,
    p.description,
    p.total_stocked_ever,
    p.stock_adjustment;

-- View to show remaining merits per pupil
CREATE VIEW pupil_remaining_merits AS
SELECT
    p.pupil_id,
    p.first_name,
    p.last_name,
    p.merits
      - COALESCE(SUM(pu.merit_cost_at_time), 0)
      AS remaining_merits
FROM pupils p
LEFT JOIN purchase pu
       ON p.pupil_id = pu.pupil_id
       AND pu.active = TRUE    -- Only count active purchases
WHERE p.active = TRUE          -- Only show active pupils
GROUP BY
    p.pupil_id,
    p.first_name,
    p.last_name,
    p.merits;

ALTER TABLE purchase OWNER TO merit_user;
ALTER TABLE prizes OWNER TO merit_user;
ALTER TABLE form OWNER TO merit_user;
ALTER TABLE pupils OWNER TO merit_user;
ALTER VIEW prize_stock OWNER TO merit_user;
ALTER VIEW pupil_remaining_merits OWNER TO merit_user;


===== FILE: db.js =====
// db.js
const { Pool } = require('pg');

// Adjust these details for your database
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASS,
  port: process.env.DB_PORT,
});

module.exports = pool;



===== FILE: gather_files.py =====
#!/usr/bin/env python3

import os
import sys


def load_gitignore():
    """
    Loads .gitignore patterns into a list.
    Skips commented (#) or empty lines.
    """
    patterns = []
    gitignore_path = os.path.join(os.getcwd(), ".gitignore")
    if os.path.isfile(gitignore_path):
        with open(gitignore_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                patterns.append(line)
    return patterns


def should_ignore(path, patterns):
    """
    Checks if 'path' should be ignored based on a naïve match
    of the patterns from .gitignore.

    This is a simplified approach:
    - If a pattern ends with '/' (indicating a directory), we ignore
      if our basename matches that directory name.
    - Otherwise, we ignore if the basename exactly matches the pattern.

    Note: This does not handle wildcards (*) or advanced .gitignore rules.
    """
    basename = os.path.basename(path)
    for pattern in patterns:
        # If pattern ends with '/', assume it's a directory
        if pattern.endswith('/'):
            # e.g. "node_modules/" => ignore if this is a dir named node_modules
            if basename == pattern.rstrip('/'):
                return True
        else:
            # If it's a file pattern, ignore if it exactly matches
            if basename == pattern:
                return True
    return False


def build_directory_tree(start_path, ignore_patterns, prefix="", is_last=True):
    """
    Recursively builds a list of lines showing the directory tree structure.

    :param start_path: The directory to process
    :param ignore_patterns: Patterns from .gitignore
    :param prefix: The prefix string used for indentation in the tree
    :param is_last: Whether this is the last item in the current directory
    :return: A list of text lines representing the tree
    """
    lines = []
    basename = os.path.basename(start_path)

    # Determine which tree branch character to use
    connector = "└── " if is_last else "├── "
    lines.append(prefix + connector + basename + "/")

    # Prepare prefix for child items
    child_prefix = prefix + ("    " if is_last else "│   ")

    # Gather sub-entries
    try:
        entries = os.listdir(start_path)
    except PermissionError:
        # If we can't read the directory, skip
        return lines

    # Sort entries so the tree is consistent
    entries.sort()

    # Filter out anything that .gitignore says to ignore
    # We'll also skip hidden system directories like .git automatically
    # if they appear in the .gitignore (or we can skip them unconditionally).
    visible_entries = []
    for entry in entries:
        if entry == ".git":    # <<< HARD-CODED SKIP
            continue
        full_path = os.path.join(start_path, entry)
        if should_ignore(full_path, ignore_patterns):
            continue
        # We'll skip the .git directory automatically if you prefer:
        # if entry == ".git":
        #    continue
        if os.path.isdir(full_path):
            visible_entries.append(entry)
        else:
            # We'll list normal files after directories, or you can keep them sorted
            visible_entries.append(entry)

    # Create directory list and file list
    dirs = [e for e in visible_entries if os.path.isdir(
        os.path.join(start_path, e))]
    files = [e for e in visible_entries if os.path.isfile(
        os.path.join(start_path, e))]

    # Recursively process subdirectories
    for i, d in enumerate(dirs):
        # if no files come after the last dir
        sub_is_last = (i == len(dirs) - 1 and not files)
        dir_path = os.path.join(start_path, d)
        lines += build_directory_tree(dir_path,
                                      ignore_patterns, child_prefix, sub_is_last)

    # Add files under this directory
    for j, f in enumerate(files):
        file_connector = "└── " if j == len(files) - 1 else "├── "
        lines.append(child_prefix + file_connector + f)

    return lines


def collect_files(start_path, ignore_patterns, valid_extensions=None):
    """
    Recursively collect all files (except ignored) from start_path.
    If valid_extensions is provided (non-empty), filter by those extensions.
    Returns a list of full file paths.
    """
    collected = []

    for root, dirs, files in os.walk(start_path):
        # Remove ignored directories from walk
        # (so we don't descend into them at all)
        dirs[:] = [d for d in dirs if not should_ignore(
            os.path.join(root, d), ignore_patterns)]

        for file in files:
            file_path = os.path.join(root, file)

            # Skip ignored files
            if should_ignore(file_path, ignore_patterns):
                continue

            # If the user specified file extensions, check them
            if valid_extensions:
                # e.g. if user typed .js, we check if file ends with .js
                if not any(file.lower().endswith(ext.lower()) for ext in valid_extensions):
                    continue

            collected.append(file_path)

    return collected


def main():
    # Gather user-specified extensions (if any)
    # e.g. python gather_files.py .js .css
    if len(sys.argv) > 1:
        valid_extensions = sys.argv[1:]
    else:
        valid_extensions = None

    ignore_patterns = load_gitignore()

    # 1) Build directory tree lines (skipping ignored paths)
    # We'll do this from the current directory, e.g. "."
    tree_lines = build_directory_tree(
        os.getcwd(), ignore_patterns, prefix="", is_last=True)

    # 2) Collect all files that are not ignored
    #    If valid_extensions is None or empty, we include all
    collected_files = collect_files(
        os.getcwd(), ignore_patterns, valid_extensions)

    # 3) Output everything to "output.txt"
    output_filename = "output.txt"
    with open(output_filename, "w", encoding="utf-8") as out:
        # Write the directory tree
        out.write("DIRECTORY TREE:\n")
        for line in tree_lines:
            out.write(line + "\n")

        out.write("\n========================================\n")
        out.write("FILE CONTENTS:\n")
        out.write("========================================\n\n")

        # For each file, write a header and then the file content
        for f in sorted(collected_files):
            rel_path = os.path.relpath(f, os.getcwd())
            out.write(f"\n===== FILE: {rel_path} =====\n")
            try:
                with open(f, "r", encoding="utf-8", errors="replace") as fh:
                    content = fh.read()
                out.write(content + "\n")
            except Exception as e:
                # If we cannot read the file (binary, permission error, etc.), note it
                out.write(f"[Unable to read file: {e}]\n")

    print(f"Done! Output written to {output_filename}")


if __name__ == "__main__":
    main()


===== FILE: package.json =====
{
  "name": "school_merit_tracker",
  "version": "1.0.0",
  "description": "The School merit tracker to track pupils remaining merits after buying rewards",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tomd1415/school_merit_tracker.git"
  },
  "author": "Tom Duguid",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/tomd1415/school_merit_tracker/issues"
  },
  "homepage": "https://github.com/tomd1415/school_merit_tracker#readme",
  "dependencies": {
    "body-parser": "^1.20.3",
    "csv-parser": "^3.2.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "multer": "^1.4.5-lts.1",
    "pg": "^8.13.3"
  }
}


===== FILE: public/addPrize/addPrize.css =====
/* public/addPrize/addPrize.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

main {
  padding: 20px;
  max-width: 700px;
  margin: 0 auto;
}

section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
  margin-bottom: 30px;
}

h1 {
  margin: 0;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 150px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="text"],
input[type="number"] {
  padding: 8px;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}



===== FILE: public/addPrize/addPrize.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Prize</title>
  <link rel="stylesheet" href="/addPrize/addPrize.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Add a New Prize</h1>
  </header>

  <main>
    <section class="add-prize-section">
      <h2>New Prize Details</h2>
      <form action="/prizes/add" method="POST" id="addPrizeForm">
        <div class="form-group">
          <label for="description">Description:</label>
          <input type="text" id="description" name="description" required />
        </div>

        <div class="form-group">
          <label for="costMerits">Cost (Merits):</label>
          <input type="number" id="costMerits" name="cost_merits" min="0" required />
        </div>

        <div class="form-group">
          <label for="costMoney">Cost (Money):</label>
          <input type="number" id="costMoney" name="cost_money" min="0" required />
        </div>

        <div class="form-group">
          <label for="imagePath">Image Path:</label>
          <input type="text" id="imagePath" name="image_path" required />
        </div>

        <button type="submit">Add Prize</button>
      </form>
    </section>
  </main>

  <script src="/addPrize/addPrize.js"></script>
</body>
</html>



===== FILE: public/addPrize/addPrize.js =====
// public/addPrize/addPrize.js

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('addPrizeForm');
  
  form.addEventListener('submit', (e) => {
    // Perform any front-end checks
    // If invalid, call e.preventDefault()
  });
});



===== FILE: public/addPupil/addPupil.css =====
/* public/addPupil/addPupil.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

main {
  padding: 20px;
  max-width: 700px;
  margin: 0 auto;
}

h1 {
  margin: 0;
}

section {
  margin-bottom: 30px;
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 120px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="text"],
input[type="number"],
select {
  padding: 8px;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#addFormMessage {
  margin-top: 10px;
  color: green; /* or red on error */
}



===== FILE: public/addPupil/addPupil.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Pupil</title>
  <link rel="stylesheet" href="/addPupil/addPupil.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Add a New Pupil</h1>
  </header>

  <main>
    <!-- Section A: Add Pupil Form -->
    <section class="add-pupil-section">
      <h2>New Pupil Details</h2>
      <form action="/pupils/add" method="POST" id="addPupilForm">
        <div class="form-group">
          <label for="firstName">First Name:</label>
          <input type="text" id="firstName" name="first_name" required />
        </div>

        <div class="form-group">
          <label for="lastName">Last Name:</label>
          <input type="text" id="lastName" name="last_name" required />
        </div>

        <div class="form-group">
          <label for="formSelect">Select Form:</label>
          <select id="formSelect" name="form_id" required>
            <option value="">-- Select a Form --</option>
            <!-- Populated by addPupil.js -->
          </select>
        </div>

        <button type="submit">Add Pupil</button>
      </form>
    </section>

    <!-- Section B: Add Form -->
    <section class="add-form-section">
      <h2>Add a New Form</h2>
      <!-- We'll do an AJAX request to /pupils/addForm -->
      <form id="addForm">
        <div class="form-group">
          <label for="newFormName">Form Name:</label>
          <input type="text" id="newFormName" name="form_name" required />
        </div>

        <div class="form-group">
          <label for="newFormTutor">Form Tutor:</label>
          <input type="text" id="newFormTutor" name="form_tutor" required />
        </div>

        <div class="form-group">
          <label for="newYearGroup">Year Group:</label>
          <!-- year_group is an integer 0..14 -->
          <input type="number" id="newYearGroup" name="year_group" min="0" max="14" required />
        </div>

        <button type="submit">Create Form</button>
      </form>
      <p id="addFormMessage"></p>
    </section>
  </main>

  <script src="/addPupil/addPupil.js"></script>
</body>
</html>



===== FILE: public/addPupil/addPupil.js =====
// public/addPupil/addPupil.js

document.addEventListener('DOMContentLoaded', () => {
  const formSelect = document.getElementById('formSelect');
  const addForm = document.getElementById('addForm');
  const addFormMessage = document.getElementById('addFormMessage');

  // 1) Load existing active forms
  async function loadForms() {
    try {
      const response = await fetch('/pupils/getForms');
      if (!response.ok) throw new Error('Failed to fetch forms');
      const forms = await response.json();

      // Clear the <select> (keep placeholder)
      formSelect.innerHTML = '<option value="">-- Select a Form --</option>';

      // Populate with each form
      forms.forEach((f) => {
        const option = document.createElement('option');
        option.value = f.form_id;
        // You could display more info if you want (form_name + year_group, for example)
        option.textContent = `${f.form_name} (Tutor: ${f.form_tutor}, Year: ${f.year_group})`;
        formSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error loading forms:', error);
    }
  }

  // Load forms on page load
  loadForms();

  // 2) Handle "Add Form" submission (AJAX)
  addForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Collect inputs
    const newFormName = document.getElementById('newFormName').value.trim();
    const newFormTutor = document.getElementById('newFormTutor').value.trim();
    const newYearGroup = document.getElementById('newYearGroup').value.trim();

    if (!newFormName || !newFormTutor || !newYearGroup) return;

    try {
      const response = await fetch('/pupils/addForm', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          form_name: newFormName,
          form_tutor: newFormTutor,
          year_group: newYearGroup
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create form');
      }

      // Clear the fields, show success
      document.getElementById('newFormName').value = '';
      document.getElementById('newFormTutor').value = '';
      document.getElementById('newYearGroup').value = '';
      addFormMessage.style.color = 'green';
      addFormMessage.textContent = 'Form created successfully!';

      // Refresh the dropdown
      await loadForms();
    } catch (err) {
      console.error('Error adding form:', err);
      addFormMessage.style.color = 'red';
      addFormMessage.textContent = 'Error adding form.';
    }
  });
});



===== FILE: public/index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Merit Tracker</title>
    <!-- <link rel="stylesheet" href="/styles/index.css"> -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #ffffff;
            text-align: center;
            margin: 0;
        }
        header {
            background-color: #003a69;
            color: #ffffff;
            padding: 20px;
            font-size: 24px;
        }
        .menu {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            padding: 20px;
        }
        .menu-item {
            background-color: #005a98;
            color: white;
            padding: 15px 30px;
            margin: 10px;
            border-radius: 8px;
            text-decoration: none;
            font-size: 18px;
            transition: background 0.3s;
        }
        .menu-item:hover {
            background-color: #007acc;
        }
    </style>
    <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
</head>
<body>
    <header>School Merit Tracker</header>
    <div class="menu">
        <a href="/pupils" class="menu-item">Manage Pupils</a>
        <a href="/prizes" class="menu-item">Manage Prizes</a>
        <a href="/purchase" class="menu-item">Purchase Prizes</a>
        <a href="/upload/csv/pupils" class="menu-item">Upload Pupils CSV</a>
        <a href="/upload/csv/merits" class="menu-item">Upload Merits CSV</a>
        <a href="/prizes/add" class="menu-item">Add New Prize</a>
        <a href="/pupils/add" class="menu-item">Add New Pupil</a>
    </div>
</body>
</html>



===== FILE: public/prizes/editPrize.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Edit Prize</title>
  <link rel="stylesheet" href="/prizes/prizes.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Edit Prize</h1>
  </header>

  <main>
    <form id="editPrizeForm" method="POST">
      <div class="form-group">
        <label for="description">Description:</label>
        <input type="text" id="description" name="description" required />
      </div>
      <div class="form-group">
        <label for="cost_merits">Cost (Merits):</label>
        <input type="number" id="cost_merits" name="cost_merits" min="0" required />
      </div>
      <div class="form-group">
        <label for="cost_money">Cost (Money):</label>
        <input type="number" id="cost_money" name="cost_money" min="0" required />
      </div>
      <div class="form-group">
        <label for="image_path">Image Path:</label>
        <input type="text" id="image_path" name="image_path" required />
      </div>
      <div class="form-group">
        <label for="active">Active:</label>
        <select id="active" name="active">
          <option value="true">True</option>
          <option value="false">False</option>
        </select>
      </div>
      <button type="submit">Update Prize</button>
    </form>
  </main>

  <script>
    // Inline JS or reference an editPrize.js file
    document.addEventListener('DOMContentLoaded', async () => {
      const form = document.getElementById('editPrizeForm');
      // Parse the URL to get the prize_id from /prizes/edit/:id
      const pathParts = window.location.pathname.split('/');
      const prizeId = pathParts[pathParts.length - 1];

      // 1) Fetch existing prize data
      try {
        const res = await fetch(`/prizes/${prizeId}/json`);
        if (!res.ok) throw new Error('Failed to load prize');
        const prize = await res.json();

        document.getElementById('description').value = prize.description;
        document.getElementById('cost_merits').value = prize.cost_merits;
        document.getElementById('cost_money').value = prize.cost_money;
        document.getElementById('image_path').value = prize.image_path;
        document.getElementById('active').value = prize.active ? 'true' : 'false';

        // 2) Set form action to /prizes/edit/:id
        form.action = `/prizes/edit/${prizeId}`;
      } catch (err) {
        console.error('Error loading prize:', err);
      }
    });
  </script>
</body>
</html>



===== FILE: public/prizes/prizes.css =====
/* public/prizes/prizes.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

/* Header with dark blue background */
header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
}

.button-bar {
  margin-bottom: 10px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
}

button:hover {
  background-color: #005a98;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

table thead {
  background-color: #f2f2f2;
}

table th, table td {
  text-align: left;
  padding: 8px;
  border: 1px solid #cccccc;
}

table td button {
  margin-right: 8px;
}

/* Modal styles */
.modal {
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto;
  padding: 20px;
  width: 400px;
  position: relative;
  border-radius: 8px;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 24px;
  cursor: pointer;
}

===== FILE: public/prizes/prizes.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Prize Management</title>
  <link rel="stylesheet" href="prizes.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Prize Management</h1>
  </header>

  <main>
    <div class="button-bar">
      <button id="addPrizeBtn">Add New Prize</button>
    </div>

    <table id="prizeTable">
      <thead>
        <tr>
          <th>Prize ID</th>
          <th>Description</th>
          <th>Merit Cost</th>
          <th>Money Cost</th>
          <th>Image</th>
          <th>Active</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Dynamically inserted by prizes.js -->
      </tbody>
    </table>
  </main>

  <!-- Add Prize Modal -->
  <div id="addPrizeModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddPrizeModal">&times;</span>
      <h2>Add New Prize</h2>
      <form id="addPrizeForm" enctype="multipart/form-data">
        <div>
          <label>Description:</label>
          <input type="text" id="addPrizeDescription" required />
        </div>
        <div>
          <label>Merit Cost:</label>
          <input type="number" id="addPrizeCostMerits" min="0" required />
        </div>
        <div>
          <label>Money Cost:</label>
          <input type="number" id="addPrizeCostMoney" min="0" required />
        </div>
        <div>
          <label>Image:</label>
          <input type="file" id="addPrizeImage" accept="image/*" required />
        </div>
        <div id="addPrizeFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Prize</button>
          <button type="button" id="cancelAddPrizeBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Prize Modal -->
  <div id="editPrizeModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeEditPrizeModal">&times;</span>
      <h2>Edit Prize</h2>
      <form id="editPrizeForm" enctype="multipart/form-data">
        <input type="hidden" id="editPrizeId" />
        <div>
          <label>Description:</label>
          <input type="text" id="editPrizeDescription" required />
        </div>
        <div>
          <label>Merit Cost:</label>
          <input type="number" id="editPrizeCostMerits" min="0" required />
        </div>
        <div>
          <label>Money Cost:</label>
          <input type="number" id="editPrizeCostMoney" min="0" required />
        </div>
        <div>
          <label>Current Image:</label>
          <div id="currentPrizeImage"></div>
        </div>
        <div>
          <label>New Image (optional):</label>
          <input type="file" id="editPrizeImage" accept="image/*" />
        </div>
        <div id="editPrizeFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Save Changes</button>
          <button type="button" id="cancelEditPrizeBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="prizes.js"></script>
</body>
</html>



===== FILE: public/prizes/prizes.js =====
// public/prizes/prizes.js

window.addEventListener('DOMContentLoaded', async () => {
  loadPrizes();

  // Open Add Prize Modal
  document.getElementById('addPrizeBtn').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'block';
  });

  // Close Add Prize Modal
  document.getElementById('closeAddPrizeModal').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'none';
  });
  document.getElementById('cancelAddPrizeBtn').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'none';
  });

  // Add Prize Form Submission
  document.getElementById('addPrizeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const feedback = document.getElementById('addPrizeFeedback');
    feedback.textContent = '';

    const description = document.getElementById('addPrizeDescription').value.trim();
    const cost_merits = document.getElementById('addPrizeCostMerits').value;
    const cost_money = document.getElementById('addPrizeCostMoney').value;
    const imageFile = document.getElementById('addPrizeImage').files[0];

    if (!description || cost_merits === '' || cost_money === '' || !imageFile) {
      feedback.textContent = 'Please provide all required inputs.';
      return;
    }

    const formData = new FormData();
    formData.append('description', description);
    formData.append('cost_merits', cost_merits);
    formData.append('cost_money', cost_money);
    formData.append('image', imageFile);

    try {
      const response = await fetch('/prizes/add', {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        // Reload prizes list and close modal
        await loadPrizes();
        document.getElementById('addPrizeModal').style.display = 'none';
      } else {
        const result = await response.json();
        feedback.textContent = result.error || 'Error adding prize';
      }
    } catch (error) {
      console.error('Error adding prize:', error);
      feedback.textContent = 'Error adding prize';
    }
  });

  // Delegate click events for Edit buttons in the table
  document.querySelector('#prizeTable tbody').addEventListener('click', async (e) => {
    if (e.target.matches('button.edit-btn')) {
      const prizeId = e.target.getAttribute('data-id');
      openEditPrizeModal(prizeId);
    }
    if (e.target.matches('button.delete-btn')) {
      const prizeId = e.target.getAttribute('data-id');
      if (confirm('Are you sure you want to delete this prize?')) {
        await deletePrize(prizeId);
        await loadPrizes();
      }
    }
  });

  // Close Edit Prize Modal
  document.getElementById('closeEditPrizeModal').addEventListener('click', () => {
    document.getElementById('editPrizeModal').style.display = 'none';
  });
  document.getElementById('cancelEditPrizeBtn').addEventListener('click', () => {
    document.getElementById('editPrizeModal').style.display = 'none';
  });

  // Edit Prize Form Submission
  document.getElementById('editPrizeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const feedback = document.getElementById('editPrizeFeedback');
    feedback.textContent = '';

    const prizeId = document.getElementById('editPrizeId').value;
    const description = document.getElementById('editPrizeDescription').value.trim();
    const cost_merits = document.getElementById('editPrizeCostMerits').value;
    const cost_money = document.getElementById('editPrizeCostMoney').value;
    const imageFile = document.getElementById('editPrizeImage').files[0];

    const formData = new FormData();
    formData.append('description', description);
    formData.append('cost_merits', cost_merits);
    formData.append('cost_money', cost_money);
    // Append new image if provided
    if (imageFile) { 
      formData.append('image', imageFile);
    }
    
    try {
      const response = await fetch(`/prizes/edit/${prizeId}`, {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        await loadPrizes();
        document.getElementById('editPrizeModal').style.display = 'none';
      } else {
        const result = await response.json();
        feedback.textContent = result.error || 'Error updating prize';
      }
    } catch (error) {
      console.error('Error editing prize:', error);
      feedback.textContent = 'Error editing prize';
    }
  });
});

// Function to load prizes and populate the table
async function loadPrizes() {
  try {
    const response = await fetch('/prizes/all/json');
    if (!response.ok) throw new Error('Network error');
    const prizes = await response.json();
    const tbody = document.querySelector('#prizeTable tbody');
    tbody.innerHTML = '';

    prizes.forEach(prize => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${prize.prize_id}</td>
        <td>${prize.description}</td>
        <td>${prize.cost_merits}</td>
        <td>${prize.cost_money}</td>
        <td><img src="${prize.image_path}" alt="Prize Image" style="width:50px;height:auto;"></td>
        <td>${prize.active}</td>
        <td>
          <button class="edit-btn" data-id="${prize.prize_id}">Edit</button>
          <button class="delete-btn" data-id="${prize.prize_id}">Delete</button>
        </td>
      `;
      tbody.appendChild(row);
    });
  } catch (error) {
    console.error('Error loading prizes:', error);
  }
}

// Function to open the Edit Prize modal and load prize details
async function openEditPrizeModal(prizeId) {
  try {
    const res = await fetch(`/prizes/${prizeId}/json`);
    if (!res.ok) throw new Error('Failed to fetch prize details');
    const prize = await res.json();

    document.getElementById('editPrizeId').value = prize.prize_id;
    document.getElementById('editPrizeDescription').value = prize.description;
    document.getElementById('editPrizeCostMerits').value = prize.cost_merits;
    document.getElementById('editPrizeCostMoney').value = prize.cost_money;
    document.getElementById('currentPrizeImage').innerHTML =
      `<img src="${prize.image_path}" alt="Current Prize Image" style="width:100px;height:auto;">`;

    document.getElementById('editPrizeModal').style.display = 'block';
  } catch (error) {
    console.error('Error fetching prize for editing:', error);
  }
}

// Function to delete prize
async function deletePrize(prizeId) {
  try {
    await fetch(`/prizes/delete/${prizeId}`, { method: 'GET' });
  } catch (error) {
    console.error('Error deleting prize:', error);
  }
}



===== FILE: public/pupils/pupils.css =====
/* public/pupils/pupils.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

/* Header styling with dark blue background */
header {
  display: flex;
  align-items: center;
  background-color: #003a69; /* Deep blue from school site */
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

/* Main content area */
main {
  padding: 20px;
}

/* Button styling */
.button-bar {
  margin-bottom: 10px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
}

button:hover {
  background-color: #005a98;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

table thead {
  background-color: #f2f2f2;
}

table th,
table td {
  text-align: left;
  padding: 8px;
  border: 1px solid #cccccc;
}

table td button {
  margin-right: 8px;
}
/* Modal styles */
.modal {
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto; 
  padding: 20px;
  width: 400px;
  position: relative;
  border-radius: 8px;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 24px;
  cursor: pointer;
}

/* Inline edit style: highlight editable cells */
td.editable {
  background-color: #fffae6; /* light yellow to highlight editable area */
}



===== FILE: public/pupils/pupils.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pupil Management</title>
  <link rel="stylesheet" href="pupils.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Pupil Management</h1>
  </header>
  
  <main>
    <div class="button-bar">
      <!-- NEW: Add Pupil button that opens the "Add Pupil" modal -->
      <button id="addPupilBtn">Add Pupil</button>
      <!-- NEW: Add Form button that opens the "Add Form" modal -->
      <button id="addFormBtn">Add Form</button>

      <label for="formFilter">Filter by Form:</label>
      <select id="formFilter">
        <option value="">All</option>
      </select>
      
      <label for="inlineEditToggle">Allow Inline Edit:</label>
      <input type="checkbox" id="inlineEditToggle" />
    </div>
    
    <table id="pupilTable">
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Form Group</th>
          <th>Merits</th>
          <th>Remaining Merits</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody><!-- Pupils inserted dynamically --></tbody>
    </table>
  </main>
  
  <!-- Existing Edit Modal (unchanged) -->
  <div id="editModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn">&times;</span>
      <h2>Edit Pupil</h2>
      <form id="editPupilForm">
        <input type="hidden" id="editPupilId" />
        <div>
          <label>First Name:</label>
          <input type="text" id="editFirstName" required />
        </div>
        <div>
          <label>Last Name:</label>
          <input type="text" id="editLastName" required />
        </div>
        <div>
          <label>Form:</label>
          <select id="editFormSelect" required></select>
        </div>
        <div>
          <label>Merits:</label>
          <input type="number" id="editMerits" min="0" required />
        </div>
        <div id="editModalFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Save</button>
          <button type="button" id="cancelEditBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- NEW: Add Pupil Modal -->
  <div id="addPupilModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddPupilModal">&times;</span>
      <h2>Add New Pupil</h2>
      <form id="addPupilForm">
        <div>
          <label>First Name:</label>
          <input type="text" id="addPupilFirstName" required />
        </div>
        <div>
          <label>Last Name:</label>
          <input type="text" id="addPupilLastName" required />
        </div>
        <div>
          <label>Form:</label>
          <select id="addPupilFormSelect" required>
            <!-- Populated by JavaScript from formsData -->
          </select>
        </div>
        <div id="addPupilFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Pupil</button>
          <button type="button" id="cancelAddPupilBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- NEW: Add Form Modal -->
  <div id="addFormModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddFormModal">&times;</span>
      <h2>Add New Form</h2>
      <form id="addFormForm">
        <div>
          <label>Form Name:</label>
          <input type="text" id="addFormName" required />
        </div>
        <div>
          <label>Form Tutor:</label>
          <input type="text" id="addFormTutor" />
        </div>
        <div>
          <label>Year Group:</label>
          <input type="text" id="addFormYearGroup" />
        </div>
        <div id="addFormFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Form</button>
          <button type="button" id="cancelAddFormBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="pupils.js"></script>
</body>
</html>



===== FILE: public/pupils/pupils.js =====
// public/pupils/pupils.js

// Global references
let inlineEditEnabled = false;
let formsData = []; // to store forms for editing

window.addEventListener('DOMContentLoaded', async () => {
  // 1. Load forms for filter dropdown + edit form select
  await loadForms();

  // 2. Add event listener to the filter dropdown
  document.getElementById('formFilter').addEventListener('change', filterPupils);

  // 3. Inline Edit Toggle
  document.getElementById('inlineEditToggle').addEventListener('change', (e) => {
    inlineEditEnabled = e.target.checked;
    toggleInlineEdit(inlineEditEnabled);
  });

  // 4. Load all pupils (no form filter initially)
  await filterPupils();

  // Setup modal close/cancel
  const modal = document.getElementById('editModal');
  const closeBtn = modal.querySelector('.close-btn');
  const cancelEditBtn = document.getElementById('cancelEditBtn');

  closeBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  cancelEditBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  // Handle form submission in modal
  const editForm = document.getElementById('editPupilForm');
  editForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    await submitEditForm();
  });
});

// Load forms into filter dropdown + edit modal select
async function loadForms() {
  try {
    const res = await fetch('/pupils/getForms');
    if (!res.ok) throw new Error('Could not load forms');

    formsData = await res.json();

    // Populate the filter dropdown
    const filterSelect = document.getElementById('formFilter');
    // Clear existing options except the first "All"
    while (filterSelect.options.length > 1) {
      filterSelect.remove(1);
    }

    formsData.forEach((frm) => {
      const option = document.createElement('option');
      option.value = frm.form_id;
      option.text = frm.form_name;
      filterSelect.appendChild(option);
    });
  } catch (err) {
    console.error(err);
  }
}

// Filter pupils by selected form
async function filterPupils() {
  const formFilterValue = document.getElementById('formFilter').value;
  await loadPupils(formFilterValue);
}

// Load pupils (with optional form_id)
async function loadPupils(form_id = '') {
  try {
    let url = '/pupils/all/json';
    if (form_id) {
      url += `?form_id=${form_id}`;
    }

    const response = await fetch(url);
    if (!response.ok) throw new Error('Network response was not ok');

    const pupils = await response.json();
    const tbody = document.querySelector('#pupilTable tbody');
    tbody.innerHTML = ''; // clear old rows

    pupils.forEach((pupil) => {
      const row = document.createElement('tr');
      
      // Store pupil_id in a data attribute (no longer as a visible column)
      row.setAttribute('data-pupil-id', pupil.pupil_id);

      // Build the row cells
      row.innerHTML = `
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="first_name">${pupil.first_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="last_name">${pupil.last_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="form_name" data-formid="${pupil.form_id}">${pupil.form_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="merits">${pupil.merits}</td>
        <!-- NEW: remaining_merits column (always read-only, no "editable" class) -->
        <td class="remaining_merits">
          ${pupil.remaining_merits != null ? pupil.remaining_merits : 'N/A'}
        </td>
        <td>
          <button onclick="openEditModal(${pupil.pupil_id})">Edit</button>
          <button onclick="confirmDeletePupil(${pupil.pupil_id})">Delete</button>
        </td>
      `;

      tbody.appendChild(row);
    });

    // If inline editing is on, apply it to the newly created rows
    if (inlineEditEnabled) {
      enableInlineEditing();
    }
  } catch (error) {
    console.error('Error loading pupils:', error);
  }
}

// Enable inline editing for relevant cells
function enableInlineEditing() {
  const editableCells = document.querySelectorAll('td.editable');
  editableCells.forEach(cell => {
    cell.contentEditable = 'true';
    cell.addEventListener('blur', handleInlineEditBlur);
  });
}

// Toggle inline editing on/off
function toggleInlineEdit(enabled) {
  const editableCells = document.querySelectorAll('td[data-field]');
  if (enabled) {
    editableCells.forEach(cell => {
      cell.classList.add('editable');
      cell.contentEditable = 'true';
      cell.addEventListener('blur', handleInlineEditBlur);
    });
  } else {
    editableCells.forEach(cell => {
      cell.classList.remove('editable');
      cell.contentEditable = 'false';
      cell.removeEventListener('blur', handleInlineEditBlur);
    });
  }
}

// Handle blur event in inline editing
// Modify handleInlineEditBlur to get pupil_id from row.dataset
async function handleInlineEditBlur(e) {
  const cell = e.target;
  const newValue = cell.textContent.trim();
  const field = cell.getAttribute('data-field');

  // Retrieve the row and pupil_id from the data attribute
  const row = cell.closest('tr');
  const pupil_id = row.dataset.pupilId;

  // Basic validation for 'merits'
  if (field === 'merits' && isNaN(newValue)) {
    alert('Merits must be a valid number');
    // revert changes by reloading
    await loadPupils(document.getElementById('formFilter').value);
    return;
  }

  // If field is 'form_name', match it to a form_id
  let form_id = null;
  if (field === 'form_name') {
    const match = formsData.find(f => f.form_name === newValue);
    if (!match) {
      alert('Unknown form name. Please use the modal for a bigger edit or select from known forms.');
      await loadPupils(document.getElementById('formFilter').value);
      return;
    }
    form_id = match.form_id;
  }

  // Gather current row data from other cells
  // Notice the changed cell indexes:
  //  0 -> first_name
  //  1 -> last_name
  //  2 -> form_name
  //  3 -> merits
  //  4 -> remaining_merits (NOT editable)
  //
  // So for reading, you can query them by data-field:
  function getFieldValue(fieldName) {
    const td = row.querySelector(`td[data-field="${fieldName}"]`);
    return td ? td.textContent.trim() : '';
  }

  const first_name = getFieldValue('first_name');
  const last_name = getFieldValue('last_name');
  const currentFormId = row.querySelector('td[data-field="form_name"]')?.getAttribute('data-formid') || '';
  const merits = getFieldValue('merits');

  const updatedData = {
    first_name: (field === 'first_name') ? newValue : first_name,
    last_name: (field === 'last_name') ? newValue : last_name,
    form_id: form_id || currentFormId,
    merits: (field === 'merits') ? newValue : merits
  };

  await updatePupil(pupil_id, updatedData);
}

// POST the update to /pupils/edit/:id
async function updatePupil(pupil_id, data) {
  try {
    const response = await fetch(`/pupils/edit/${pupil_id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();

    if (!response.ok) {
      alert(result.error || 'Error updating pupil');
    } else {
      // Reload table data to show changes
      await loadPupils(document.getElementById('formFilter').value);
    }
  } catch (err) {
    console.error('Update Pupil Error:', err);
  }
}

// Open the edit modal with existing data
async function openEditModal(pupil_id) {
  try {
    // Fetch single pupil data
    const res = await fetch(`/pupils/${pupil_id}/json`);
    if (!res.ok) throw new Error('Unable to fetch pupil details');

    const pupil = await res.json();

    // Populate form fields
    document.getElementById('editPupilId').value = pupil.pupil_id;
    document.getElementById('editFirstName').value = pupil.first_name;
    document.getElementById('editLastName').value = pupil.last_name;
    document.getElementById('editMerits').value = pupil.merits;

    // Populate form select
    const editFormSelect = document.getElementById('editFormSelect');
    editFormSelect.innerHTML = '';
    formsData.forEach(f => {
      const option = document.createElement('option');
      option.value = f.form_id;
      option.textContent = f.form_name;
      if (f.form_id === pupil.form_id) {
        option.selected = true;
      }
      editFormSelect.appendChild(option);
    });

    // Show the modal
    document.getElementById('editModal').style.display = 'block';
  } catch (err) {
    console.error(err);
  }
}

// Submit the edit form in modal
async function submitEditForm() {
  const modalFeedback = document.getElementById('editModalFeedback');
  modalFeedback.textContent = '';

  const pupil_id = document.getElementById('editPupilId').value;
  const first_name = document.getElementById('editFirstName').value.trim();
  const last_name = document.getElementById('editLastName').value.trim();
  const form_id = document.getElementById('editFormSelect').value;
  const meritsVal = document.getElementById('editMerits').value;
  const merits = parseInt(meritsVal, 10);

  // Front-end validation
  if (!first_name || !last_name || !form_id || isNaN(merits) || merits < 0) {
    modalFeedback.style.color = 'red';
    modalFeedback.textContent = 'Please provide valid inputs.';
    return;
  }

  const data = { first_name, last_name, form_id, merits };

  try {
    const response = await fetch(`/pupils/edit/${pupil_id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();

    if (!response.ok) {
      modalFeedback.style.color = 'red';
      modalFeedback.textContent = result.error || 'Error updating pupil.';
    } else {
      modalFeedback.style.color = 'green';
      modalFeedback.textContent = 'Pupil updated successfully.';
      // Close modal after a short delay
      setTimeout(() => {
        document.getElementById('editModal').style.display = 'none';
        loadPupils(document.getElementById('formFilter').value);
      }, 800);
    }
  } catch (err) {
    console.error('submitEditForm error:', err);
    modalFeedback.style.color = 'red';
    modalFeedback.textContent = 'An error occurred.';
  }
}

// Confirm delete pupil
function confirmDeletePupil(pupil_id) {
  if (confirm('Are you sure you want to delete this pupil?')) {
    deletePupil(pupil_id);
  }
}

// Delete pupil (set active = false)
async function deletePupil(pupil_id) {
  try {
    const res = await fetch(`/pupils/delete/${pupil_id}`);
    if (!res.ok) {
      const errData = await res.json();
      alert(errData.error || 'Failed to delete pupil.');
      return;
    }
    // Successfully "deleted"
    await loadPupils(document.getElementById('formFilter').value);
  } catch (err) {
    console.error('Error deleting pupil:', err);
  }
}

// 1. REFS to the new add modals and buttons
const addPupilBtn = document.getElementById('addPupilBtn');
const addPupilModal = document.getElementById('addPupilModal');
const closeAddPupilModal = document.getElementById('closeAddPupilModal');
const cancelAddPupilBtn = document.getElementById('cancelAddPupilBtn');
const addPupilForm = document.getElementById('addPupilForm');

const addFormBtn = document.getElementById('addFormBtn');
const addFormModal = document.getElementById('addFormModal');
const closeAddFormModal = document.getElementById('closeAddFormModal');
const cancelAddFormBtn = document.getElementById('cancelAddFormBtn');
const addFormFormEl = document.getElementById('addFormForm');

// 2. EVENT LISTENERS to open / close modals
addPupilBtn.addEventListener('click', () => {
  // Before showing the "Add Pupil" modal, populate the "Form" dropdown
  populateAddPupilFormSelect();
  addPupilModal.style.display = 'block';
});

closeAddPupilModal.addEventListener('click', () => {
  addPupilModal.style.display = 'none';
});
cancelAddPupilBtn.addEventListener('click', () => {
  addPupilModal.style.display = 'none';
});

// For Add Form
addFormBtn.addEventListener('click', () => {
  addFormModal.style.display = 'block';
});
closeAddFormModal.addEventListener('click', () => {
  addFormModal.style.display = 'none';
});
cancelAddFormBtn.addEventListener('click', () => {
  addFormModal.style.display = 'none';
});

// 3. SUBMIT Add Pupil form
addPupilForm.addEventListener('submit', async (event) => {
  event.preventDefault();
  const feedbackEl = document.getElementById('addPupilFeedback');
  feedbackEl.textContent = '';

  const first_name = document.getElementById('addPupilFirstName').value.trim();
  const last_name = document.getElementById('addPupilLastName').value.trim();
  const form_id = document.getElementById('addPupilFormSelect').value;

  if (!first_name || !last_name || !form_id) {
    feedbackEl.textContent = 'Please fill out all required fields.';
    return;
  }

  // Send POST request to /pupils/add
  try {
    const res = await fetch('/pupils/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ first_name, last_name, form_id })
    });
    const data = await res.json();
    if (!res.ok) {
      feedbackEl.textContent = data.error || 'Failed to add pupil.';
    } else {
      feedbackEl.style.color = 'green';
      feedbackEl.textContent = 'Pupil added successfully!';
      // Close modal after a short delay
      setTimeout(() => {
        addPupilModal.style.display = 'none';
        // Reload pupils to show the new entry
        loadPupils(document.getElementById('formFilter').value);
      }, 800);
    }
  } catch (err) {
    console.error(err);
    feedbackEl.textContent = 'An error occurred.';
  }
});

// 4. SUBMIT Add Form form
addFormFormEl.addEventListener('submit', async (event) => {
  event.preventDefault();
  const feedbackEl = document.getElementById('addFormFeedback');
  feedbackEl.textContent = '';

  const form_name = document.getElementById('addFormName').value.trim();
  const form_tutor = document.getElementById('addFormTutor').value.trim();
  const year_group = document.getElementById('addFormYearGroup').value.trim();

  if (!form_name) {
    feedbackEl.textContent = 'Form name is required.';
    return;
  }

  // Send POST request to /pupils/addForm
  try {
    const res = await fetch('/pupils/addForm', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ form_name, form_tutor, year_group })
    });
    const data = await res.json();
    if (!res.ok) {
      feedbackEl.textContent = data.error || 'Failed to add form.';
    } else {
      feedbackEl.style.color = 'green';
      feedbackEl.textContent = 'Form added successfully!';
      // Close modal after a short delay
      setTimeout(async () => {
        addFormModal.style.display = 'none';
        // Reload forms so new form appears in dropdowns
        await loadForms();
      }, 800);
    }
  } catch (err) {
    console.error(err);
    feedbackEl.textContent = 'An error occurred.';
  }
});

// 5. POPULATE the "Add Pupil" form's dropdown with the existing forms
function populateAddPupilFormSelect() {
  const select = document.getElementById('addPupilFormSelect');
  select.innerHTML = '';
  // formsData is loaded by loadForms() on page load
  formsData.forEach(f => {
    const option = document.createElement('option');
    option.value = f.form_id;
    option.textContent = f.form_name;
    select.appendChild(option);
  });
}



===== FILE: public/purchase/purchase.css =====
/* public/purchase/purchase.css */

/* RESET / BASE STYLES */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  background-color: #ffffff;
  color: #333;
}

/* HEADER */
header {
  display: flex;
  align-items: center;
  background-color: #003a69; /* School's dark blue */
  color: #ffffff;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* subtle modern shadow */
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

header h1 {
  font-size: 1.6rem;
  margin: 0;
}

/* MAIN CONTENT */
main {
  padding: 20px;
}

.page-subtitle {
  margin-bottom: 15px;
  font-size: 1.2rem;
}

/* PRIZE CONTAINER + CARDS */
#prizeContainer {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: flex-start;
}

/* Example card style for each prize */
.prize-card {
  width: 160px;
  background-color: #fafafa;
  border: 1px solid #ddd;
  border-radius: 6px;
  cursor: pointer;
  text-align: center;
  padding: 10px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.prize-card:hover {
  transform: scale(1.03);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

.prize-card img {
  width: 100%;
  height: auto;
  border-radius: 4px;
}

.prize-card h3 {
  margin: 10px 0 5px 0;
  font-size: 1rem;
  color: #333;
}

.prize-card p {
  margin: 5px 0;
  font-size: 0.9rem;
  color: #555;
}

/* MODAL OVERLAY */
.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5); /* darker overlay for clarity */
  /* You can optionally add a fade-in transition if you switch display via a class: 
     transition: opacity 0.3s ease; 
     opacity: 0; 
     &.active { display: block; opacity: 1; } 
     (But that also requires JS changes.) */
}

/* MODAL CONTENT */
.modal-content {
  background-color: #ffffff;
  margin: 70px auto;
  padding: 20px;
  width: 90%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-content h2 {
  margin-top: 0;
  font-size: 1.3rem;
}

/* CLOSE BUTTON */
.close {
  position: absolute;
  top: 15px;
  right: 15px;
  font-size: 1.5rem;
  cursor: pointer;
  color: #555;
}

/* PUPIL SEARCH / RESULTS */
#pupilSearch {
  width: 100%;
  padding: 10px;
  margin: 10px 0 15px 0;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 6px;
}

#searchResults div,
#recentPupils div {
  padding: 8px;
  border: 1px solid #ccc;
  margin-bottom: 6px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.95rem;
}

#searchResults div:hover,
#recentPupils div:hover {
  background-color: #f0f0f0;
}

/* HEADINGS INSIDE THE MODAL */
#searchResults h3,
#recentPupils h3 {
  margin-top: 20px;
  margin-bottom: 10px;
  font-size: 1.1rem;
}
/* Optional: Adjust confirmation modal styles specifically */
#confirmationModal .modal-content {
  /* For example, different background color */
  /* background-color: #eef; */
}
/* 
  purchase.css 
  (Below the existing .modal, .modal-content, etc.)
*/

/* Make the confirmation modal's heading and message stand out */
#confirmationModal .modal-content h2 {
  margin-top: 0;
  font-size: 1.4rem;
  margin-bottom: 10px;
}

#confirmationModal .modal-content p {
  line-height: 1.4;
  margin-bottom: 20px;
}

/* 
  Use a .highlight utility class to emphasize 
  the pupil’s name and purchased item 
*/
.highlight {
  font-weight: bold;
  color: #003a69; /* your school’s dark blue, for instance */
  font-size: 1.1rem;
}

/* 
  Example styling for the buttons in the confirmation modal.
  Adjust margins, padding, colors, etc. as needed.
*/
#confirmationModal button {
  margin-right: 10px;
  padding: 8px 16px;
  cursor: pointer;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
}

#confirmationOkBtn {
  background-color: #003a69; 
  color: #ffffff;
}

#confirmationOkBtn:hover {
  background-color: #005a98;
}

/* 
  “Cancel Purchase” button might be red 
  (only relevant if you implement a true “undo”/”void”).
*/
#cancelPurchaseBtn {
  background-color: #cc0000; 
  color: #ffffff;
}

#cancelPurchaseBtn:hover {
  background-color: #e60000;
}



===== FILE: public/purchase/purchase.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Purchase Page</title>
  <link rel="stylesheet" href="purchase.css">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Purchase Prizes</h1>
  </header>

  <main>
    <h2 class="page-subtitle">Tap on a prize to begin purchase</h2>
    <div id="prizeContainer">
      <!-- JavaScript will populate with available prizes -->
    </div>
  </main>

  <!-- Existing Modal for selecting pupil -->
  <div id="pupilModal" class="modal">
    <div class="modal-content">
      <span id="closeModal" class="close">&times;</span>
      <h2>Select Pupil</h2>
      <input type="text" id="pupilSearch" placeholder="Type pupil name..." />
      <div id="searchResults"></div>
      <h3>Recently Selected Pupils</h3>
      <div id="recentPupils"></div>
    </div>
  </div>

  <!-- New Modal for purchase confirmation -->
<div id="confirmationModal" class="modal">
  <div class="modal-content">
    <span id="closeConfirmation" class="close">&times;</span>
    <h2>Purchase Confirmed</h2>
    <p id="confirmationMessage"></p>
    <button id="confirmationOkBtn">OK</button>
    <button id="cancelPurchaseBtn">Cancel Purchase</button>
  </div>
</div>

  <script src="purchase.js"></script>
</body>
</html>



===== FILE: public/purchase/purchase.js =====
// public/purchase/purchase.js

let selectedPrizeId = null;
let selectedPrizeDescription = '';
let recentPupils = []; // Store last few selected pupils for quick reuse

document.addEventListener('DOMContentLoaded', () => {
  const prizeContainer = document.getElementById('prizeContainer');
  const pupilModal = document.getElementById('pupilModal');
  const closeModal = document.getElementById('closeModal');
  const pupilSearchInput = document.getElementById('pupilSearch');
  const searchResultsDiv = document.getElementById('searchResults');
  const recentPupilsDiv = document.getElementById('recentPupils');

  // Elements for the confirmation modal
  const confirmationModal = document.getElementById('confirmationModal');
  const closeConfirmation = document.getElementById('closeConfirmation');
  const confirmationOkBtn = document.getElementById('confirmationOkBtn');
  const confirmationMessage = document.getElementById('confirmationMessage');
  const cancelPurchaseBtn = document.getElementById('cancelPurchaseBtn');

//cancelPurchaseBtn.addEventListener('click', () => {
  // This is where you'd call a route to revert the purchase if you want 
  // (e.g., /purchase/cancel/:purchaseId), or simply hide the modal.
  // If the purchase was already saved in the DB, you'd need a special 
  // route or logic to 'void' or 'delete' the record.

  // If you only want to dismiss the modal without any DB changes:
//  confirmationModal.style.display = 'none';
//});

  // 1) Load all prizes
  loadPrizes();

  // 2) Click to close modal
  closeModal.addEventListener('click', () => {
    pupilModal.style.display = 'none';
    selectedPrizeId = null; // reset
    selectedPrizeDescription = '';
  });

  // Close confirmation modal (both the X and the OK button)
  closeConfirmation.addEventListener('click', () => {
    confirmationModal.style.display = 'none';
  });
  confirmationOkBtn.addEventListener('click', () => {
    confirmationModal.style.display = 'none';
  });

  // 3) Search Pupils on input
  let searchTimeout = null;
  pupilSearchInput.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    const query = pupilSearchInput.value.trim();
    if (!query) {
      searchResultsDiv.innerHTML = '';
      return;
    }
    // Add small delay to avoid spamming
    searchTimeout = setTimeout(() => {
      searchPupils(query);
    }, 300);
  });

  // 4) Render recent pupils
  function renderRecentPupils() {
    recentPupilsDiv.innerHTML = '';
    recentPupils.forEach(p => {
      const div = document.createElement('div');
      div.textContent = `${p.first_name} ${p.last_name} (Merits: ${p.merits})`;
      div.addEventListener('click', () => {
        handlePurchase(p.pupil_id, p.first_name + ' ' + p.last_name);
      });
      recentPupilsDiv.appendChild(div);
    });
  }

  // 5) Load Prizes from server
  async function loadPrizes() {
    try {
      const res = await fetch('/purchase/allPrizes');
      if (!res.ok) throw new Error('Failed to load prizes');
      const prizes = await res.json();
      prizeContainer.innerHTML = '';
      prizes.forEach(prize => {
        const card = document.createElement('div');
        card.className = 'prize-card';
        card.innerHTML = `
          <img src="${prize.image_path}" alt="Prize Image">
          <h3>${prize.description}</h3>
          <p>Cost (Merits): ${prize.cost_merits}</p>
        `;
        card.addEventListener('click', () => {
          // store the selected prize_id
          selectedPrizeId = prize.prize_id;
          selectedPrizeDescription = prize.description;
          // open the modal
          pupilModal.style.display = 'block';
          pupilSearchInput.value = '';
          searchResultsDiv.innerHTML = '';
        });
        prizeContainer.appendChild(card);
      });
    } catch (err) {
      console.error(err);
    }
  }

  // 6) Search Pupils by partial name
  async function searchPupils(query) {
    try {
      const res = await fetch(`/purchase/searchPupil?query=${encodeURIComponent(query)}`);
      if (!res.ok) throw new Error('Failed to search pupils');
      const pupils = await res.json();
      searchResultsDiv.innerHTML = '';
      pupils.forEach(p => {
        const div = document.createElement('div');
        div.textContent = `${p.first_name} ${p.last_name} (Merits: ${p.merits})`;
        div.addEventListener('click', () => handlePurchase(p.pupil_id, p.first_name + ' ' + p.last_name));
        searchResultsDiv.appendChild(div);
      });
    } catch (err) {
      console.error(err);
    }
  }

 // 7) Handle the actual purchase
async function handlePurchase(pupil_id, pupilName) {
  if (!selectedPrizeId) return; // no prize selected => do nothing
  try {
    const res = await fetch('/purchase/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prize_id: selectedPrizeId, pupil_id })
    });

    if (!res.ok) {
      const errorData = await res.json();
      // This is where you'd still show an alert if the pupil has insufficient merits (or any error):
      alert(errorData.error || 'Error creating purchase');
      return;
    }

    const data = await res.json();
    if (data.success) {
      // 1) Remove or comment out the alert:
      // alert(`Purchase successful! New merits: ${data.newRemaining}`);
      currentPurchaseId = data.newPurchaseId;
      // 2) Show the confirmation modal instead:
      confirmationMessage.innerHTML = `
        Successfully purchased <span class="highlight">${selectedPrizeDescription}</span>
        for <span class="highlight">${pupilName}</span>.<br>
        Remaining merits: <span class="highlight">${data.newRemaining}</span>        `;
      confirmationModal.style.display = 'block';

      // 3) Update recent pupils (so we can tap them again quickly)
      addRecentPupil(pupil_id, data.newMerits);

      // 4) Optionally close the "select pupil" modal, if it's still open
      pupilModal.style.display = 'none';
    }
  } catch (err) {
    console.error(err);
    alert('Error creating purchase');
  }
}
  // 8) Add or update recent pupil in the array
  //    We'll need to fetch the pupil name if we don't have it,
  //    but we do from the search results (maybe store that).
  function addRecentPupil(pupil_id, newMerits) {
    // We'll do a quick approach: if the pupil was one of the search results,
    // we likely already have first_name, last_name, etc. 
    // But we haven't stored it. Let's do a direct approach with a short fetch:

    fetch(`/purchase/searchPupil?query=${pupil_id}`)
      .then(r => r.json())
      .then(list => {
        // We'll see if any pupil matches exactly
        const found = list.find(x => x.pupil_id === pupil_id);
        if (found) {
          found.merits = newMerits; // update merits
          // remove existing if in array
          recentPupils = recentPupils.filter(rp => rp.pupil_id !== pupil_id);
          // unshift to front
          recentPupils.unshift(found);
          // limit to 5
          if (recentPupils.length > 5) {
            recentPupils.pop();
          }
          renderRecentPupils();
        }
      });
  }
    // When user clicks “Cancel Purchase”
  cancelPurchaseBtn.addEventListener('click', async () => {
    if (!currentPurchaseId) {
      // If there's no purchase ID saved, just close the modal or do nothing
      confirmationModal.style.display = 'none';
      return;
    }

    // Call the new route
    try {
      const res = await fetch(`/purchase/cancel/${currentPurchaseId}`, {
        method: 'DELETE'
      });
      if (!res.ok) throw new Error('Failed to cancel purchase');

      const result = await res.json();
      if (result.success) {
        // e.g. show a message or reload updated data
        alert('Purchase canceled.');

        // Hide the modal
        confirmationModal.style.display = 'none';

        // Optionally clear the stored ID
        currentPurchaseId = null;
      } else {
        alert(result.error || 'Could not cancel purchase');
      }
    } catch (err) {
      console.error(err);
      alert('Error canceling purchase');
    }
  });
});



===== FILE: public/uploadCSV/uploadCSV.css =====
/* public/uploadCSV/uploadCSV.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
}

.upload-section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 100px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="file"] {
  padding: 5px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#uploadMessage {
  margin-top: 10px;
  color: green; /* or red if an error */
}



===== FILE: public/uploadCSV/uploadCSV.html =====
<!-- public/uploadCSV/uploadCSV.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload CSV (Pupils)</title>
  <link rel="stylesheet" href="/uploadCSV/uploadCSV.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Upload CSV for Pupils</h1>
  </header>

  <main>
    <section class="upload-section">
      <h2>Select CSV file</h2>
      <form id="uploadForm" action="/upload/csv/pupils" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="csvFile">CSV File:</label>
          <input type="file" id="csvFile" name="csvFile" accept=".csv" required />
        </div>
        <button type="submit">Upload</button>
      </form>
      <p id="uploadMessage"></p>
    </section>
  </main>

  <script src="/uploadCSV/uploadCSV.js"></script>
</body>
</html>



===== FILE: public/uploadCSV/uploadCSV.js =====
// public/uploadCSV/uploadCSV.js

document.addEventListener('DOMContentLoaded', () => {
  const uploadForm = document.getElementById('uploadForm');
  const uploadMessage = document.getElementById('uploadMessage');

  // If you want to do AJAX, you could do:
  // uploadForm.addEventListener('submit', (e) => {
  //   e.preventDefault();
  //   // handle with fetch or FormData
  // });

  // For now, let it submit normally, and you can set a success message in the controller redirect or response.
});



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.css =====
/* public/uploadMeritsCSV/uploadMeritsCSV.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
}

.upload-section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 100px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="file"] {
  padding: 5px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#errorBox {
  margin-top: 20px;
  background-color: #ffebe6;
  padding: 10px;
  border: 1px solid #cc0000;
  border-radius: 4px;
}

#errorBox h3 {
  margin-top: 0;
  color: #cc0000;
}



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload Merits CSV</title>
  <link rel="stylesheet" href="/uploadMeritsCSV/uploadMeritsCSV.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Upload CSV to Update Merits</h1>
  </header>

  <main>
    <section class="upload-section">
      <h2>Select CSV file</h2>
      <!-- We'll do AJAX, so no action= or method= needed if we handle in JS. -->
      <form id="uploadForm" enctype="multipart/form-data">
        <div class="form-group">
          <label for="csvFile">CSV File:</label>
          <input type="file" id="csvFile" name="csvFile" accept=".csv" required />
        </div>
        <button type="submit">Upload</button>
      </form>
      <div id="uploadMessage"></div>

      <div class="error-box" id="errorBox" style="display: none;">
        <h3>Could Not Update These Pupils (Not Found):</h3>
        <ul id="errorList"></ul>
      </div>
    </section>
  </main>

  <script src="/uploadMeritsCSV/uploadMeritsCSV.js"></script>
</body>
</html>



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.js =====
// public/uploadMeritsCSV/uploadMeritsCSV.js

document.addEventListener('DOMContentLoaded', () => {
  const uploadForm = document.getElementById('uploadForm');
  const csvFileInput = document.getElementById('csvFile');
  const uploadMessage = document.getElementById('uploadMessage');
  const errorBox = document.getElementById('errorBox');
  const errorList = document.getElementById('errorList');

  uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    uploadMessage.textContent = '';
    errorBox.style.display = 'none';
    errorList.innerHTML = '';

    const file = csvFileInput.files[0];
    if (!file) {
      uploadMessage.textContent = 'Please select a CSV file.';
      return;
    }

    // We'll build a FormData to send the file
    const formData = new FormData();
    formData.append('csvFile', file);

    try {
      const response = await fetch('/upload/csv/merits', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const result = await response.json(); 
      // result should have something like { updatedCount: X, missing: [...] }

      // Show success message:
      uploadMessage.style.color = 'green';
      uploadMessage.textContent = 
        `Upload complete. Updated: ${result.updatedCount}.`;

      // If we have missing pupils, display them:
      if (result.missing && result.missing.length > 0) {
        errorBox.style.display = 'block';
        result.missing.forEach(name => {
          const li = document.createElement('li');
          li.textContent = name;
          errorList.appendChild(li);
        });
      }

    } catch (err) {
      console.error(err);
      uploadMessage.style.color = 'red';
      uploadMessage.textContent = 'Error uploading or processing CSV.';
    }
  });
});



===== FILE: routes/csvRoutes.js =====
// routes/csvRoutes.js
const express = require('express');
const router = express.Router();
const csvController = require('../controllers/csvController');

// Multer setup for file uploads
const multer = require('multer');
const path = require('path');

// We'll store the uploaded CSV in a temp folder
const upload = multer({ dest: path.join(__dirname, '..', 'temp') });

// Show the Upload CSV page
router.get('/pupils', csvController.showUploadPupilCSVPage);

// Handle CSV file upload
router.post('/pupils', upload.single('csvFile'), csvController.uploadPupilCSV);

// Add a new route for "upload merits CSV"
router.post('/merits', upload.single('csvFile'), csvController.uploadMeritsCSV);


module.exports = router;



===== FILE: routes/prizeRoutes.js =====
// routes/prizeRoutes.js
const express = require('express');
const router = express.Router();
const path = require('path');
const multer = require('multer');
const prizeController = require('../controllers/prizeController');

// Configure multer storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Save files to public/uploads
    cb(null, path.join(__dirname, '..', 'public', 'images'));
  },
  filename: function (req, file, cb) {
    // Create a unique file name
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage });

// Show main Prizes page (HTML)
router.get('/', prizeController.showPrizesPage);

// Return all Prizes as JSON
router.get('/all/json', prizeController.getAllPrizes);

// Show "Add Prize" page (HTML)
router.get('/add', prizeController.showAddPrizeForm);

// Handle "Add Prize" form submission with image upload
router.post('/add', upload.single('image'), prizeController.addPrize);

// Show "Edit Prize" page (HTML)
router.get('/edit/:id', prizeController.showEditPrizeForm);

// Return single prize as JSON for the edit form
router.get('/:id/json', prizeController.getPrizeById);

// Handle "Edit Prize" form submission with optional image upload
router.post('/edit/:id', upload.single('image'), prizeController.editPrize);

// Handle "Delete Prize"
router.get('/delete/:id', prizeController.deletePrize);

module.exports = router;



===== FILE: routes/pupilRoutes.js =====
// routes/pupilRoutes.js
const express = require('express');
const router = express.Router();
const pupilController = require('../controllers/pupilController');

// Show main Pupils page
router.get('/', pupilController.showPupilPage);

// Return Pupils as JSON with optional filter
router.get('/all/json', pupilController.getAllPupils);

// Get single pupil by ID (for editing)
router.get('/:id/json', pupilController.getSinglePupil);

// Show the "Add Pupil" page
//router.get('/add', pupilController.showAddPupilForm);

// Return all active forms as JSON
router.get('/getForms', pupilController.getAllForms);

// Handle "Add Pupil"
router.post('/add', pupilController.addPupil);

// Show the "Edit Pupil" page (unused if using modal)
router.get('/edit/:id', pupilController.showEditPupilForm);

// Handle "Edit Pupil"
router.post('/edit/:id', pupilController.editPupil);

// Handle "Add Form"
router.post('/addForm', pupilController.addForm);

// Handle "Delete Pupil" (set active=false)
router.get('/delete/:id', pupilController.deletePupil);

module.exports = router;



===== FILE: routes/purchaseRoutes.js =====
// routes/purchaseRoutes.js
const express = require('express');
const router = express.Router();
const purchaseController = require('../controllers/purchaseController');

// 1) Show the main "Purchase" page
router.get('/', purchaseController.showPurchasePage);

// 2) Return all active prizes (for listing)
router.get('/allPrizes', purchaseController.getAllPrizes);

// 3) Search Pupils by partial name
router.get('/searchPupil', purchaseController.searchPupil);

// 4) Create a Purchase
router.post('/create', purchaseController.createPurchase);

// 5) Cancel (DELETE) a Purchase by ID
router.delete('/cancel/:purchaseId', purchaseController.cancelPurchase);

module.exports = router;



===== FILE: server.js =====
// server.js
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const app = express();
const prizeRoutes = require('./routes/prizeRoutes');
const csvRoutes = require('./routes/csvRoutes');
const purchaseRoutes = require('./routes/purchaseRoutes');

console.log('Database Host:', process.env.DB_HOST);
// Import routes
const pupilRoutes = require('./routes/pupilRoutes');

// Body Parser
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Serve all files in the public folder (CSS, JS, images, HTML, etc.)
app.use(express.static(path.join(__dirname, 'public')));

// Attach /pupils routes
app.use('/pupils', pupilRoutes);
app.use('/prizes', prizeRoutes);
app.use('/upload/csv', csvRoutes);
app.use('/purchase', purchaseRoutes);
// Example of a default route to redirect or show a home page
app.get('/', (req, res) => {
  // Could send a landing page, or redirect to /pupils, etc.
  res.redirect('/pupils');
});

// Start server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});



===== FILE: testdata/sampledata.sql =====
TRUNCATE TABLE purchase, prizes, pupils, form RESTART IDENTITY CASCADE;

-- =========================--
-- 1) Insert Forms
-- =========================
INSERT INTO form (form_name, form_tutor, year_group, active)
VALUES
  ('7A',   'Mr. Adams',     7,  true),
  ('7B',   'Ms. Baker',     7,  true),
  ('8A',   'Mr. Carter',    8,  true),
  ('9A',   'Mr. Davis',     9,  true),
  ('10A',  'Ms. Evans',    10,  true),
  ('11B',  'Mr. Fisher',   11,  true);

-- =========================
-- 2) Insert Pupils
--    We'll create 30 pupils (5 per form).
--    Merits vary among them. The form_id references the 6 forms above
--    (serial IDs typically start at 1; adjust if needed).
-- =========================

-- Pupils for form_id = 1 (7A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('John',   'Smith',   10, 1, true),
  ('Emily',  'Jones',   15, 1, true),
  ('Lucas',  'Taylor',  0,  1, true),
  ('Lily',   'Baker',   5,  1, true),
  ('James',  'Wright',  8,  1, true);

-- Pupils for form_id = 2 (7B)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Sophia',  'Hughes',  12, 2, true),
  ('Oliver',  'Green',   4,  2, true),
  ('Chloe',   'Hall',    2,  2, true),
  ('Noah',    'Clark',   20, 2, true),
  ('Mia',     'Walker',  1,  2, true);

-- Pupils for form_id = 3 (8A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Ava',     'Harris',  9,  3, true),
  ('Ethan',   'Lewis',   3,  3, true),
  ('Amelia',  'Roberts', 7,  3, true),
  ('Jacob',   'Bennett', 11, 3, true),
  ('Layla',   'Price',   0,  3, true);

-- Pupils for form_id = 4 (9A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Isaac',   'Wood',    6,  4, true),
  ('Grace',   'Edwards', 15, 4, true),
  ('Daniel',  'Fox',     2,  4, true),
  ('Freya',   'Bell',    14, 4, true),
  ('Ben',     'Bryant',  6,  4, true);

-- Pupils for form_id = 5 (10A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Emma',    'Bailey',   13, 5, true),
  ('Logan',   'Cooper',   8,  5, true),
  ('Megan',   'Mills',    3,  5, true),
  ('Zoe',     'Shaw',     9,  5, true),
  ('Henry',   'Gray',     4,  5, true);

-- Pupils for form_id = 6 (11B)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Ellie',   'Long',     25, 6, true),
  ('Evan',    'Sharp',    18, 6, true),
  ('Anna',    'Owen',     2,  6, true),
  ('Dylan',   'Reid',     10, 6, true),
  ('Heidi',   'Pearson',  5,  6, true);

-- =========================
-- 3) Insert Prizes
--    We'll create 6 prizes with varied costs.
--    cost_money is in pence (e.g., 199 = £1.99).
-- =========================
INSERT INTO prizes
  (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
VALUES
  ('Blue Pen',          5,   99,   '/images/blue_pen.png',      50,  0,  true),
  ('School T-Shirt',   15,  799,   '/images/tshirt.png',        30,  5,  true),
  ('Notebook',          8,   199,  '/images/notebook.png',      40,  0,  true),
  ('Water Bottle',      10,  299,  '/images/water_bottle.png',  25,  0,  true),
  ('USB Flash Drive',   20,  699,  '/images/usb_drive.png',     15,  0,  true),
  ('Headphones',        25,  1299, '/images/headphones.png',    10,  2,  true);

-- =========================
-- 4) Insert Purchases
--    We'll create 12 example purchase records.
--    * "merit_cost_at_time" should match the cost in merits used at the time of purchase
--    * "date" is a timestamp
--    * "active" = true (or you could set some to false if you want to test "voided" purchases)
--    Make sure the pupil_id and prize_id reference actual inserted IDs
--    (pupils start at 1..30, prizes start at 1..6, typically).
-- =========================

INSERT INTO purchase (pupil_id, prize_id, merit_cost_at_time, date, active)
VALUES
  (1,   1,   5,   '2025-03-01 10:15:00', true),  -- John Smith buys Blue Pen
  (2,   3,   8,   '2025-03-01 11:00:00', true),  -- Emily Jones buys Notebook
  (9,   2,   15,  '2025-03-02 09:30:00', true),  -- Mia Walker buys T-Shirt
  (15,  5,   20,  '2025-03-02 14:45:00', true),  -- Layla Price buys USB Drive
  (18,  1,   5,   '2025-03-03 08:20:00', true),  -- Daniel Fox buys Blue Pen
  (23,  2,   15,  '2025-03-03 10:10:00', true),  -- Megan Mills buys T-Shirt
  (28,  4,   10,  '2025-03-04 13:05:00', true),  -- Anna Owen buys Water Bottle
  (30,  3,   8,   '2025-03-04 15:00:00', true),  -- Heidi Pearson buys Notebook
  (19,  6,   25,  '2025-03-05 09:00:00', true),  -- Grace Edwards buys Headphones
  (25,  1,   5,   '2025-03-05 11:30:00', true),  -- Emma Bailey buys Blue Pen
  (26,  4,   10,  '2025-03-06 16:00:00', true),  -- Logan Cooper buys Water Bottle
  (28,  6,   25,  '2025-03-07 10:00:00', true);  -- Anna Owen also buys Headphones

-- Done!
-- This script should create 6 forms, 30 pupils, 6 prizes, and 12 purchase records,
-- giving you a good test dataset for your application.




===== FILE: db.js =====
// db.js
const { Pool } = require('pg');

// Adjust these details for your database
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASS,
  port: process.env.DB_PORT,
});

module.exports = pool;



===== FILE: gather_files.py =====
#!/usr/bin/env python3

import os
import sys


def load_gitignore():
    """
    Loads .gitignore patterns into a list.
    Skips commented (#) or empty lines.
    """
    patterns = []
    gitignore_path = os.path.join(os.getcwd(), ".gitignore")
    if os.path.isfile(gitignore_path):
        with open(gitignore_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                patterns.append(line)
    return patterns


def should_ignore(path, patterns):
    """
    Checks if 'path' should be ignored based on a naïve match
    of the patterns from .gitignore.

    This is a simplified approach:
    - If a pattern ends with '/' (indicating a directory), we ignore
      if our basename matches that directory name.
    - Otherwise, we ignore if the basename exactly matches the pattern.

    Note: This does not handle wildcards (*) or advanced .gitignore rules.
    """
    basename = os.path.basename(path)
    for pattern in patterns:
        # If pattern ends with '/', assume it's a directory
        if pattern.endswith('/'):
            # e.g. "node_modules/" => ignore if this is a dir named node_modules
            if basename == pattern.rstrip('/'):
                return True
        else:
            # If it's a file pattern, ignore if it exactly matches
            if basename == pattern:
                return True
    return False


def build_directory_tree(start_path, ignore_patterns, prefix="", is_last=True):
    """
    Recursively builds a list of lines showing the directory tree structure.

    :param start_path: The directory to process
    :param ignore_patterns: Patterns from .gitignore
    :param prefix: The prefix string used for indentation in the tree
    :param is_last: Whether this is the last item in the current directory
    :return: A list of text lines representing the tree
    """
    lines = []
    basename = os.path.basename(start_path)

    # Determine which tree branch character to use
    connector = "└── " if is_last else "├── "
    lines.append(prefix + connector + basename + "/")

    # Prepare prefix for child items
    child_prefix = prefix + ("    " if is_last else "│   ")

    # Gather sub-entries
    try:
        entries = os.listdir(start_path)
    except PermissionError:
        # If we can't read the directory, skip
        return lines

    # Sort entries so the tree is consistent
    entries.sort()

    # Filter out anything that .gitignore says to ignore
    # We'll also skip hidden system directories like .git automatically
    # if they appear in the .gitignore (or we can skip them unconditionally).
    visible_entries = []
    for entry in entries:
        if entry == ".git":    # <<< HARD-CODED SKIP
            continue
        full_path = os.path.join(start_path, entry)
        if should_ignore(full_path, ignore_patterns):
            continue
        # We'll skip the .git directory automatically if you prefer:
        # if entry == ".git":
        #    continue
        if os.path.isdir(full_path):
            visible_entries.append(entry)
        else:
            # We'll list normal files after directories, or you can keep them sorted
            visible_entries.append(entry)

    # Create directory list and file list
    dirs = [e for e in visible_entries if os.path.isdir(
        os.path.join(start_path, e))]
    files = [e for e in visible_entries if os.path.isfile(
        os.path.join(start_path, e))]

    # Recursively process subdirectories
    for i, d in enumerate(dirs):
        # if no files come after the last dir
        sub_is_last = (i == len(dirs) - 1 and not files)
        dir_path = os.path.join(start_path, d)
        lines += build_directory_tree(dir_path,
                                      ignore_patterns, child_prefix, sub_is_last)

    # Add files under this directory
    for j, f in enumerate(files):
        file_connector = "└── " if j == len(files) - 1 else "├── "
        lines.append(child_prefix + file_connector + f)

    return lines


def collect_files(start_path, ignore_patterns, valid_extensions=None):
    """
    Recursively collect all files (except ignored) from start_path.
    If valid_extensions is provided (non-empty), filter by those extensions.
    Returns a list of full file paths.
    """
    collected = []

    for root, dirs, files in os.walk(start_path):
        # Remove ignored directories from walk
        # (so we don't descend into them at all)
        dirs[:] = [d for d in dirs if not should_ignore(
            os.path.join(root, d), ignore_patterns)]

        for file in files:
            file_path = os.path.join(root, file)

            # Skip ignored files
            if should_ignore(file_path, ignore_patterns):
                continue

            # If the user specified file extensions, check them
            if valid_extensions:
                # e.g. if user typed .js, we check if file ends with .js
                if not any(file.lower().endswith(ext.lower()) for ext in valid_extensions):
                    continue

            collected.append(file_path)

    return collected


def main():
    # Gather user-specified extensions (if any)
    # e.g. python gather_files.py .js .css
    if len(sys.argv) > 1:
        valid_extensions = sys.argv[1:]
    else:
        valid_extensions = None

    ignore_patterns = load_gitignore()

    # 1) Build directory tree lines (skipping ignored paths)
    # We'll do this from the current directory, e.g. "."
    tree_lines = build_directory_tree(
        os.getcwd(), ignore_patterns, prefix="", is_last=True)

    # 2) Collect all files that are not ignored
    #    If valid_extensions is None or empty, we include all
    collected_files = collect_files(
        os.getcwd(), ignore_patterns, valid_extensions)

    # 3) Output everything to "output.txt"
    output_filename = "output.txt"
    with open(output_filename, "w", encoding="utf-8") as out:
        # Write the directory tree
        out.write("DIRECTORY TREE:\n")
        for line in tree_lines:
            out.write(line + "\n")

        out.write("\n========================================\n")
        out.write("FILE CONTENTS:\n")
        out.write("========================================\n\n")

        # For each file, write a header and then the file content
        for f in sorted(collected_files):
            rel_path = os.path.relpath(f, os.getcwd())
            out.write(f"\n===== FILE: {rel_path} =====\n")
            try:
                with open(f, "r", encoding="utf-8", errors="replace") as fh:
                    content = fh.read()
                out.write(content + "\n")
            except Exception as e:
                # If we cannot read the file (binary, permission error, etc.), note it
                out.write(f"[Unable to read file: {e}]\n")

    print(f"Done! Output written to {output_filename}")


if __name__ == "__main__":
    main()


===== FILE: middlewares/auth.js =====
// middlewares/auth.js

// Purchase Access: userRole can be 'purchase' or 'full'
exports.requirePurchaseAccess = (req, res, next) => {
  if (!req.session.userRole) {
    return res.redirect('/enter-pin');
  }
  if (req.session.userRole === 'purchase' || req.session.userRole === 'full') {
    return next();
  }
  // If they have some other role, or none, block
  return res.redirect('/enter-pin');
};

// Full Access: userRole must be 'full'
exports.requireFullAccess = (req, res, next) => {
  if (!req.session.userRole) {
    return res.redirect('/enter-pin');
  }
  if (req.session.userRole === 'full') {
    return next();
  }
  return res.status(403).send('You do not have permission to access this page.');
};



===== FILE: package.json =====
{
  "name": "school_merit_tracker",
  "version": "1.0.0",
  "description": "The School merit tracker to track pupils remaining merits after buying rewards",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tomd1415/school_merit_tracker.git"
  },
  "author": "Tom Duguid",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/tomd1415/school_merit_tracker/issues"
  },
  "homepage": "https://github.com/tomd1415/school_merit_tracker#readme",
  "dependencies": {
    "body-parser": "^1.20.3",
    "csv-parser": "^3.2.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "multer": "^1.4.5-lts.1",
    "pg": "^8.13.3"
  }
}


===== FILE: public/addPrize/addPrize.css =====
/* public/addPrize/addPrize.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

main {
  padding: 20px;
  max-width: 700px;
  margin: 0 auto;
}

section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
  margin-bottom: 30px;
}

h1 {
  margin: 0;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 150px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="text"],
input[type="number"] {
  padding: 8px;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}



===== FILE: public/addPrize/addPrize.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Prize</title>
  <link rel="stylesheet" href="/addPrize/addPrize.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Add a New Prize</h1>
  </header>

  <main>
    <section class="add-prize-section">
      <h2>New Prize Details</h2>
      <form action="/prizes/add" method="POST" id="addPrizeForm">
        <div class="form-group">
          <label for="description">Description:</label>
          <input type="text" id="description" name="description" required />
        </div>

        <div class="form-group">
          <label for="costMerits">Cost (Merits):</label>
          <input type="number" id="costMerits" name="cost_merits" min="0" required />
        </div>

        <div class="form-group">
          <label for="costMoney">Cost (Money):</label>
          <input type="number" id="costMoney" name="cost_money" min="0" required />
        </div>

        <div class="form-group">
          <label for="imagePath">Image Path:</label>
          <input type="text" id="imagePath" name="image_path" required />
        </div>

        <button type="submit">Add Prize</button>
      </form>
    </section>
  </main>

  <script src="/addPrize/addPrize.js"></script>
</body>
</html>



===== FILE: public/addPrize/addPrize.js =====
// public/addPrize/addPrize.js

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('addPrizeForm');
  
  form.addEventListener('submit', (e) => {
    // Perform any front-end checks
    // If invalid, call e.preventDefault()
  });
});



===== FILE: public/addPupil/addPupil.css =====
/* public/addPupil/addPupil.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

main {
  padding: 20px;
  max-width: 700px;
  margin: 0 auto;
}

h1 {
  margin: 0;
}

section {
  margin-bottom: 30px;
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 120px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="text"],
input[type="number"],
select {
  padding: 8px;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#addFormMessage {
  margin-top: 10px;
  color: green; /* or red on error */
}



===== FILE: public/addPupil/addPupil.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Pupil</title>
  <link rel="stylesheet" href="/addPupil/addPupil.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Add a New Pupil</h1>
  </header>

  <main>
    <!-- Section A: Add Pupil Form -->
    <section class="add-pupil-section">
      <h2>New Pupil Details</h2>
      <form action="/pupils/add" method="POST" id="addPupilForm">
        <div class="form-group">
          <label for="firstName">First Name:</label>
          <input type="text" id="firstName" name="first_name" required />
        </div>

        <div class="form-group">
          <label for="lastName">Last Name:</label>
          <input type="text" id="lastName" name="last_name" required />
        </div>

        <div class="form-group">
          <label for="formSelect">Select Form:</label>
          <select id="formSelect" name="form_id" required>
            <option value="">-- Select a Form --</option>
            <!-- Populated by addPupil.js -->
          </select>
        </div>

        <button type="submit">Add Pupil</button>
      </form>
    </section>

    <!-- Section B: Add Form -->
    <section class="add-form-section">
      <h2>Add a New Form</h2>
      <!-- We'll do an AJAX request to /pupils/addForm -->
      <form id="addForm">
        <div class="form-group">
          <label for="newFormName">Form Name:</label>
          <input type="text" id="newFormName" name="form_name" required />
        </div>

        <div class="form-group">
          <label for="newFormTutor">Form Tutor:</label>
          <input type="text" id="newFormTutor" name="form_tutor" required />
        </div>

        <div class="form-group">
          <label for="newYearGroup">Year Group:</label>
          <!-- year_group is an integer 0..14 -->
          <input type="number" id="newYearGroup" name="year_group" min="0" max="14" required />
        </div>

        <button type="submit">Create Form</button>
      </form>
      <p id="addFormMessage"></p>
    </section>
  </main>

  <script src="/addPupil/addPupil.js"></script>
</body>
</html>



===== FILE: public/addPupil/addPupil.js =====
// public/addPupil/addPupil.js

document.addEventListener('DOMContentLoaded', () => {
  const formSelect = document.getElementById('formSelect');
  const addForm = document.getElementById('addForm');
  const addFormMessage = document.getElementById('addFormMessage');

  // 1) Load existing active forms
  async function loadForms() {
    try {
      const response = await fetch('/pupils/getForms');
      if (!response.ok) throw new Error('Failed to fetch forms');
      const forms = await response.json();

      // Clear the <select> (keep placeholder)
      formSelect.innerHTML = '<option value="">-- Select a Form --</option>';

      // Populate with each form
      forms.forEach((f) => {
        const option = document.createElement('option');
        option.value = f.form_id;
        // You could display more info if you want (form_name + year_group, for example)
        option.textContent = `${f.form_name} (Tutor: ${f.form_tutor}, Year: ${f.year_group})`;
        formSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error loading forms:', error);
    }
  }

  // Load forms on page load
  loadForms();

  // 2) Handle "Add Form" submission (AJAX)
  addForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Collect inputs
    const newFormName = document.getElementById('newFormName').value.trim();
    const newFormTutor = document.getElementById('newFormTutor').value.trim();
    const newYearGroup = document.getElementById('newYearGroup').value.trim();

    if (!newFormName || !newFormTutor || !newYearGroup) return;

    try {
      const response = await fetch('/pupils/addForm', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          form_name: newFormName,
          form_tutor: newFormTutor,
          year_group: newYearGroup
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create form');
      }

      // Clear the fields, show success
      document.getElementById('newFormName').value = '';
      document.getElementById('newFormTutor').value = '';
      document.getElementById('newYearGroup').value = '';
      addFormMessage.style.color = 'green';
      addFormMessage.textContent = 'Form created successfully!';

      // Refresh the dropdown
      await loadForms();
    } catch (err) {
      console.error('Error adding form:', err);
      addFormMessage.style.color = 'red';
      addFormMessage.textContent = 'Error adding form.';
    }
  });
});



===== FILE: public/enterPin/enterPin.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Enter PIN</title>
</head>
<body>
  <h1>Please Enter PIN</h1>
  <form action="/check-pin" method="POST">
    <input type="password" name="pin" required />
    <button type="submit">Submit PIN</button>
  </form>
</body>
</html>



===== FILE: public/index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Merit Tracker</title>
    <!-- <link rel="stylesheet" href="/styles/index.css"> -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #ffffff;
            text-align: center;
            margin: 0;
        }
        header {
            background-color: #003a69;
            color: #ffffff;
            padding: 20px;
            font-size: 24px;
        }
        .menu {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            padding: 20px;
        }
        .menu-item {
            background-color: #005a98;
            color: white;
            padding: 15px 30px;
            margin: 10px;
            border-radius: 8px;
            text-decoration: none;
            font-size: 18px;
            transition: background 0.3s;
        }
        .menu-item:hover {
            background-color: #007acc;
        }
    </style>
    <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
</head>
<body>
    <header>School Merit Tracker</header>
    <div class="menu">
        <a href="/pupils" class="menu-item">Manage Pupils</a>
        <a href="/prizes" class="menu-item">Manage Prizes</a>
        <a href="/purchase" class="menu-item">Purchase Prizes</a>
        <a href="/upload/csv/pupils" class="menu-item">Upload Pupils CSV</a>
        <a href="/upload/csv/merits" class="menu-item">Upload Merits CSV</a>
        <a href="/prizes/add" class="menu-item">Add New Prize</a>
        <a href="/pupils/add" class="menu-item">Add New Pupil</a>
    </div>
</body>
</html>



===== FILE: public/pinLogin/pinLogin.css =====
body {
  font-family: Arial, sans-serif;
  background-color: #fff;
  text-align: center;
  margin: 0;
  padding: 0;
}

h1 {
  margin-top: 20px;
}

.pin-container {
  display: inline-block;
  margin-top: 30px;
}

#pinDisplay {
  width: 150px;          /* Enough width for ~6 dots */
  height: 50px;          /* Fixed height */
  border: 2px solid #333;
  border-radius: 6px;    /* optional rounded corners */
  margin: 0 auto 20px;   /* 20px bottom margin, center horizontally */
  text-align: center;
  line-height: 50px;     /* Vertically center the dots */
  font-size: 2rem;       /* Make dots bigger */
}


.keypad {
  display: grid;
  grid-template-columns: repeat(3, 60px);
  grid-gap: 10px;
  justify-content: center;
}

.keypad button {
  font-size: 1.2rem;
  padding: 10px;
  cursor: pointer;
}

#submitPinBtn {
  grid-column: span 3; /* let the OK button span full width */
}



===== FILE: public/pinLogin/pinLogin.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Enter PIN</title>
  <link rel="stylesheet" href="/pinLogin/pinLogin.css">
</head>
<body>
  <h1>Enter PIN</h1>
  <div class="pin-container">
    <div id="pinDisplay"></div> <!-- placeholder for typed digits -->

    <div class="keypad">
      <!-- Each button calls a JavaScript function to add a digit or delete -->
      <button class="digit-btn" data-digit="1">1</button>
      <button class="digit-btn" data-digit="2">2</button>
      <button class="digit-btn" data-digit="3">3</button>
      <button class="digit-btn" data-digit="4">4</button>
      <button class="digit-btn" data-digit="5">5</button>
      <button class="digit-btn" data-digit="6">6</button>
      <button class="digit-btn" data-digit="7">7</button>
      <button class="digit-btn" data-digit="8">8</button>
      <button class="digit-btn" data-digit="9">9</button>
      <button class="digit-btn" data-digit="0">0</button>
      <button id="backspaceBtn">Del</button>
      <button id="submitPinBtn">OK</button>
    </div>
  </div>

  <!-- Hidden form that gets submitted with the final PIN -->
  <form id="pinForm" action="/check-pin" method="POST" style="display: none;">
    <input type="hidden" id="pinInput" name="pin" value="">
  </form>

  <script src="/pinLogin/pinLogin.js"></script>
</body>
</html>



===== FILE: public/pinLogin/pinLogin.js =====
// public/pinLogin/pinLogin.js
document.addEventListener('DOMContentLoaded', () => {
  const pinDisplay = document.getElementById('pinDisplay');
  const pinInput = document.getElementById('pinInput');
  const pinForm = document.getElementById('pinForm');

  let enteredDigits = [];

  // Update the display to show number of entered digits or placeholders
  function updateDisplay() {
      // Create a string of as many '•' as the number of digits
  pinDisplay.textContent = '•'.repeat(enteredDigits.length);
  }

  function addDigit(digit) {
    if (enteredDigits.length < 6) {
      enteredDigits.push(digit);
      updateDisplay();
    }
  }

  function removeDigit() {
    enteredDigits.pop();
    updateDisplay();
  }

  // Listen for digit button clicks
  document.querySelectorAll('.digit-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const digit = btn.getAttribute('data-digit');
      addDigit(digit);
    });
  });

  // Backspace (Del) button
  document.getElementById('backspaceBtn').addEventListener('click', removeDigit);

  // Submit (OK) button
  document.getElementById('submitPinBtn').addEventListener('click', () => {
    // If we have 6 digits, submit
    if (enteredDigits.length === 6) {
      pinInput.value = enteredDigits.join('');
      pinForm.submit();
    } else {
      alert('Please enter 6 digits before submitting.');
    }
  });
});



===== FILE: public/prizes/editPrize.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Edit Prize</title>
  <link rel="stylesheet" href="/prizes/prizes.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Edit Prize</h1>
  </header>

  <main>
    <form id="editPrizeForm" method="POST">
      <div class="form-group">
        <label for="description">Description:</label>
        <input type="text" id="description" name="description" required />
      </div>
      <div class="form-group">
        <label for="cost_merits">Cost (Merits):</label>
        <input type="number" id="cost_merits" name="cost_merits" min="0" required />
      </div>
      <div class="form-group">
        <label for="cost_money">Cost (Money):</label>
        <input type="number" id="cost_money" name="cost_money" min="0" required />
      </div>
      <div class="form-group">
        <label for="image_path">Image Path:</label>
        <input type="text" id="image_path" name="image_path" required />
      </div>
      <div class="form-group">
        <label for="active">Active:</label>
        <select id="active" name="active">
          <option value="true">True</option>
          <option value="false">False</option>
        </select>
      </div>
      <button type="submit">Update Prize</button>
    </form>
  </main>

  <script>
    // Inline JS or reference an editPrize.js file
    document.addEventListener('DOMContentLoaded', async () => {
      const form = document.getElementById('editPrizeForm');
      // Parse the URL to get the prize_id from /prizes/edit/:id
      const pathParts = window.location.pathname.split('/');
      const prizeId = pathParts[pathParts.length - 1];

      // 1) Fetch existing prize data
      try {
        const res = await fetch(`/prizes/${prizeId}/json`);
        if (!res.ok) throw new Error('Failed to load prize');
        const prize = await res.json();

        document.getElementById('description').value = prize.description;
        document.getElementById('cost_merits').value = prize.cost_merits;
        document.getElementById('cost_money').value = prize.cost_money;
        document.getElementById('image_path').value = prize.image_path;
        document.getElementById('active').value = prize.active ? 'true' : 'false';

        // 2) Set form action to /prizes/edit/:id
        form.action = `/prizes/edit/${prizeId}`;
      } catch (err) {
        console.error('Error loading prize:', err);
      }
    });
  </script>
</body>
</html>



===== FILE: public/prizes/prizes.css =====
/* public/prizes/prizes.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

/* Header with dark blue background */
header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
}

.button-bar {
  margin-bottom: 10px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
}

button:hover {
  background-color: #005a98;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

table thead {
  background-color: #f2f2f2;
}

table th, table td {
  text-align: left;
  padding: 8px;
  border: 1px solid #cccccc;
}

table td button {
  margin-right: 8px;
}

/* Modal styles */
.modal {
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto;
  padding: 20px;
  width: 400px;
  position: relative;
  border-radius: 8px;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 24px;
  cursor: pointer;
}

===== FILE: public/prizes/prizes.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Prize Management</title>
  <link rel="stylesheet" href="prizes.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Prize Management</h1>
  </header>

  <main>
    <div class="button-bar">
      <button id="addPrizeBtn">Add New Prize</button>
    </div>

    <table id="prizeTable">
      <thead>
        <tr>
          <th>Prize ID</th>
          <th>Description</th>
          <th>Merit Cost</th>
          <th>Money Cost</th>
          <th>Image</th>
          <th>Active</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Dynamically inserted by prizes.js -->
      </tbody>
    </table>
  </main>

  <!-- Add Prize Modal -->
  <div id="addPrizeModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddPrizeModal">&times;</span>
      <h2>Add New Prize</h2>
      <form id="addPrizeForm" enctype="multipart/form-data">
        <div>
          <label>Description:</label>
          <input type="text" id="addPrizeDescription" required />
        </div>
        <div>
          <label>Merit Cost:</label>
          <input type="number" id="addPrizeCostMerits" min="0" required />
        </div>
        <div>
          <label>Money Cost:</label>
          <input type="number" id="addPrizeCostMoney" min="0" required />
        </div>
        <div>
          <label>Image:</label>
          <input type="file" id="addPrizeImage" accept="image/*" required />
        </div>
        <div id="addPrizeFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Prize</button>
          <button type="button" id="cancelAddPrizeBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Prize Modal -->
  <div id="editPrizeModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeEditPrizeModal">&times;</span>
      <h2>Edit Prize</h2>
      <form id="editPrizeForm" enctype="multipart/form-data">
        <input type="hidden" id="editPrizeId" />
        <div>
          <label>Description:</label>
          <input type="text" id="editPrizeDescription" required />
        </div>
        <div>
          <label>Merit Cost:</label>
          <input type="number" id="editPrizeCostMerits" min="0" required />
        </div>
        <div>
          <label>Money Cost:</label>
          <input type="number" id="editPrizeCostMoney" min="0" required />
        </div>
        <div>
          <label>Current Image:</label>
          <div id="currentPrizeImage"></div>
        </div>
        <div>
          <label>New Image (optional):</label>
          <input type="file" id="editPrizeImage" accept="image/*" />
        </div>
        <div id="editPrizeFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Save Changes</button>
          <button type="button" id="cancelEditPrizeBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="prizes.js"></script>
</body>
</html>



===== FILE: public/prizes/prizes.js =====
// public/prizes/prizes.js

window.addEventListener('DOMContentLoaded', async () => {
  loadPrizes();

  // Open Add Prize Modal
  document.getElementById('addPrizeBtn').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'block';
  });

  // Close Add Prize Modal
  document.getElementById('closeAddPrizeModal').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'none';
  });
  document.getElementById('cancelAddPrizeBtn').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'none';
  });

  // Add Prize Form Submission
  document.getElementById('addPrizeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const feedback = document.getElementById('addPrizeFeedback');
    feedback.textContent = '';

    const description = document.getElementById('addPrizeDescription').value.trim();
    const cost_merits = document.getElementById('addPrizeCostMerits').value;
    const cost_money = document.getElementById('addPrizeCostMoney').value;
    const imageFile = document.getElementById('addPrizeImage').files[0];

    if (!description || cost_merits === '' || cost_money === '' || !imageFile) {
      feedback.textContent = 'Please provide all required inputs.';
      return;
    }

    const formData = new FormData();
    formData.append('description', description);
    formData.append('cost_merits', cost_merits);
    formData.append('cost_money', cost_money);
    formData.append('image', imageFile);

    try {
      const response = await fetch('/prizes/add', {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        // Reload prizes list and close modal
        await loadPrizes();
        document.getElementById('addPrizeModal').style.display = 'none';
      } else {
        const result = await response.json();
        feedback.textContent = result.error || 'Error adding prize';
      }
    } catch (error) {
      console.error('Error adding prize:', error);
      feedback.textContent = 'Error adding prize';
    }
  });

  // Delegate click events for Edit buttons in the table
  document.querySelector('#prizeTable tbody').addEventListener('click', async (e) => {
    if (e.target.matches('button.edit-btn')) {
      const prizeId = e.target.getAttribute('data-id');
      openEditPrizeModal(prizeId);
    }
    if (e.target.matches('button.delete-btn')) {
      const prizeId = e.target.getAttribute('data-id');
      if (confirm('Are you sure you want to delete this prize?')) {
        await deletePrize(prizeId);
        await loadPrizes();
      }
    }
  });

  // Close Edit Prize Modal
  document.getElementById('closeEditPrizeModal').addEventListener('click', () => {
    document.getElementById('editPrizeModal').style.display = 'none';
  });
  document.getElementById('cancelEditPrizeBtn').addEventListener('click', () => {
    document.getElementById('editPrizeModal').style.display = 'none';
  });

  // Edit Prize Form Submission
  document.getElementById('editPrizeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const feedback = document.getElementById('editPrizeFeedback');
    feedback.textContent = '';

    const prizeId = document.getElementById('editPrizeId').value;
    const description = document.getElementById('editPrizeDescription').value.trim();
    const cost_merits = document.getElementById('editPrizeCostMerits').value;
    const cost_money = document.getElementById('editPrizeCostMoney').value;
    const imageFile = document.getElementById('editPrizeImage').files[0];

    const formData = new FormData();
    formData.append('description', description);
    formData.append('cost_merits', cost_merits);
    formData.append('cost_money', cost_money);
    // Append new image if provided
    if (imageFile) { 
      formData.append('image', imageFile);
    }
    
    try {
      const response = await fetch(`/prizes/edit/${prizeId}`, {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        await loadPrizes();
        document.getElementById('editPrizeModal').style.display = 'none';
      } else {
        const result = await response.json();
        feedback.textContent = result.error || 'Error updating prize';
      }
    } catch (error) {
      console.error('Error editing prize:', error);
      feedback.textContent = 'Error editing prize';
    }
  });
});

// Function to load prizes and populate the table
async function loadPrizes() {
  try {
    const response = await fetch('/prizes/all/json');
    if (!response.ok) throw new Error('Network error');
    const prizes = await response.json();
    const tbody = document.querySelector('#prizeTable tbody');
    tbody.innerHTML = '';

    prizes.forEach(prize => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${prize.prize_id}</td>
        <td>${prize.description}</td>
        <td>${prize.cost_merits}</td>
        <td>${prize.cost_money}</td>
        <td><img src="${prize.image_path}" alt="Prize Image" style="width:50px;height:auto;"></td>
        <td>${prize.active}</td>
        <td>
          <button class="edit-btn" data-id="${prize.prize_id}">Edit</button>
          <button class="delete-btn" data-id="${prize.prize_id}">Delete</button>
        </td>
      `;
      tbody.appendChild(row);
    });
  } catch (error) {
    console.error('Error loading prizes:', error);
  }
}

// Function to open the Edit Prize modal and load prize details
async function openEditPrizeModal(prizeId) {
  try {
    const res = await fetch(`/prizes/${prizeId}/json`);
    if (!res.ok) throw new Error('Failed to fetch prize details');
    const prize = await res.json();

    document.getElementById('editPrizeId').value = prize.prize_id;
    document.getElementById('editPrizeDescription').value = prize.description;
    document.getElementById('editPrizeCostMerits').value = prize.cost_merits;
    document.getElementById('editPrizeCostMoney').value = prize.cost_money;
    document.getElementById('currentPrizeImage').innerHTML =
      `<img src="${prize.image_path}" alt="Current Prize Image" style="width:100px;height:auto;">`;

    document.getElementById('editPrizeModal').style.display = 'block';
  } catch (error) {
    console.error('Error fetching prize for editing:', error);
  }
}

// Function to delete prize
async function deletePrize(prizeId) {
  try {
    await fetch(`/prizes/delete/${prizeId}`, { method: 'GET' });
  } catch (error) {
    console.error('Error deleting prize:', error);
  }
}



===== FILE: public/pupils/pupils.css =====
/* public/pupils/pupils.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

/* Header styling with dark blue background */
header {
  display: flex;
  align-items: center;
  background-color: #003a69; /* Deep blue from school site */
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

/* Main content area */
main {
  padding: 20px;
}

/* Button styling */
.button-bar {
  margin-bottom: 10px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
}

button:hover {
  background-color: #005a98;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

table thead {
  background-color: #f2f2f2;
}

table th,
table td {
  text-align: left;
  padding: 8px;
  border: 1px solid #cccccc;
}

table td button {
  margin-right: 8px;
}
/* Modal styles */
.modal {
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto; 
  padding: 20px;
  width: 400px;
  position: relative;
  border-radius: 8px;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 24px;
  cursor: pointer;
}

/* Inline edit style: highlight editable cells */
td.editable {
  background-color: #fffae6; /* light yellow to highlight editable area */
}



===== FILE: public/pupils/pupils.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pupil Management</title>
  <link rel="stylesheet" href="pupils.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Pupil Management</h1>
  </header>
  
  <main>
    <div class="button-bar">
      <!-- NEW: Add Pupil button that opens the "Add Pupil" modal -->
      <button id="addPupilBtn">Add Pupil</button>
      <!-- NEW: Add Form button that opens the "Add Form" modal -->
      <button id="addFormBtn">Add Form</button>

      <label for="formFilter">Filter by Form:</label>
      <select id="formFilter">
        <option value="">All</option>
      </select>
      
      <label for="inlineEditToggle">Allow Inline Edit:</label>
      <input type="checkbox" id="inlineEditToggle" />
    </div>
    
    <table id="pupilTable">
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Form Group</th>
          <th>Merits</th>
          <th>Remaining Merits</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody><!-- Pupils inserted dynamically --></tbody>
    </table>
  </main>
  
  <!-- Existing Edit Modal (unchanged) -->
  <div id="editModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn">&times;</span>
      <h2>Edit Pupil</h2>
      <form id="editPupilForm">
        <input type="hidden" id="editPupilId" />
        <div>
          <label>First Name:</label>
          <input type="text" id="editFirstName" required />
        </div>
        <div>
          <label>Last Name:</label>
          <input type="text" id="editLastName" required />
        </div>
        <div>
          <label>Form:</label>
          <select id="editFormSelect" required></select>
        </div>
        <div>
          <label>Merits:</label>
          <input type="number" id="editMerits" min="0" required />
        </div>
        <div id="editModalFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Save</button>
          <button type="button" id="cancelEditBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- NEW: Add Pupil Modal -->
  <div id="addPupilModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddPupilModal">&times;</span>
      <h2>Add New Pupil</h2>
      <form id="addPupilForm">
        <div>
          <label>First Name:</label>
          <input type="text" id="addPupilFirstName" required />
        </div>
        <div>
          <label>Last Name:</label>
          <input type="text" id="addPupilLastName" required />
        </div>
        <div>
          <label>Form:</label>
          <select id="addPupilFormSelect" required>
            <!-- Populated by JavaScript from formsData -->
          </select>
        </div>
        <div id="addPupilFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Pupil</button>
          <button type="button" id="cancelAddPupilBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- NEW: Add Form Modal -->
  <div id="addFormModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddFormModal">&times;</span>
      <h2>Add New Form</h2>
      <form id="addFormForm">
        <div>
          <label>Form Name:</label>
          <input type="text" id="addFormName" required />
        </div>
        <div>
          <label>Form Tutor:</label>
          <input type="text" id="addFormTutor" />
        </div>
        <div>
          <label>Year Group:</label>
          <input type="text" id="addFormYearGroup" />
        </div>
        <div id="addFormFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Form</button>
          <button type="button" id="cancelAddFormBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="pupils.js"></script>
</body>
</html>



===== FILE: public/pupils/pupils.js =====
// public/pupils/pupils.js

// Global references
let inlineEditEnabled = false;
let formsData = []; // to store forms for editing

window.addEventListener('DOMContentLoaded', async () => {
  // 1. Load forms for filter dropdown + edit form select
  await loadForms();

  // 2. Add event listener to the filter dropdown
  document.getElementById('formFilter').addEventListener('change', filterPupils);

  // 3. Inline Edit Toggle
  document.getElementById('inlineEditToggle').addEventListener('change', (e) => {
    inlineEditEnabled = e.target.checked;
    toggleInlineEdit(inlineEditEnabled);
  });

  // 4. Load all pupils (no form filter initially)
  await filterPupils();

  // Setup modal close/cancel
  const modal = document.getElementById('editModal');
  const closeBtn = modal.querySelector('.close-btn');
  const cancelEditBtn = document.getElementById('cancelEditBtn');

  closeBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  cancelEditBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  // Handle form submission in modal
  const editForm = document.getElementById('editPupilForm');
  editForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    await submitEditForm();
  });
});

// Load forms into filter dropdown + edit modal select
async function loadForms() {
  try {
    const res = await fetch('/pupils/getForms');
    if (!res.ok) throw new Error('Could not load forms');

    formsData = await res.json();

    // Populate the filter dropdown
    const filterSelect = document.getElementById('formFilter');
    // Clear existing options except the first "All"
    while (filterSelect.options.length > 1) {
      filterSelect.remove(1);
    }

    formsData.forEach((frm) => {
      const option = document.createElement('option');
      option.value = frm.form_id;
      option.text = frm.form_name;
      filterSelect.appendChild(option);
    });
  } catch (err) {
    console.error(err);
  }
}

// Filter pupils by selected form
async function filterPupils() {
  const formFilterValue = document.getElementById('formFilter').value;
  await loadPupils(formFilterValue);
}

// Load pupils (with optional form_id)
async function loadPupils(form_id = '') {
  try {
    let url = '/pupils/all/json';
    if (form_id) {
      url += `?form_id=${form_id}`;
    }

    const response = await fetch(url);
    if (!response.ok) throw new Error('Network response was not ok');

    const pupils = await response.json();
    const tbody = document.querySelector('#pupilTable tbody');
    tbody.innerHTML = ''; // clear old rows

    pupils.forEach((pupil) => {
      const row = document.createElement('tr');
      
      // Store pupil_id in a data attribute (no longer as a visible column)
      row.setAttribute('data-pupil-id', pupil.pupil_id);

      // Build the row cells
      row.innerHTML = `
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="first_name">${pupil.first_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="last_name">${pupil.last_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="form_name" data-formid="${pupil.form_id}">${pupil.form_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="merits">${pupil.merits}</td>
        <!-- NEW: remaining_merits column (always read-only, no "editable" class) -->
        <td class="remaining_merits">
          ${pupil.remaining_merits != null ? pupil.remaining_merits : 'N/A'}
        </td>
        <td>
          <button onclick="openEditModal(${pupil.pupil_id})">Edit</button>
          <button onclick="confirmDeletePupil(${pupil.pupil_id})">Delete</button>
        </td>
      `;

      tbody.appendChild(row);
    });

    // If inline editing is on, apply it to the newly created rows
    if (inlineEditEnabled) {
      enableInlineEditing();
    }
  } catch (error) {
    console.error('Error loading pupils:', error);
  }
}

// Enable inline editing for relevant cells
function enableInlineEditing() {
  const editableCells = document.querySelectorAll('td.editable');
  editableCells.forEach(cell => {
    cell.contentEditable = 'true';
    cell.addEventListener('blur', handleInlineEditBlur);
  });
}

// Toggle inline editing on/off
function toggleInlineEdit(enabled) {
  const editableCells = document.querySelectorAll('td[data-field]');
  if (enabled) {
    editableCells.forEach(cell => {
      cell.classList.add('editable');
      cell.contentEditable = 'true';
      cell.addEventListener('blur', handleInlineEditBlur);
    });
  } else {
    editableCells.forEach(cell => {
      cell.classList.remove('editable');
      cell.contentEditable = 'false';
      cell.removeEventListener('blur', handleInlineEditBlur);
    });
  }
}

// Handle blur event in inline editing
// Modify handleInlineEditBlur to get pupil_id from row.dataset
async function handleInlineEditBlur(e) {
  const cell = e.target;
  const newValue = cell.textContent.trim();
  const field = cell.getAttribute('data-field');

  // Retrieve the row and pupil_id from the data attribute
  const row = cell.closest('tr');
  const pupil_id = row.dataset.pupilId;

  // Basic validation for 'merits'
  if (field === 'merits' && isNaN(newValue)) {
    alert('Merits must be a valid number');
    // revert changes by reloading
    await loadPupils(document.getElementById('formFilter').value);
    return;
  }

  // If field is 'form_name', match it to a form_id
  let form_id = null;
  if (field === 'form_name') {
    const match = formsData.find(f => f.form_name === newValue);
    if (!match) {
      alert('Unknown form name. Please use the modal for a bigger edit or select from known forms.');
      await loadPupils(document.getElementById('formFilter').value);
      return;
    }
    form_id = match.form_id;
  }

  // Gather current row data from other cells
  // Notice the changed cell indexes:
  //  0 -> first_name
  //  1 -> last_name
  //  2 -> form_name
  //  3 -> merits
  //  4 -> remaining_merits (NOT editable)
  //
  // So for reading, you can query them by data-field:
  function getFieldValue(fieldName) {
    const td = row.querySelector(`td[data-field="${fieldName}"]`);
    return td ? td.textContent.trim() : '';
  }

  const first_name = getFieldValue('first_name');
  const last_name = getFieldValue('last_name');
  const currentFormId = row.querySelector('td[data-field="form_name"]')?.getAttribute('data-formid') || '';
  const merits = getFieldValue('merits');

  const updatedData = {
    first_name: (field === 'first_name') ? newValue : first_name,
    last_name: (field === 'last_name') ? newValue : last_name,
    form_id: form_id || currentFormId,
    merits: (field === 'merits') ? newValue : merits
  };

  await updatePupil(pupil_id, updatedData);
}

// POST the update to /pupils/edit/:id
async function updatePupil(pupil_id, data) {
  try {
    const response = await fetch(`/pupils/edit/${pupil_id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();

    if (!response.ok) {
      alert(result.error || 'Error updating pupil');
    } else {
      // Reload table data to show changes
      await loadPupils(document.getElementById('formFilter').value);
    }
  } catch (err) {
    console.error('Update Pupil Error:', err);
  }
}

// Open the edit modal with existing data
async function openEditModal(pupil_id) {
  try {
    // Fetch single pupil data
    const res = await fetch(`/pupils/${pupil_id}/json`);
    if (!res.ok) throw new Error('Unable to fetch pupil details');

    const pupil = await res.json();

    // Populate form fields
    document.getElementById('editPupilId').value = pupil.pupil_id;
    document.getElementById('editFirstName').value = pupil.first_name;
    document.getElementById('editLastName').value = pupil.last_name;
    document.getElementById('editMerits').value = pupil.merits;

    // Populate form select
    const editFormSelect = document.getElementById('editFormSelect');
    editFormSelect.innerHTML = '';
    formsData.forEach(f => {
      const option = document.createElement('option');
      option.value = f.form_id;
      option.textContent = f.form_name;
      if (f.form_id === pupil.form_id) {
        option.selected = true;
      }
      editFormSelect.appendChild(option);
    });

    // Show the modal
    document.getElementById('editModal').style.display = 'block';
  } catch (err) {
    console.error(err);
  }
}

// Submit the edit form in modal
async function submitEditForm() {
  const modalFeedback = document.getElementById('editModalFeedback');
  modalFeedback.textContent = '';

  const pupil_id = document.getElementById('editPupilId').value;
  const first_name = document.getElementById('editFirstName').value.trim();
  const last_name = document.getElementById('editLastName').value.trim();
  const form_id = document.getElementById('editFormSelect').value;
  const meritsVal = document.getElementById('editMerits').value;
  const merits = parseInt(meritsVal, 10);

  // Front-end validation
  if (!first_name || !last_name || !form_id || isNaN(merits) || merits < 0) {
    modalFeedback.style.color = 'red';
    modalFeedback.textContent = 'Please provide valid inputs.';
    return;
  }

  const data = { first_name, last_name, form_id, merits };

  try {
    const response = await fetch(`/pupils/edit/${pupil_id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();

    if (!response.ok) {
      modalFeedback.style.color = 'red';
      modalFeedback.textContent = result.error || 'Error updating pupil.';
    } else {
      modalFeedback.style.color = 'green';
      modalFeedback.textContent = 'Pupil updated successfully.';
      // Close modal after a short delay
      setTimeout(() => {
        document.getElementById('editModal').style.display = 'none';
        loadPupils(document.getElementById('formFilter').value);
      }, 800);
    }
  } catch (err) {
    console.error('submitEditForm error:', err);
    modalFeedback.style.color = 'red';
    modalFeedback.textContent = 'An error occurred.';
  }
}

// Confirm delete pupil
function confirmDeletePupil(pupil_id) {
  if (confirm('Are you sure you want to delete this pupil?')) {
    deletePupil(pupil_id);
  }
}

// Delete pupil (set active = false)
async function deletePupil(pupil_id) {
  try {
    const res = await fetch(`/pupils/delete/${pupil_id}`);
    if (!res.ok) {
      const errData = await res.json();
      alert(errData.error || 'Failed to delete pupil.');
      return;
    }
    // Successfully "deleted"
    await loadPupils(document.getElementById('formFilter').value);
  } catch (err) {
    console.error('Error deleting pupil:', err);
  }
}

// 1. REFS to the new add modals and buttons
const addPupilBtn = document.getElementById('addPupilBtn');
const addPupilModal = document.getElementById('addPupilModal');
const closeAddPupilModal = document.getElementById('closeAddPupilModal');
const cancelAddPupilBtn = document.getElementById('cancelAddPupilBtn');
const addPupilForm = document.getElementById('addPupilForm');

const addFormBtn = document.getElementById('addFormBtn');
const addFormModal = document.getElementById('addFormModal');
const closeAddFormModal = document.getElementById('closeAddFormModal');
const cancelAddFormBtn = document.getElementById('cancelAddFormBtn');
const addFormFormEl = document.getElementById('addFormForm');

// 2. EVENT LISTENERS to open / close modals
addPupilBtn.addEventListener('click', () => {
  // Before showing the "Add Pupil" modal, populate the "Form" dropdown
  populateAddPupilFormSelect();
  addPupilModal.style.display = 'block';
});

closeAddPupilModal.addEventListener('click', () => {
  addPupilModal.style.display = 'none';
});
cancelAddPupilBtn.addEventListener('click', () => {
  addPupilModal.style.display = 'none';
});

// For Add Form
addFormBtn.addEventListener('click', () => {
  addFormModal.style.display = 'block';
});
closeAddFormModal.addEventListener('click', () => {
  addFormModal.style.display = 'none';
});
cancelAddFormBtn.addEventListener('click', () => {
  addFormModal.style.display = 'none';
});

// 3. SUBMIT Add Pupil form
addPupilForm.addEventListener('submit', async (event) => {
  event.preventDefault();
  const feedbackEl = document.getElementById('addPupilFeedback');
  feedbackEl.textContent = '';

  const first_name = document.getElementById('addPupilFirstName').value.trim();
  const last_name = document.getElementById('addPupilLastName').value.trim();
  const form_id = document.getElementById('addPupilFormSelect').value;

  if (!first_name || !last_name || !form_id) {
    feedbackEl.textContent = 'Please fill out all required fields.';
    return;
  }

  // Send POST request to /pupils/add
  try {
    const res = await fetch('/pupils/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ first_name, last_name, form_id })
    });
    const data = await res.json();
    if (!res.ok) {
      feedbackEl.textContent = data.error || 'Failed to add pupil.';
    } else {
      feedbackEl.style.color = 'green';
      feedbackEl.textContent = 'Pupil added successfully!';
      // Close modal after a short delay
      setTimeout(() => {
        addPupilModal.style.display = 'none';
        // Reload pupils to show the new entry
        loadPupils(document.getElementById('formFilter').value);
      }, 800);
    }
  } catch (err) {
    console.error(err);
    feedbackEl.textContent = 'An error occurred.';
  }
});

// 4. SUBMIT Add Form form
addFormFormEl.addEventListener('submit', async (event) => {
  event.preventDefault();
  const feedbackEl = document.getElementById('addFormFeedback');
  feedbackEl.textContent = '';

  const form_name = document.getElementById('addFormName').value.trim();
  const form_tutor = document.getElementById('addFormTutor').value.trim();
  const year_group = document.getElementById('addFormYearGroup').value.trim();

  if (!form_name) {
    feedbackEl.textContent = 'Form name is required.';
    return;
  }

  // Send POST request to /pupils/addForm
  try {
    const res = await fetch('/pupils/addForm', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ form_name, form_tutor, year_group })
    });
    const data = await res.json();
    if (!res.ok) {
      feedbackEl.textContent = data.error || 'Failed to add form.';
    } else {
      feedbackEl.style.color = 'green';
      feedbackEl.textContent = 'Form added successfully!';
      // Close modal after a short delay
      setTimeout(async () => {
        addFormModal.style.display = 'none';
        // Reload forms so new form appears in dropdowns
        await loadForms();
      }, 800);
    }
  } catch (err) {
    console.error(err);
    feedbackEl.textContent = 'An error occurred.';
  }
});

// 5. POPULATE the "Add Pupil" form's dropdown with the existing forms
function populateAddPupilFormSelect() {
  const select = document.getElementById('addPupilFormSelect');
  select.innerHTML = '';
  // formsData is loaded by loadForms() on page load
  formsData.forEach(f => {
    const option = document.createElement('option');
    option.value = f.form_id;
    option.textContent = f.form_name;
    select.appendChild(option);
  });
}



===== FILE: public/purchase/purchase.css =====
/* public/purchase/purchase.css */

/* RESET / BASE STYLES */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  background-color: #ffffff;
  color: #333;
}

/* HEADER */
header {
  display: flex;
  align-items: center;
  background-color: #003a69; /* School's dark blue */
  color: #ffffff;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* subtle modern shadow */
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

header h1 {
  font-size: 1.6rem;
  margin: 0;
}

/* MAIN CONTENT */
main {
  padding: 20px;
}

.page-subtitle {
  margin-bottom: 15px;
  font-size: 1.2rem;
}

/* PRIZE CONTAINER + CARDS */
#prizeContainer {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: flex-start;
}

/* Example card style for each prize */
.prize-card {
  width: 160px;
  background-color: #fafafa;
  border: 1px solid #ddd;
  border-radius: 6px;
  cursor: pointer;
  text-align: center;
  padding: 10px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.prize-card:hover {
  transform: scale(1.03);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

.prize-card img {
  width: 100%;
  height: auto;
  border-radius: 4px;
}

.prize-card h3 {
  margin: 10px 0 5px 0;
  font-size: 1rem;
  color: #333;
}

.prize-card p {
  margin: 5px 0;
  font-size: 0.9rem;
  color: #555;
}

/* MODAL OVERLAY */
.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5); /* darker overlay for clarity */
  /* You can optionally add a fade-in transition if you switch display via a class: 
     transition: opacity 0.3s ease; 
     opacity: 0; 
     &.active { display: block; opacity: 1; } 
     (But that also requires JS changes.) */
}

/* MODAL CONTENT */
.modal-content {
  background-color: #ffffff;
  margin: 70px auto;
  padding: 20px;
  width: 90%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-content h2 {
  margin-top: 0;
  font-size: 1.3rem;
}

/* CLOSE BUTTON */
.close {
  position: absolute;
  top: 15px;
  right: 15px;
  font-size: 1.5rem;
  cursor: pointer;
  color: #555;
}

/* PUPIL SEARCH / RESULTS */
#pupilSearch {
  width: 100%;
  padding: 10px;
  margin: 10px 0 15px 0;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 6px;
}

#searchResults div,
#recentPupils div {
  padding: 8px;
  border: 1px solid #ccc;
  margin-bottom: 6px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.95rem;
}

#searchResults div:hover,
#recentPupils div:hover {
  background-color: #f0f0f0;
}

/* HEADINGS INSIDE THE MODAL */
#searchResults h3,
#recentPupils h3 {
  margin-top: 20px;
  margin-bottom: 10px;
  font-size: 1.1rem;
}
/* Optional: Adjust confirmation modal styles specifically */
#confirmationModal .modal-content {
  /* For example, different background color */
  /* background-color: #eef; */
}
/* 
  purchase.css 
  (Below the existing .modal, .modal-content, etc.)
*/

/* Make the confirmation modal's heading and message stand out */
#confirmationModal .modal-content h2 {
  margin-top: 0;
  font-size: 1.4rem;
  margin-bottom: 10px;
}

#confirmationModal .modal-content p {
  line-height: 1.4;
  margin-bottom: 20px;
}

/* 
  Use a .highlight utility class to emphasize 
  the pupil’s name and purchased item 
*/
.highlight {
  font-weight: bold;
  color: #003a69; /* your school’s dark blue, for instance */
  font-size: 1.1rem;
}

/* 
  Example styling for the buttons in the confirmation modal.
  Adjust margins, padding, colors, etc. as needed.
*/
#confirmationModal button {
  margin-right: 10px;
  padding: 8px 16px;
  cursor: pointer;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
}

#confirmationOkBtn {
  background-color: #003a69; 
  color: #ffffff;
}

#confirmationOkBtn:hover {
  background-color: #005a98;
}

/* 
  “Cancel Purchase” button might be red 
  (only relevant if you implement a true “undo”/”void”).
*/
#cancelPurchaseBtn {
  background-color: #cc0000; 
  color: #ffffff;
}

#cancelPurchaseBtn:hover {
  background-color: #e60000;
}



===== FILE: public/purchase/purchase.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Purchase Page</title>
  <link rel="stylesheet" href="purchase.css">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Purchase Prizes</h1>
  </header>

  <main>
    <h2 class="page-subtitle">Tap on a prize to begin purchase</h2>
    <div id="prizeContainer">
      <!-- JavaScript will populate with available prizes -->
    </div>
  </main>

  <!-- Existing Modal for selecting pupil -->
  <div id="pupilModal" class="modal">
    <div class="modal-content">
      <span id="closeModal" class="close">&times;</span>
      <h2>Select Pupil</h2>
      <input type="text" id="pupilSearch" placeholder="Type pupil name..." />
      <div id="searchResults"></div>
      <h3>Recently Selected Pupils</h3>
      <div id="recentPupils"></div>
    </div>
  </div>

  <!-- New Modal for purchase confirmation -->
<div id="confirmationModal" class="modal">
  <div class="modal-content">
    <span id="closeConfirmation" class="close">&times;</span>
    <h2>Purchase Confirmed</h2>
    <p id="confirmationMessage"></p>
    <button id="confirmationOkBtn">OK</button>
    <button id="cancelPurchaseBtn">Cancel Purchase</button>
  </div>
</div>

  <script src="purchase.js"></script>
</body>
</html>



===== FILE: public/purchase/purchase.js =====
// public/purchase/purchase.js

let selectedPrizeId = null;
let selectedPrizeDescription = '';
let recentPupils = []; // Store last few selected pupils for quick reuse

document.addEventListener('DOMContentLoaded', () => {
  const prizeContainer = document.getElementById('prizeContainer');
  const pupilModal = document.getElementById('pupilModal');
  const closeModal = document.getElementById('closeModal');
  const pupilSearchInput = document.getElementById('pupilSearch');
  const searchResultsDiv = document.getElementById('searchResults');
  const recentPupilsDiv = document.getElementById('recentPupils');

  // Elements for the confirmation modal
  const confirmationModal = document.getElementById('confirmationModal');
  const closeConfirmation = document.getElementById('closeConfirmation');
  const confirmationOkBtn = document.getElementById('confirmationOkBtn');
  const confirmationMessage = document.getElementById('confirmationMessage');
  const cancelPurchaseBtn = document.getElementById('cancelPurchaseBtn');

//cancelPurchaseBtn.addEventListener('click', () => {
  // This is where you'd call a route to revert the purchase if you want 
  // (e.g., /purchase/cancel/:purchaseId), or simply hide the modal.
  // If the purchase was already saved in the DB, you'd need a special 
  // route or logic to 'void' or 'delete' the record.

  // If you only want to dismiss the modal without any DB changes:
//  confirmationModal.style.display = 'none';
//});

  // 1) Load all prizes
  loadPrizes();

  // 2) Click to close modal
  closeModal.addEventListener('click', () => {
    pupilModal.style.display = 'none';
    selectedPrizeId = null; // reset
    selectedPrizeDescription = '';
  });

  // Close confirmation modal (both the X and the OK button)
  closeConfirmation.addEventListener('click', () => {
    confirmationModal.style.display = 'none';
  });
  confirmationOkBtn.addEventListener('click', () => {
    confirmationModal.style.display = 'none';
  });

  // 3) Search Pupils on input
  let searchTimeout = null;
  pupilSearchInput.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    const query = pupilSearchInput.value.trim();
    if (!query) {
      searchResultsDiv.innerHTML = '';
      return;
    }
    // Add small delay to avoid spamming
    searchTimeout = setTimeout(() => {
      searchPupils(query);
    }, 300);
  });

  // 4) Render recent pupils
  function renderRecentPupils() {
    recentPupilsDiv.innerHTML = '';
    recentPupils.forEach(p => {
      const div = document.createElement('div');
      div.textContent = `${p.first_name} ${p.last_name} (Merits: ${p.merits})`;
      div.addEventListener('click', () => {
        handlePurchase(p.pupil_id, p.first_name + ' ' + p.last_name);
      });
      recentPupilsDiv.appendChild(div);
    });
  }

  // 5) Load Prizes from server
  async function loadPrizes() {
    try {
      const res = await fetch('/purchase/allPrizes');
      if (!res.ok) throw new Error('Failed to load prizes');
      const prizes = await res.json();
      prizeContainer.innerHTML = '';
      prizes.forEach(prize => {
        const card = document.createElement('div');
        card.className = 'prize-card';
        card.innerHTML = `
          <img src="${prize.image_path}" alt="Prize Image">
          <h3>${prize.description}</h3>
          <p>Cost (Merits): ${prize.cost_merits}</p>
        `;
        card.addEventListener('click', () => {
          // store the selected prize_id
          selectedPrizeId = prize.prize_id;
          selectedPrizeDescription = prize.description;
          // open the modal
          pupilModal.style.display = 'block';
          pupilSearchInput.value = '';
          searchResultsDiv.innerHTML = '';
        });
        prizeContainer.appendChild(card);
      });
    } catch (err) {
      console.error(err);
    }
  }

  // 6) Search Pupils by partial name
  async function searchPupils(query) {
    try {
      const res = await fetch(`/purchase/searchPupil?query=${encodeURIComponent(query)}`);
      if (!res.ok) throw new Error('Failed to search pupils');
      const pupils = await res.json();
      searchResultsDiv.innerHTML = '';
      pupils.forEach(p => {
        const div = document.createElement('div');
        div.textContent = `${p.first_name} ${p.last_name} (Merits: ${p.merits})`;
        div.addEventListener('click', () => handlePurchase(p.pupil_id, p.first_name + ' ' + p.last_name));
        searchResultsDiv.appendChild(div);
      });
    } catch (err) {
      console.error(err);
    }
  }

 // 7) Handle the actual purchase
async function handlePurchase(pupil_id, pupilName) {
  if (!selectedPrizeId) return; // no prize selected => do nothing
  try {
    const res = await fetch('/purchase/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prize_id: selectedPrizeId, pupil_id })
    });

    if (!res.ok) {
      const errorData = await res.json();
      // This is where you'd still show an alert if the pupil has insufficient merits (or any error):
      alert(errorData.error || 'Error creating purchase');
      return;
    }

    const data = await res.json();
    if (data.success) {
      // 1) Remove or comment out the alert:
      // alert(`Purchase successful! New merits: ${data.newRemaining}`);
      currentPurchaseId = data.newPurchaseId;
      // 2) Show the confirmation modal instead:
      confirmationMessage.innerHTML = `
        Successfully purchased <span class="highlight">${selectedPrizeDescription}</span>
        for <span class="highlight">${pupilName}</span>.<br>
        Remaining merits: <span class="highlight">${data.newRemaining}</span>        `;
      confirmationModal.style.display = 'block';

      // 3) Update recent pupils (so we can tap them again quickly)
      addRecentPupil(pupil_id, data.newMerits);

      // 4) Optionally close the "select pupil" modal, if it's still open
      pupilModal.style.display = 'none';
    }
  } catch (err) {
    console.error(err);
    alert('Error creating purchase');
  }
}
  // 8) Add or update recent pupil in the array
  //    We'll need to fetch the pupil name if we don't have it,
  //    but we do from the search results (maybe store that).
  function addRecentPupil(pupil_id, newMerits) {
    // We'll do a quick approach: if the pupil was one of the search results,
    // we likely already have first_name, last_name, etc. 
    // But we haven't stored it. Let's do a direct approach with a short fetch:

    fetch(`/purchase/searchPupil?query=${pupil_id}`)
      .then(r => r.json())
      .then(list => {
        // We'll see if any pupil matches exactly
        const found = list.find(x => x.pupil_id === pupil_id);
        if (found) {
          found.merits = newMerits; // update merits
          // remove existing if in array
          recentPupils = recentPupils.filter(rp => rp.pupil_id !== pupil_id);
          // unshift to front
          recentPupils.unshift(found);
          // limit to 5
          if (recentPupils.length > 5) {
            recentPupils.pop();
          }
          renderRecentPupils();
        }
      });
  }
    // When user clicks “Cancel Purchase”
  cancelPurchaseBtn.addEventListener('click', async () => {
    if (!currentPurchaseId) {
      // If there's no purchase ID saved, just close the modal or do nothing
      confirmationModal.style.display = 'none';
      return;
    }

    // Call the new route
    try {
      const res = await fetch(`/purchase/cancel/${currentPurchaseId}`, {
        method: 'DELETE'
      });
      if (!res.ok) throw new Error('Failed to cancel purchase');

      const result = await res.json();
      if (result.success) {
        // e.g. show a message or reload updated data
        alert('Purchase canceled.');

        // Hide the modal
        confirmationModal.style.display = 'none';

        // Optionally clear the stored ID
        currentPurchaseId = null;
      } else {
        alert(result.error || 'Could not cancel purchase');
      }
    } catch (err) {
      console.error(err);
      alert('Error canceling purchase');
    }
  });
});



===== FILE: public/uploadCSV/uploadCSV.css =====
/* public/uploadCSV/uploadCSV.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
}

.upload-section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 100px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="file"] {
  padding: 5px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#uploadMessage {
  margin-top: 10px;
  color: green; /* or red if an error */
}



===== FILE: public/uploadCSV/uploadCSV.html =====
<!-- public/uploadCSV/uploadCSV.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload CSV (Pupils)</title>
  <link rel="stylesheet" href="/uploadCSV/uploadCSV.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Upload CSV for Pupils</h1>
  </header>

  <main>
    <section class="upload-section">
      <h2>Select CSV file</h2>
      <form id="uploadForm" action="/upload/csv/pupils" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="csvFile">CSV File:</label>
          <input type="file" id="csvFile" name="csvFile" accept=".csv" required />
        </div>
        <button type="submit">Upload</button>
      </form>
      <p id="uploadMessage"></p>
    </section>
  </main>

  <script src="/uploadCSV/uploadCSV.js"></script>
</body>
</html>



===== FILE: public/uploadCSV/uploadCSV.js =====
// public/uploadCSV/uploadCSV.js

document.addEventListener('DOMContentLoaded', () => {
  const uploadForm = document.getElementById('uploadForm');
  const uploadMessage = document.getElementById('uploadMessage');

  // If you want to do AJAX, you could do:
  // uploadForm.addEventListener('submit', (e) => {
  //   e.preventDefault();
  //   // handle with fetch or FormData
  // });

  // For now, let it submit normally, and you can set a success message in the controller redirect or response.
});



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.css =====
/* public/uploadMeritsCSV/uploadMeritsCSV.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
}

.upload-section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 100px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="file"] {
  padding: 5px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#errorBox {
  margin-top: 20px;
  background-color: #ffebe6;
  padding: 10px;
  border: 1px solid #cc0000;
  border-radius: 4px;
}

#errorBox h3 {
  margin-top: 0;
  color: #cc0000;
}



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.html =====
<!-- public/uploadMeritsCSV/uploadMeritsCSV.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload Merits CSV</title>
  <link rel="stylesheet" href="/uploadMeritsCSV/uploadMeritsCSV.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Upload CSV to Update Merits</h1>
  </header>

  <main>
    <section class="upload-section">
      <h2>Select CSV file</h2>
      <form id="uploadForm" enctype="multipart/form-data">
        <div class="form-group">
          <label for="csvFile">CSV File:</label>
          <input type="file" id="csvFile" name="csvFile" accept=".csv" required />
        </div>
        <button type="submit">Upload</button>
      </form>
      <div id="uploadMessage"></div>

      <div class="error-box" id="errorBox" style="display: none;">
        <h3>Could Not Update These Pupils (Not Found):</h3>
        <ul id="errorList"></ul>
      </div>
    </section>
  </main>

  <script src="/uploadMeritsCSV/uploadMeritsCSV.js"></script>
</body>
</html>



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.js =====
// public/uploadMeritsCSV/uploadMeritsCSV.js
document.addEventListener('DOMContentLoaded', () => {
  const uploadForm = document.getElementById('uploadForm');
  const csvFileInput = document.getElementById('csvFile');
  const uploadMessage = document.getElementById('uploadMessage');
  const errorBox = document.getElementById('errorBox');
  const errorList = document.getElementById('errorList');

  uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    uploadMessage.textContent = '';
    errorBox.style.display = 'none';
    errorList.innerHTML = '';

    const file = csvFileInput.files[0];
    if (!file) {
      uploadMessage.textContent = 'Please select a CSV file.';
      return;
    }

    const formData = new FormData();
    formData.append('csvFile', file);

    try {
      const response = await fetch('/upload/csv/merits', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const result = await response.json(); 
      // e.g. { updatedCount: 3, missing: ["bob jones", "alice rogers"] }

      // Show success message:
      uploadMessage.style.color = 'green';
      uploadMessage.textContent = 
        `Upload complete. Updated: ${result.updatedCount}.`;

      // If we have missing pupils, display them:
      if (result.missing && result.missing.length > 0) {
        errorBox.style.display = 'block';
        result.missing.forEach(name => {
          const li = document.createElement('li');
          li.textContent = name;
          errorList.appendChild(li);
        });
      }

    } catch (err) {
      console.error(err);
      uploadMessage.style.color = 'red';
      uploadMessage.textContent = 'Error uploading or processing CSV.';
    }
  });
});



===== FILE: routes/csvRoutes.js =====
// routes/csvRoutes.js
const express = require('express');
const router = express.Router();
const csvController = require('../controllers/csvController');
const { requireFullAccess } = require('../middlewares/auth');

// Multer setup for file uploads
const multer = require('multer');
const path = require('path');

// We'll store the uploaded CSV in a temp folder
const upload = multer({ dest: path.join(__dirname, '..', 'temp') });

// Show the Upload CSV page
router.get('/pupils', requireFullAccess, csvController.showUploadPupilCSVPage);

// Handle CSV file upload
router.post('/pupils', requireFullAccess, upload.single('csvFile'), csvController.uploadPupilCSV);

// Merits CSV
// 1) Show the upload form
router.get('/merits', requireFullAccess, csvController.showUploadMeritsCSVPage);

// Add a new route for "upload merits CSV"
router.post('/merits', requireFullAccess, upload.single('csvFile'), csvController.uploadMeritsCSV);


module.exports = router;



===== FILE: routes/pinRoutes.js =====
// routes/pinRoutes.js
const express = require('express');
const router = express.Router();
const pinController = require('../controllers/pinController');

// GET: Show the PIN entry page
router.get('/enter-pin', pinController.showPinPage);

// POST: Check the PIN submission
router.post('/check-pin', pinController.checkPin);

// Optional: Log out
router.get('/logout', pinController.logout);

module.exports = router;



===== FILE: routes/prizeRoutes.js =====
// routes/prizeRoutes.js
const express = require('express');
const router = express.Router();
const path = require('path');
const multer = require('multer');
const prizeController = require('../controllers/prizeController');
const { requireFullAccess } = require('../middlewares/auth');

// Configure multer storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Save files to public/uploads
    cb(null, path.join(__dirname, '..', 'public', 'images'));
  },
  filename: function (req, file, cb) {
    // Create a unique file name
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage });

// Show main Prizes page (HTML)
router.get('/', requireFullAccess, prizeController.showPrizesPage);

// Return all Prizes as JSON
router.get('/all/json', requireFullAccess, prizeController.getAllPrizes);

// Show "Add Prize" page (HTML)
router.get('/add', requireFullAccess, prizeController.showAddPrizeForm);

// Handle "Add Prize" form submission with image upload
router.post('/add', requireFullAccess, upload.single('image'), prizeController.addPrize);

// Show "Edit Prize" page (HTML)
router.get('/edit/:id', requireFullAccess, prizeController.showEditPrizeForm);

// Return single prize as JSON for the edit form
router.get('/:id/json', requireFullAccess, prizeController.getPrizeById);

// Handle "Edit Prize" form submission with optional image upload
router.post('/edit/:id', requireFullAccess, upload.single('image'), prizeController.editPrize);

// Handle "Delete Prize"
router.get('/delete/:id', requireFullAccess, prizeController.deletePrize);

module.exports = router;



===== FILE: routes/pupilRoutes.js =====
// routes/pupilRoutes.js
const express = require('express');
const router = express.Router();
const pupilController = require('../controllers/pupilController');
const { requireFullAccess } = require('../middlewares/auth');

// Show main Pupils page
router.get('/', requireFullAccess, pupilController.showPupilPage);

// Return Pupils as JSON with optional filter
router.get('/all/json', requireFullAccess, pupilController.getAllPupils);

// Get single pupil by ID (for editing)
router.get('/:id/json', requireFullAccess, pupilController.getSinglePupil);

// Show the "Add Pupil" page
//router.get('/add', pupilController.showAddPupilForm);

// Return all active forms as JSON
router.get('/getForms', requireFullAccess, pupilController.getAllForms);

// Handle "Add Pupil"
router.post('/add', requireFullAccess, pupilController.addPupil);

// Show the "Edit Pupil" page (unused if using modal)
router.get('/edit/:id', requireFullAccess, pupilController.showEditPupilForm);

// Handle "Edit Pupil"
router.post('/edit/:id', requireFullAccess, pupilController.editPupil);

// Handle "Add Form"
router.post('/addForm', requireFullAccess, pupilController.addForm);

// Handle "Delete Pupil" (set active=false)
router.get('/delete/:id', requireFullAccess, pupilController.deletePupil);

module.exports = router;



===== FILE: routes/purchaseRoutes.js =====
// routes/purchaseRoutes.js
const express = require('express');
const router = express.Router();
const purchaseController = require('../controllers/purchaseController');
const { requirePurchaseAccess } = require('../middlewares/auth');

// 1) Show the main "Purchase" page
router.get('/', requirePurchaseAccess, purchaseController.showPurchasePage);

// 2) Return all active prizes (for listing)
router.get('/allPrizes', requirePurchaseAccess, purchaseController.getAllPrizes);

// 3) Search Pupils by partial name
router.get('/searchPupil', requirePurchaseAccess, purchaseController.searchPupil);

// 4) Create a Purchase
router.post('/create', requirePurchaseAccess, purchaseController.createPurchase);

// 5) Cancel (DELETE) a Purchase by ID
router.delete('/cancel/:purchaseId', requirePurchaseAccess, purchaseController.cancelPurchase);

module.exports = router;



===== FILE: server.js =====
// server.js
require('dotenv').config();
const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const path = require('path');
const app = express();
const prizeRoutes = require('./routes/prizeRoutes');
const csvRoutes = require('./routes/csvRoutes');
const purchaseRoutes = require('./routes/purchaseRoutes');
const pinRoutes = require('./routes/pinRoutes');

// Body Parser
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

console.log('Database Host:', process.env.DB_HOST);
// Import routes
const pupilRoutes = require('./routes/pupilRoutes');

// Initialize session
app.use(session({
  secret: 'hskKY46hssppqiu99she527h',
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 60 * 60 * 1000, // 1 hour in milliseconds
  }
}));

// Serve all files in the public folder (CSS, JS, images, HTML, etc.)
app.use(express.static(path.join(__dirname, 'public')));

// Attach /pupils routes
app.use('/pupils', pupilRoutes);
app.use('/prizes', prizeRoutes);
app.use('/upload/csv', csvRoutes);
app.use('/purchase', purchaseRoutes);
app.use('/', pinRoutes);  // or app.use(pinRoutes);
// Example of a default route to redirect or show a home page
app.get('/', (req, res) => {
  // Could send a landing page, or redirect to /pupils, etc.
  res.redirect('/pupils');
});
// Start server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});



===== FILE: testdata/meritupdate.csv =====
first_name,last_name,merits
John,Smith,3
Sally,Jones,5
Michael,Brown,10
Emily,Johnson,7
David,Wilson,2
Amy,Davis,5
Robert,Clark,8
Lisa,Williams,4
Steven,Roberts,3
Helen,Wright,6
Mark,Lee,5
Charlotte,Bennett,2
Olivia,Baker,10
James,Parker,1
Elizabeth,Adams,7
Chris,Evans,9
Abigail,Hughes,4
Joshua,Cook,3
Megan,Campbell,5
NotInDatabase,Name,4



===== FILE: testdata/meritupdate2.csv =====
first_name,last_name,merits
Emily,Jones,5
Lucas,Taylor,3
James,Wright,10
Sophia,Hughes,7
Oliver,Green,2
Chloe,Hall,12
Noah,Clark,1
Mia,Walker,6
Ava,Harris,9
Lily,Baker,5
John,Smith,10
Megan,Mills,3
David,Miller,4
Sarah,Davis,8
Daniel,Fox,5
William,Anderson,2
Grace,Edwards,4
Freya,Bell3,5
Henry,Gray,8
Anna,Owen,10



===== FILE: testdata/sampledata.sql =====
TRUNCATE TABLE purchase, prizes, pupils, form RESTART IDENTITY CASCADE;

-- =========================--
-- 1) Insert Forms
-- =========================
INSERT INTO form (form_name, form_tutor, year_group, active)
VALUES
  ('7A',   'Mr. Adams',     7,  true),
  ('7B',   'Ms. Baker',     7,  true),
  ('8A',   'Mr. Carter',    8,  true),
  ('9A',   'Mr. Davis',     9,  true),
  ('10A',  'Ms. Evans',    10,  true),
  ('11B',  'Mr. Fisher',   11,  true);

-- =========================
-- 2) Insert Pupils
--    We'll create 30 pupils (5 per form).
--    Merits vary among them. The form_id references the 6 forms above
--    (serial IDs typically start at 1; adjust if needed).
-- =========================

-- Pupils for form_id = 1 (7A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('John',   'Smith',   10, 1, true),
  ('Emily',  'Jones',   15, 1, true),
  ('Lucas',  'Taylor',  0,  1, true),
  ('Lily',   'Baker',   5,  1, true),
  ('James',  'Wright',  8,  1, true);

-- Pupils for form_id = 2 (7B)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Sophia',  'Hughes',  12, 2, true),
  ('Oliver',  'Green',   4,  2, true),
  ('Chloe',   'Hall',    2,  2, true),
  ('Noah',    'Clark',   20, 2, true),
  ('Mia',     'Walker',  1,  2, true);

-- Pupils for form_id = 3 (8A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Ava',     'Harris',  9,  3, true),
  ('Ethan',   'Lewis',   3,  3, true),
  ('Amelia',  'Roberts', 7,  3, true),
  ('Jacob',   'Bennett', 11, 3, true),
  ('Layla',   'Price',   0,  3, true);

-- Pupils for form_id = 4 (9A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Isaac',   'Wood',    6,  4, true),
  ('Grace',   'Edwards', 15, 4, true),
  ('Daniel',  'Fox',     2,  4, true),
  ('Freya',   'Bell',    14, 4, true),
  ('Ben',     'Bryant',  6,  4, true);

-- Pupils for form_id = 5 (10A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Emma',    'Bailey',   13, 5, true),
  ('Logan',   'Cooper',   8,  5, true),
  ('Megan',   'Mills',    3,  5, true),
  ('Zoe',     'Shaw',     9,  5, true),
  ('Henry',   'Gray',     4,  5, true);

-- Pupils for form_id = 6 (11B)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Ellie',   'Long',     25, 6, true),
  ('Evan',    'Sharp',    18, 6, true),
  ('Anna',    'Owen',     2,  6, true),
  ('Dylan',   'Reid',     10, 6, true),
  ('Heidi',   'Pearson',  5,  6, true);

-- =========================
-- 3) Insert Prizes
--    We'll create 6 prizes with varied costs.
--    cost_money is in pence (e.g., 199 = £1.99).
-- =========================
INSERT INTO prizes
  (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
VALUES
  ('Blue Pen',          5,   99,   '/images/blue_pen.png',      50,  0,  true),
  ('School T-Shirt',   15,  799,   '/images/tshirt.png',        30,  5,  true),
  ('Notebook',          8,   199,  '/images/notebook.png',      40,  0,  true),
  ('Water Bottle',      10,  299,  '/images/water_bottle.png',  25,  0,  true),
  ('USB Flash Drive',   20,  699,  '/images/usb_drive.png',     15,  0,  true),
  ('Headphones',        25,  1299, '/images/headphones.png',    10,  2,  true);

-- =========================
-- 4) Insert Purchases
--    We'll create 12 example purchase records.
--    * "merit_cost_at_time" should match the cost in merits used at the time of purchase
--    * "date" is a timestamp
--    * "active" = true (or you could set some to false if you want to test "voided" purchases)
--    Make sure the pupil_id and prize_id reference actual inserted IDs
--    (pupils start at 1..30, prizes start at 1..6, typically).
-- =========================

INSERT INTO purchase (pupil_id, prize_id, merit_cost_at_time, date, active)
VALUES
  (1,   1,   5,   '2025-03-01 10:15:00', true),  -- John Smith buys Blue Pen
  (2,   3,   8,   '2025-03-01 11:00:00', true),  -- Emily Jones buys Notebook
  (9,   2,   15,  '2025-03-02 09:30:00', true),  -- Mia Walker buys T-Shirt
  (15,  5,   20,  '2025-03-02 14:45:00', true),  -- Layla Price buys USB Drive
  (18,  1,   5,   '2025-03-03 08:20:00', true),  -- Daniel Fox buys Blue Pen
  (23,  2,   15,  '2025-03-03 10:10:00', true),  -- Megan Mills buys T-Shirt
  (28,  4,   10,  '2025-03-04 13:05:00', true),  -- Anna Owen buys Water Bottle
  (30,  3,   8,   '2025-03-04 15:00:00', true),  -- Heidi Pearson buys Notebook
  (19,  6,   25,  '2025-03-05 09:00:00', true),  -- Grace Edwards buys Headphones
  (25,  1,   5,   '2025-03-05 11:30:00', true),  -- Emma Bailey buys Blue Pen
  (26,  4,   10,  '2025-03-06 16:00:00', true),  -- Logan Cooper buys Water Bottle
  (28,  6,   25,  '2025-03-07 10:00:00', true);  -- Anna Owen also buys Headphones

-- Done!
-- This script should create 6 forms, 30 pupils, 6 prizes, and 12 purchase records,
-- giving you a good test dataset for your application.




===== FILE: db.js =====
// db.js
const { Pool } = require('pg');

// Adjust these details for your database
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASS,
  port: process.env.DB_PORT,
});

module.exports = pool;



===== FILE: gather_files.py =====
#!/usr/bin/env python3

import os
import sys


def load_gitignore():
    """
    Loads .gitignore patterns into a list.
    Skips commented (#) or empty lines.
    """
    patterns = []
    gitignore_path = os.path.join(os.getcwd(), ".gitignore")
    if os.path.isfile(gitignore_path):
        with open(gitignore_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                patterns.append(line)
    return patterns


def should_ignore(path, patterns):
    """
    Checks if 'path' should be ignored based on a naïve match
    of the patterns from .gitignore.

    This is a simplified approach:
    - If a pattern ends with '/' (indicating a directory), we ignore
      if our basename matches that directory name.
    - Otherwise, we ignore if the basename exactly matches the pattern.

    Note: This does not handle wildcards (*) or advanced .gitignore rules.
    """
    basename = os.path.basename(path)
    for pattern in patterns:
        # If pattern ends with '/', assume it's a directory
        if pattern.endswith('/'):
            # e.g. "node_modules/" => ignore if this is a dir named node_modules
            if basename == pattern.rstrip('/'):
                return True
        else:
            # If it's a file pattern, ignore if it exactly matches
            if basename == pattern:
                return True
    return False


def build_directory_tree(start_path, ignore_patterns, prefix="", is_last=True):
    """
    Recursively builds a list of lines showing the directory tree structure.

    :param start_path: The directory to process
    :param ignore_patterns: Patterns from .gitignore
    :param prefix: The prefix string used for indentation in the tree
    :param is_last: Whether this is the last item in the current directory
    :return: A list of text lines representing the tree
    """
    lines = []
    basename = os.path.basename(start_path)

    # Determine which tree branch character to use
    connector = "└── " if is_last else "├── "
    lines.append(prefix + connector + basename + "/")

    # Prepare prefix for child items
    child_prefix = prefix + ("    " if is_last else "│   ")

    # Gather sub-entries
    try:
        entries = os.listdir(start_path)
    except PermissionError:
        # If we can't read the directory, skip
        return lines

    # Sort entries so the tree is consistent
    entries.sort()

    # Filter out anything that .gitignore says to ignore
    # We'll also skip hidden system directories like .git automatically
    # if they appear in the .gitignore (or we can skip them unconditionally).
    visible_entries = []
    for entry in entries:
        if entry == ".git":    # <<< HARD-CODED SKIP
            continue
        full_path = os.path.join(start_path, entry)
        if should_ignore(full_path, ignore_patterns):
            continue
        # We'll skip the .git directory automatically if you prefer:
        # if entry == ".git":
        #    continue
        if os.path.isdir(full_path):
            visible_entries.append(entry)
        else:
            # We'll list normal files after directories, or you can keep them sorted
            visible_entries.append(entry)

    # Create directory list and file list
    dirs = [e for e in visible_entries if os.path.isdir(
        os.path.join(start_path, e))]
    files = [e for e in visible_entries if os.path.isfile(
        os.path.join(start_path, e))]

    # Recursively process subdirectories
    for i, d in enumerate(dirs):
        # if no files come after the last dir
        sub_is_last = (i == len(dirs) - 1 and not files)
        dir_path = os.path.join(start_path, d)
        lines += build_directory_tree(dir_path,
                                      ignore_patterns, child_prefix, sub_is_last)

    # Add files under this directory
    for j, f in enumerate(files):
        file_connector = "└── " if j == len(files) - 1 else "├── "
        lines.append(child_prefix + file_connector + f)

    return lines


def collect_files(start_path, ignore_patterns, valid_extensions=None):
    """
    Recursively collect all files (except ignored) from start_path.
    If valid_extensions is provided (non-empty), filter by those extensions.
    Returns a list of full file paths.
    """
    collected = []

    for root, dirs, files in os.walk(start_path):
        # Remove ignored directories from walk
        # (so we don't descend into them at all)
        dirs[:] = [d for d in dirs if not should_ignore(
            os.path.join(root, d), ignore_patterns)]

        for file in files:
            file_path = os.path.join(root, file)

            # Skip ignored files
            if should_ignore(file_path, ignore_patterns):
                continue

            # If the user specified file extensions, check them
            if valid_extensions:
                # e.g. if user typed .js, we check if file ends with .js
                if not any(file.lower().endswith(ext.lower()) for ext in valid_extensions):
                    continue

            collected.append(file_path)

    return collected


def main():
    # Gather user-specified extensions (if any)
    # e.g. python gather_files.py .js .css
    if len(sys.argv) > 1:
        valid_extensions = sys.argv[1:]
    else:
        valid_extensions = None

    ignore_patterns = load_gitignore()

    # 1) Build directory tree lines (skipping ignored paths)
    # We'll do this from the current directory, e.g. "."
    tree_lines = build_directory_tree(
        os.getcwd(), ignore_patterns, prefix="", is_last=True)

    # 2) Collect all files that are not ignored
    #    If valid_extensions is None or empty, we include all
    collected_files = collect_files(
        os.getcwd(), ignore_patterns, valid_extensions)

    # 3) Output everything to "output.txt"
    output_filename = "output.txt"
    with open(output_filename, "w", encoding="utf-8") as out:
        # Write the directory tree
        out.write("DIRECTORY TREE:\n")
        for line in tree_lines:
            out.write(line + "\n")

        out.write("\n========================================\n")
        out.write("FILE CONTENTS:\n")
        out.write("========================================\n\n")

        # For each file, write a header and then the file content
        for f in sorted(collected_files):
            rel_path = os.path.relpath(f, os.getcwd())
            out.write(f"\n===== FILE: {rel_path} =====\n")
            try:
                with open(f, "r", encoding="utf-8", errors="replace") as fh:
                    content = fh.read()
                out.write(content + "\n")
            except Exception as e:
                # If we cannot read the file (binary, permission error, etc.), note it
                out.write(f"[Unable to read file: {e}]\n")

    print(f"Done! Output written to {output_filename}")


if __name__ == "__main__":
    main()


===== FILE: middlewares/auth.js =====
// middlewares/auth.js

// Purchase Access: userRole can be 'purchase' or 'full'
exports.requirePurchaseAccess = (req, res, next) => {
  if (!req.session.userRole) {
    return res.redirect('/enter-pin');
  }
  if (req.session.userRole === 'purchase' || req.session.userRole === 'full') {
    return next();
  }
  // If they have some other role, or none, block
  return res.redirect('/enter-pin');
};

// Full Access: userRole must be 'full'
exports.requireFullAccess = (req, res, next) => {
  if (!req.session.userRole) {
    return res.redirect('/enter-pin');
  }
  if (req.session.userRole === 'full') {
    return next();
  }
  return res.status(403).send('You do not have permission to access this page.');
};



===== FILE: package.json =====
{
  "name": "school_merit_tracker",
  "version": "1.0.0",
  "description": "The School merit tracker to track pupils remaining merits after buying rewards",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tomd1415/school_merit_tracker.git"
  },
  "author": "Tom Duguid",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/tomd1415/school_merit_tracker/issues"
  },
  "homepage": "https://github.com/tomd1415/school_merit_tracker#readme",
  "dependencies": {
    "body-parser": "^1.20.3",
    "csv-parser": "^3.2.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "multer": "^1.4.5-lts.1",
    "pg": "^8.13.3"
  }
}


===== FILE: public/addPrize/addPrize.css =====
/* public/addPrize/addPrize.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

main {
  padding: 20px;
  max-width: 700px;
  margin: 0 auto;
}

section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
  margin-bottom: 30px;
}

h1 {
  margin: 0;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 150px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="text"],
input[type="number"] {
  padding: 8px;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}



===== FILE: public/addPrize/addPrize.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Prize</title>
  <link rel="stylesheet" href="/addPrize/addPrize.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Add a New Prize</h1>
  </header>

  <main>
    <section class="add-prize-section">
      <h2>New Prize Details</h2>
      <form action="/prizes/add" method="POST" id="addPrizeForm">
        <div class="form-group">
          <label for="description">Description:</label>
          <input type="text" id="description" name="description" required />
        </div>

        <div class="form-group">
          <label for="costMerits">Cost (Merits):</label>
          <input type="number" id="costMerits" name="cost_merits" min="0" required />
        </div>

        <div class="form-group">
          <label for="costMoney">Cost (Money):</label>
          <input type="number" id="costMoney" name="cost_money" min="0" required />
        </div>

        <div class="form-group">
          <label for="imagePath">Image Path:</label>
          <input type="text" id="imagePath" name="image_path" required />
        </div>

        <button type="submit">Add Prize</button>
      </form>
    </section>
  </main>

  <script src="/addPrize/addPrize.js"></script>
</body>
</html>



===== FILE: public/addPrize/addPrize.js =====
// public/addPrize/addPrize.js

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('addPrizeForm');
  
  form.addEventListener('submit', (e) => {
    // Perform any front-end checks
    // If invalid, call e.preventDefault()
  });
});



===== FILE: public/addPupil/addPupil.css =====
/* public/addPupil/addPupil.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

main {
  padding: 20px;
  max-width: 700px;
  margin: 0 auto;
}

h1 {
  margin: 0;
}

section {
  margin-bottom: 30px;
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 120px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="text"],
input[type="number"],
select {
  padding: 8px;
  width: 200px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#addFormMessage {
  margin-top: 10px;
  color: green; /* or red on error */
}



===== FILE: public/addPupil/addPupil.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Add Pupil</title>
  <link rel="stylesheet" href="/addPupil/addPupil.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Add a New Pupil</h1>
  </header>

  <main>
    <!-- Section A: Add Pupil Form -->
    <section class="add-pupil-section">
      <h2>New Pupil Details</h2>
      <form action="/pupils/add" method="POST" id="addPupilForm">
        <div class="form-group">
          <label for="firstName">First Name:</label>
          <input type="text" id="firstName" name="first_name" required />
        </div>

        <div class="form-group">
          <label for="lastName">Last Name:</label>
          <input type="text" id="lastName" name="last_name" required />
        </div>

        <div class="form-group">
          <label for="formSelect">Select Form:</label>
          <select id="formSelect" name="form_id" required>
            <option value="">-- Select a Form --</option>
            <!-- Populated by addPupil.js -->
          </select>
        </div>

        <button type="submit">Add Pupil</button>
      </form>
    </section>

    <!-- Section B: Add Form -->
    <section class="add-form-section">
      <h2>Add a New Form</h2>
      <!-- We'll do an AJAX request to /pupils/addForm -->
      <form id="addForm">
        <div class="form-group">
          <label for="newFormName">Form Name:</label>
          <input type="text" id="newFormName" name="form_name" required />
        </div>

        <div class="form-group">
          <label for="newFormTutor">Form Tutor:</label>
          <input type="text" id="newFormTutor" name="form_tutor" required />
        </div>

        <div class="form-group">
          <label for="newYearGroup">Year Group:</label>
          <!-- year_group is an integer 0..14 -->
          <input type="number" id="newYearGroup" name="year_group" min="0" max="14" required />
        </div>

        <button type="submit">Create Form</button>
      </form>
      <p id="addFormMessage"></p>
    </section>
  </main>

  <script src="/addPupil/addPupil.js"></script>
</body>
</html>



===== FILE: public/addPupil/addPupil.js =====
// public/addPupil/addPupil.js

document.addEventListener('DOMContentLoaded', () => {
  const formSelect = document.getElementById('formSelect');
  const addForm = document.getElementById('addForm');
  const addFormMessage = document.getElementById('addFormMessage');

  // 1) Load existing active forms
  async function loadForms() {
    try {
      const response = await fetch('/pupils/getForms');
      if (!response.ok) throw new Error('Failed to fetch forms');
      const forms = await response.json();

      // Clear the <select> (keep placeholder)
      formSelect.innerHTML = '<option value="">-- Select a Form --</option>';

      // Populate with each form
      forms.forEach((f) => {
        const option = document.createElement('option');
        option.value = f.form_id;
        // You could display more info if you want (form_name + year_group, for example)
        option.textContent = `${f.form_name} (Tutor: ${f.form_tutor}, Year: ${f.year_group})`;
        formSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error loading forms:', error);
    }
  }

  // Load forms on page load
  loadForms();

  // 2) Handle "Add Form" submission (AJAX)
  addForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Collect inputs
    const newFormName = document.getElementById('newFormName').value.trim();
    const newFormTutor = document.getElementById('newFormTutor').value.trim();
    const newYearGroup = document.getElementById('newYearGroup').value.trim();

    if (!newFormName || !newFormTutor || !newYearGroup) return;

    try {
      const response = await fetch('/pupils/addForm', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          form_name: newFormName,
          form_tutor: newFormTutor,
          year_group: newYearGroup
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create form');
      }

      // Clear the fields, show success
      document.getElementById('newFormName').value = '';
      document.getElementById('newFormTutor').value = '';
      document.getElementById('newYearGroup').value = '';
      addFormMessage.style.color = 'green';
      addFormMessage.textContent = 'Form created successfully!';

      // Refresh the dropdown
      await loadForms();
    } catch (err) {
      console.error('Error adding form:', err);
      addFormMessage.style.color = 'red';
      addFormMessage.textContent = 'Error adding form.';
    }
  });
});



===== FILE: public/commonMenu.js =====
// public/commonMenu.js
const menuHTML = `
  <div id="topMenu" style="
    display: flex; 
    justify-content: center; 
    align-items: center; 
    background-color: #003a69;
    color: #ffffff;
    padding: 10px 0;
    position: relative;
  ">
    <nav>
      <a href="/pupils" style="margin: 0 10px; color: #ffffff; text-decoration: none;">Manage Pupils</a>
      <a href="/prizes" style="margin: 0 10px; color: #ffffff; text-decoration: none;">Manage Prizes</a>
      <a href="/purchase" style="margin: 0 10px; color: #ffffff; text-decoration: none;">Purchase Prizes</a>
      <a href="/upload/csv/pupils" style="margin: 0 10px; color: #ffffff; text-decoration: none;">Upload Pupils CSV</a>
      <a href="/upload/csv/merits" style="margin: 0 10px; color: #ffffff; text-decoration: none;">Upload Merits CSV</a>
    </nav>
    <button id="signOutBtn" style="
      position: absolute; 
      right: 20px; 
      background-color: #005a98; 
      border: none; 
      color: #ffffff; 
      padding: 8px 16px; 
      cursor: pointer; 
      border-radius: 4px;
    ">
      Sign Out
    </button>
  </div>
`;

document.addEventListener('DOMContentLoaded', () => {
  // Insert the menu
  document.body.insertAdjacentHTML('afterbegin', menuHTML);

  // Sign out button -> simple redirect to /logout
  const signOutBtn = document.getElementById('signOutBtn');
  if (signOutBtn) {
    signOutBtn.addEventListener('click', () => {
      window.location.href = '/logout';
    });
  }
});



===== FILE: public/enterPin/enterPin.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Enter PIN</title>
</head>
<body>
  <h1>Please Enter PIN</h1>
  <form action="/check-pin" method="POST">
    <input type="password" name="pin" required />
    <button type="submit">Submit PIN</button>
  </form>
</body>
</html>



===== FILE: public/index.html =====
<!-- public/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>School Merit Tracker - Home</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: #ffffff;
    }
    header {
      background-color: #003a69;
      color: #ffffff;
      padding: 20px;
      position: relative;
    }
    header h1 {
      margin: 0;
    }
    #signOutBtn {
      position: absolute;
      top: 20px;
      right: 20px;
      background-color: #005a98;
      border: none;
      color: #ffffff;
      padding: 8px 16px;
      cursor: pointer;
      border-radius: 4px;
    }
    main {
      padding: 20px;
      text-align: center;
    }
    .links a {
      display: inline-block;
      margin: 10px;
      padding: 15px 30px;
      border-radius: 8px;
      background-color: #005a98;
      color: #ffffff;
      text-decoration: none;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <header>
    <h1>School Merit Tracker - Home</h1>
    <button id="signOutBtn">Sign Out</button>
  </header>
  <main>
    <div class="links">
      <a href="/pupils">Manage Pupils</a>
      <a href="/prizes">Manage Prizes</a>
      <a href="/purchase">Purchase Prizes</a>
      <a href="/upload/csv/pupils">Upload Pupils CSV</a>
      <a href="/upload/csv/merits">Upload Merits CSV</a>
    </div>
  </main>
  <script>
    document.getElementById('signOutBtn').addEventListener('click', () => {
      window.location.href = '/logout';
    });
  </script>
</body>
</html>



===== FILE: public/pinLogin/pinLogin.css =====
body {
  font-family: Arial, sans-serif;
  background-color: #fff;
  text-align: center;
  margin: 0;
  padding: 0;
}

h1 {
  margin-top: 20px;
}

.pin-container {
  display: inline-block;
  margin-top: 30px;
}

#pinDisplay {
  width: 150px;          /* Enough width for ~6 dots */
  height: 50px;          /* Fixed height */
  border: 2px solid #333;
  border-radius: 6px;    /* optional rounded corners */
  margin: 0 auto 20px;   /* 20px bottom margin, center horizontally */
  text-align: center;
  line-height: 50px;     /* Vertically center the dots */
  font-size: 2rem;       /* Make dots bigger */
}


.keypad {
  display: grid;
  grid-template-columns: repeat(3, 60px);
  grid-gap: 10px;
  justify-content: center;
}

.keypad button {
  font-size: 1.2rem;
  padding: 10px;
  cursor: pointer;
}

#submitPinBtn {
  grid-column: span 3; /* let the OK button span full width */
}



===== FILE: public/pinLogin/pinLogin.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Enter PIN</title>
  <link rel="stylesheet" href="/pinLogin/pinLogin.css">
</head>
<body>
  <h1>Enter PIN</h1>
  <div class="pin-container">
    <div id="pinDisplay"></div> <!-- placeholder for typed digits -->

    <div class="keypad">
      <!-- Each button calls a JavaScript function to add a digit or delete -->
      <button class="digit-btn" data-digit="1">1</button>
      <button class="digit-btn" data-digit="2">2</button>
      <button class="digit-btn" data-digit="3">3</button>
      <button class="digit-btn" data-digit="4">4</button>
      <button class="digit-btn" data-digit="5">5</button>
      <button class="digit-btn" data-digit="6">6</button>
      <button class="digit-btn" data-digit="7">7</button>
      <button class="digit-btn" data-digit="8">8</button>
      <button class="digit-btn" data-digit="9">9</button>
      <button class="digit-btn" data-digit="0">0</button>
      <button id="backspaceBtn">Del</button>
      <button id="submitPinBtn">OK</button>
    </div>
  </div>

  <!-- Hidden form that gets submitted with the final PIN -->
  <form id="pinForm" action="/check-pin" method="POST" style="display: none;">
    <input type="hidden" id="pinInput" name="pin" value="">
  </form>

  <script src="/pinLogin/pinLogin.js"></script>
</body>
</html>



===== FILE: public/pinLogin/pinLogin.js =====
// public/pinLogin/pinLogin.js
document.addEventListener('DOMContentLoaded', () => {
  const pinDisplay = document.getElementById('pinDisplay');
  const pinInput = document.getElementById('pinInput');
  const pinForm = document.getElementById('pinForm');

  let enteredDigits = [];

  // Update the display to show number of entered digits or placeholders
  function updateDisplay() {
      // Create a string of as many '•' as the number of digits
  pinDisplay.textContent = '•'.repeat(enteredDigits.length);
  }

  function addDigit(digit) {
    if (enteredDigits.length < 6) {
      enteredDigits.push(digit);
      updateDisplay();
    }
  }

  function removeDigit() {
    enteredDigits.pop();
    updateDisplay();
  }

  // Listen for digit button clicks
  document.querySelectorAll('.digit-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const digit = btn.getAttribute('data-digit');
      addDigit(digit);
    });
  });

  // Backspace (Del) button
  document.getElementById('backspaceBtn').addEventListener('click', removeDigit);

  // Submit (OK) button
  document.getElementById('submitPinBtn').addEventListener('click', () => {
    // If we have 6 digits, submit
    if (enteredDigits.length === 6) {
      pinInput.value = enteredDigits.join('');
      pinForm.submit();
    } else {
      alert('Please enter 6 digits before submitting.');
    }
  });
});



===== FILE: public/prizes/editPrize.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Edit Prize</title>
  <link rel="stylesheet" href="/prizes/prizes.css">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Edit Prize</h1>
  </header>

  <main>
    <form id="editPrizeForm" method="POST">
      <div class="form-group">
        <label for="description">Description:</label>
        <input type="text" id="description" name="description" required />
      </div>
      <div class="form-group">
        <label for="cost_merits">Cost (Merits):</label>
        <input type="number" id="cost_merits" name="cost_merits" min="0" required />
      </div>
      <div class="form-group">
        <label for="cost_money">Cost (Money):</label>
        <input type="number" id="cost_money" name="cost_money" min="0" required />
      </div>
      <div class="form-group">
        <label for="image_path">Image Path:</label>
        <input type="text" id="image_path" name="image_path" required />
      </div>
      <div class="form-group">
        <label for="active">Active:</label>
        <select id="active" name="active">
          <option value="true">True</option>
          <option value="false">False</option>
        </select>
      </div>
      <button type="submit">Update Prize</button>
    </form>
  </main>

  <script>
    // Inline JS or reference an editPrize.js file
    document.addEventListener('DOMContentLoaded', async () => {
      const form = document.getElementById('editPrizeForm');
      // Parse the URL to get the prize_id from /prizes/edit/:id
      const pathParts = window.location.pathname.split('/');
      const prizeId = pathParts[pathParts.length - 1];

      // 1) Fetch existing prize data
      try {
        const res = await fetch(`/prizes/${prizeId}/json`);
        if (!res.ok) throw new Error('Failed to load prize');
        const prize = await res.json();

        document.getElementById('description').value = prize.description;
        document.getElementById('cost_merits').value = prize.cost_merits;
        document.getElementById('cost_money').value = prize.cost_money;
        document.getElementById('image_path').value = prize.image_path;
        document.getElementById('active').value = prize.active ? 'true' : 'false';

        // 2) Set form action to /prizes/edit/:id
        form.action = `/prizes/edit/${prizeId}`;
      } catch (err) {
        console.error('Error loading prize:', err);
      }
    });
  </script>
</body>
</html>



===== FILE: public/prizes/prizes.css =====
/* public/prizes/prizes.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

/* Header with dark blue background */
header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
}

.button-bar {
  margin-bottom: 10px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
}

button:hover {
  background-color: #005a98;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

table thead {
  background-color: #f2f2f2;
}

table th, table td {
  text-align: left;
  padding: 8px;
  border: 1px solid #cccccc;
}

table td button {
  margin-right: 8px;
}

/* Modal styles */
.modal {
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto;
  padding: 20px;
  width: 400px;
  position: relative;
  border-radius: 8px;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 24px;
  cursor: pointer;
}

===== FILE: public/prizes/prizes.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Prize Management</title>
  <link rel="stylesheet" href="prizes.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Prize Management</h1>
  </header>

  <main>
    <div class="button-bar">
      <button id="addPrizeBtn">Add New Prize</button>
    </div>

    <table id="prizeTable">
      <thead>
        <tr>
          <th>Prize ID</th>
          <th>Description</th>
          <th>Merit Cost</th>
          <th>Money Cost</th>
          <th>Image</th>
          <th>Active</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Dynamically inserted by prizes.js -->
      </tbody>
    </table>
  </main>

  <!-- Add Prize Modal -->
  <div id="addPrizeModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddPrizeModal">&times;</span>
      <h2>Add New Prize</h2>
      <form id="addPrizeForm" enctype="multipart/form-data">
        <div>
          <label>Description:</label>
          <input type="text" id="addPrizeDescription" required />
        </div>
        <div>
          <label>Merit Cost:</label>
          <input type="number" id="addPrizeCostMerits" min="0" required />
        </div>
        <div>
          <label>Money Cost:</label>
          <input type="number" id="addPrizeCostMoney" min="0" required />
        </div>
        <div>
          <label>Image:</label>
          <input type="file" id="addPrizeImage" accept="image/*" required />
        </div>
        <div id="addPrizeFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Prize</button>
          <button type="button" id="cancelAddPrizeBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Prize Modal -->
  <div id="editPrizeModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeEditPrizeModal">&times;</span>
      <h2>Edit Prize</h2>
      <form id="editPrizeForm" enctype="multipart/form-data">
        <input type="hidden" id="editPrizeId" />
        <div>
          <label>Description:</label>
          <input type="text" id="editPrizeDescription" required />
        </div>
        <div>
          <label>Merit Cost:</label>
          <input type="number" id="editPrizeCostMerits" min="0" required />
        </div>
        <div>
          <label>Money Cost:</label>
          <input type="number" id="editPrizeCostMoney" min="0" required />
        </div>
        <div>
          <label>Current Image:</label>
          <div id="currentPrizeImage"></div>
        </div>
        <div>
          <label>New Image (optional):</label>
          <input type="file" id="editPrizeImage" accept="image/*" />
        </div>
        <div id="editPrizeFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Save Changes</button>
          <button type="button" id="cancelEditPrizeBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="prizes.js"></script>
  <script src="/commonMenu.js"></script>
</body>
</html>



===== FILE: public/prizes/prizes.js =====
// public/prizes/prizes.js

window.addEventListener('DOMContentLoaded', async () => {
  loadPrizes();

  // Open Add Prize Modal
  document.getElementById('addPrizeBtn').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'block';
  });

  // Close Add Prize Modal
  document.getElementById('closeAddPrizeModal').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'none';
  });
  document.getElementById('cancelAddPrizeBtn').addEventListener('click', () => {
    document.getElementById('addPrizeModal').style.display = 'none';
  });

  // Add Prize Form Submission
  document.getElementById('addPrizeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const feedback = document.getElementById('addPrizeFeedback');
    feedback.textContent = '';

    const description = document.getElementById('addPrizeDescription').value.trim();
    const cost_merits = document.getElementById('addPrizeCostMerits').value;
    const cost_money = document.getElementById('addPrizeCostMoney').value;
    const imageFile = document.getElementById('addPrizeImage').files[0];

    if (!description || cost_merits === '' || cost_money === '' || !imageFile) {
      feedback.textContent = 'Please provide all required inputs.';
      return;
    }

    const formData = new FormData();
    formData.append('description', description);
    formData.append('cost_merits', cost_merits);
    formData.append('cost_money', cost_money);
    formData.append('image', imageFile);

    try {
      const response = await fetch('/prizes/add', {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        // Reload prizes list and close modal
        await loadPrizes();
        document.getElementById('addPrizeModal').style.display = 'none';
      } else {
        const result = await response.json();
        feedback.textContent = result.error || 'Error adding prize';
      }
    } catch (error) {
      console.error('Error adding prize:', error);
      feedback.textContent = 'Error adding prize';
    }
  });

  // Delegate click events for Edit buttons in the table
  document.querySelector('#prizeTable tbody').addEventListener('click', async (e) => {
    if (e.target.matches('button.edit-btn')) {
      const prizeId = e.target.getAttribute('data-id');
      openEditPrizeModal(prizeId);
    }
    if (e.target.matches('button.delete-btn')) {
      const prizeId = e.target.getAttribute('data-id');
      if (confirm('Are you sure you want to delete this prize?')) {
        await deletePrize(prizeId);
        await loadPrizes();
      }
    }
  });

  // Close Edit Prize Modal
  document.getElementById('closeEditPrizeModal').addEventListener('click', () => {
    document.getElementById('editPrizeModal').style.display = 'none';
  });
  document.getElementById('cancelEditPrizeBtn').addEventListener('click', () => {
    document.getElementById('editPrizeModal').style.display = 'none';
  });

  // Edit Prize Form Submission
  document.getElementById('editPrizeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const feedback = document.getElementById('editPrizeFeedback');
    feedback.textContent = '';

    const prizeId = document.getElementById('editPrizeId').value;
    const description = document.getElementById('editPrizeDescription').value.trim();
    const cost_merits = document.getElementById('editPrizeCostMerits').value;
    const cost_money = document.getElementById('editPrizeCostMoney').value;
    const imageFile = document.getElementById('editPrizeImage').files[0];

    const formData = new FormData();
    formData.append('description', description);
    formData.append('cost_merits', cost_merits);
    formData.append('cost_money', cost_money);
    // Append new image if provided
    if (imageFile) { 
      formData.append('image', imageFile);
    }
    
    try {
      const response = await fetch(`/prizes/edit/${prizeId}`, {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        await loadPrizes();
        document.getElementById('editPrizeModal').style.display = 'none';
      } else {
        const result = await response.json();
        feedback.textContent = result.error || 'Error updating prize';
      }
    } catch (error) {
      console.error('Error editing prize:', error);
      feedback.textContent = 'Error editing prize';
    }
  });
});

// Function to load prizes and populate the table
async function loadPrizes() {
  try {
    const response = await fetch('/prizes/all/json');
    if (!response.ok) throw new Error('Network error');
    const prizes = await response.json();
    const tbody = document.querySelector('#prizeTable tbody');
    tbody.innerHTML = '';

    prizes.forEach(prize => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${prize.prize_id}</td>
        <td>${prize.description}</td>
        <td>${prize.cost_merits}</td>
        <td>${prize.cost_money}</td>
        <td><img src="${prize.image_path}" alt="Prize Image" style="width:50px;height:auto;"></td>
        <td>${prize.active}</td>
        <td>
          <button class="edit-btn" data-id="${prize.prize_id}">Edit</button>
          <button class="delete-btn" data-id="${prize.prize_id}">Delete</button>
        </td>
      `;
      tbody.appendChild(row);
    });
  } catch (error) {
    console.error('Error loading prizes:', error);
  }
}

// Function to open the Edit Prize modal and load prize details
async function openEditPrizeModal(prizeId) {
  try {
    const res = await fetch(`/prizes/${prizeId}/json`);
    if (!res.ok) throw new Error('Failed to fetch prize details');
    const prize = await res.json();

    document.getElementById('editPrizeId').value = prize.prize_id;
    document.getElementById('editPrizeDescription').value = prize.description;
    document.getElementById('editPrizeCostMerits').value = prize.cost_merits;
    document.getElementById('editPrizeCostMoney').value = prize.cost_money;
    document.getElementById('currentPrizeImage').innerHTML =
      `<img src="${prize.image_path}" alt="Current Prize Image" style="width:100px;height:auto;">`;

    document.getElementById('editPrizeModal').style.display = 'block';
  } catch (error) {
    console.error('Error fetching prize for editing:', error);
  }
}

// Function to delete prize
async function deletePrize(prizeId) {
  try {
    await fetch(`/prizes/delete/${prizeId}`, { method: 'GET' });
  } catch (error) {
    console.error('Error deleting prize:', error);
  }
}



===== FILE: public/pupils/pupils.css =====
/* public/pupils/pupils.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

/* Header styling with dark blue background */
header {
  display: flex;
  align-items: center;
  background-color: #003a69; /* Deep blue from school site */
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

/* Main content area */
main {
  padding: 20px;
}

/* Button styling */
.button-bar {
  margin-bottom: 10px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
}

button:hover {
  background-color: #005a98;
}

/* Table styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

table thead {
  background-color: #f2f2f2;
}

table th,
table td {
  text-align: left;
  padding: 8px;
  border: 1px solid #cccccc;
}

table td button {
  margin-right: 8px;
}
/* Modal styles */
.modal {
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto; 
  padding: 20px;
  width: 400px;
  position: relative;
  border-radius: 8px;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 16px;
  font-size: 24px;
  cursor: pointer;
}

/* Inline edit style: highlight editable cells */
td.editable {
  background-color: #fffae6; /* light yellow to highlight editable area */
}



===== FILE: public/pupils/pupils.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pupil Management</title>
  <link rel="stylesheet" href="pupils.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Pupil Management</h1>
  </header>
  
  <main>
    <div class="button-bar">
      <!-- NEW: Add Pupil button that opens the "Add Pupil" modal -->
      <button id="addPupilBtn">Add Pupil</button>
      <!-- NEW: Add Form button that opens the "Add Form" modal -->
      <button id="addFormBtn">Add Form</button>

      <label for="formFilter">Filter by Form:</label>
      <select id="formFilter">
        <option value="">All</option>
      </select>
      
      <label for="inlineEditToggle">Allow Inline Edit:</label>
      <input type="checkbox" id="inlineEditToggle" />
    </div>
    
    <table id="pupilTable">
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Form Group</th>
          <th>Merits</th>
          <th>Remaining Merits</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody><!-- Pupils inserted dynamically --></tbody>
    </table>
  </main>
  
  <!-- Existing Edit Modal (unchanged) -->
  <div id="editModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn">&times;</span>
      <h2>Edit Pupil</h2>
      <form id="editPupilForm">
        <input type="hidden" id="editPupilId" />
        <div>
          <label>First Name:</label>
          <input type="text" id="editFirstName" required />
        </div>
        <div>
          <label>Last Name:</label>
          <input type="text" id="editLastName" required />
        </div>
        <div>
          <label>Form:</label>
          <select id="editFormSelect" required></select>
        </div>
        <div>
          <label>Merits:</label>
          <input type="number" id="editMerits" min="0" required />
        </div>
        <div id="editModalFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Save</button>
          <button type="button" id="cancelEditBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- NEW: Add Pupil Modal -->
  <div id="addPupilModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddPupilModal">&times;</span>
      <h2>Add New Pupil</h2>
      <form id="addPupilForm">
        <div>
          <label>First Name:</label>
          <input type="text" id="addPupilFirstName" required />
        </div>
        <div>
          <label>Last Name:</label>
          <input type="text" id="addPupilLastName" required />
        </div>
        <div>
          <label>Form:</label>
          <select id="addPupilFormSelect" required>
            <!-- Populated by JavaScript from formsData -->
          </select>
        </div>
        <div id="addPupilFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Pupil</button>
          <button type="button" id="cancelAddPupilBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- NEW: Add Form Modal -->
  <div id="addFormModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn" id="closeAddFormModal">&times;</span>
      <h2>Add New Form</h2>
      <form id="addFormForm">
        <div>
          <label>Form Name:</label>
          <input type="text" id="addFormName" required />
        </div>
        <div>
          <label>Form Tutor:</label>
          <input type="text" id="addFormTutor" />
        </div>
        <div>
          <label>Year Group:</label>
          <input type="text" id="addFormYearGroup" />
        </div>
        <div id="addFormFeedback" class="feedback" style="color:red;"></div>
        <div>
          <button type="submit">Add Form</button>
          <button type="button" id="cancelAddFormBtn">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="pupils.js"></script>
  <script src="/commonMenu.js"></script>
</body>
</html>



===== FILE: public/pupils/pupils.js =====
// public/pupils/pupils.js

// Global references
let inlineEditEnabled = false;
let formsData = []; // to store forms for editing

window.addEventListener('DOMContentLoaded', async () => {
  // 1. Load forms for filter dropdown + edit form select
  await loadForms();

  // 2. Add event listener to the filter dropdown
  document.getElementById('formFilter').addEventListener('change', filterPupils);

  // 3. Inline Edit Toggle
  document.getElementById('inlineEditToggle').addEventListener('change', (e) => {
    inlineEditEnabled = e.target.checked;
    toggleInlineEdit(inlineEditEnabled);
  });

  // 4. Load all pupils (no form filter initially)
  await filterPupils();

  // Setup modal close/cancel
  const modal = document.getElementById('editModal');
  const closeBtn = modal.querySelector('.close-btn');
  const cancelEditBtn = document.getElementById('cancelEditBtn');

  closeBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  cancelEditBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  // Handle form submission in modal
  const editForm = document.getElementById('editPupilForm');
  editForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    await submitEditForm();
  });
});

// Load forms into filter dropdown + edit modal select
async function loadForms() {
  try {
    const res = await fetch('/pupils/getForms');
    if (!res.ok) throw new Error('Could not load forms');

    formsData = await res.json();

    // Populate the filter dropdown
    const filterSelect = document.getElementById('formFilter');
    // Clear existing options except the first "All"
    while (filterSelect.options.length > 1) {
      filterSelect.remove(1);
    }

    formsData.forEach((frm) => {
      const option = document.createElement('option');
      option.value = frm.form_id;
      option.text = frm.form_name;
      filterSelect.appendChild(option);
    });
  } catch (err) {
    console.error(err);
  }
}

// Filter pupils by selected form
async function filterPupils() {
  const formFilterValue = document.getElementById('formFilter').value;
  await loadPupils(formFilterValue);
}

// Load pupils (with optional form_id)
async function loadPupils(form_id = '') {
  try {
    let url = '/pupils/all/json';
    if (form_id) {
      url += `?form_id=${form_id}`;
    }

    const response = await fetch(url);
    if (!response.ok) throw new Error('Network response was not ok');

    const pupils = await response.json();
    const tbody = document.querySelector('#pupilTable tbody');
    tbody.innerHTML = ''; // clear old rows

    pupils.forEach((pupil) => {
      const row = document.createElement('tr');
      
      // Store pupil_id in a data attribute (no longer as a visible column)
      row.setAttribute('data-pupil-id', pupil.pupil_id);

      // Build the row cells
      row.innerHTML = `
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="first_name">${pupil.first_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="last_name">${pupil.last_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="form_name" data-formid="${pupil.form_id}">${pupil.form_name}</td>
        <td class="${inlineEditEnabled ? 'editable' : ''}" data-field="merits">${pupil.merits}</td>
        <!-- NEW: remaining_merits column (always read-only, no "editable" class) -->
        <td class="remaining_merits">
          ${pupil.remaining_merits != null ? pupil.remaining_merits : 'N/A'}
        </td>
        <td>
          <button onclick="openEditModal(${pupil.pupil_id})">Edit</button>
          <button onclick="confirmDeletePupil(${pupil.pupil_id})">Delete</button>
        </td>
      `;

      tbody.appendChild(row);
    });

    // If inline editing is on, apply it to the newly created rows
    if (inlineEditEnabled) {
      enableInlineEditing();
    }
  } catch (error) {
    console.error('Error loading pupils:', error);
  }
}

// Enable inline editing for relevant cells
function enableInlineEditing() {
  const editableCells = document.querySelectorAll('td.editable');
  editableCells.forEach(cell => {
    cell.contentEditable = 'true';
    cell.addEventListener('blur', handleInlineEditBlur);
  });
}

// Toggle inline editing on/off
function toggleInlineEdit(enabled) {
  const editableCells = document.querySelectorAll('td[data-field]');
  if (enabled) {
    editableCells.forEach(cell => {
      cell.classList.add('editable');
      cell.contentEditable = 'true';
      cell.addEventListener('blur', handleInlineEditBlur);
    });
  } else {
    editableCells.forEach(cell => {
      cell.classList.remove('editable');
      cell.contentEditable = 'false';
      cell.removeEventListener('blur', handleInlineEditBlur);
    });
  }
}

// Handle blur event in inline editing
// Modify handleInlineEditBlur to get pupil_id from row.dataset
async function handleInlineEditBlur(e) {
  const cell = e.target;
  const newValue = cell.textContent.trim();
  const field = cell.getAttribute('data-field');

  // Retrieve the row and pupil_id from the data attribute
  const row = cell.closest('tr');
  const pupil_id = row.dataset.pupilId;

  // Basic validation for 'merits'
  if (field === 'merits' && isNaN(newValue)) {
    alert('Merits must be a valid number');
    // revert changes by reloading
    await loadPupils(document.getElementById('formFilter').value);
    return;
  }

  // If field is 'form_name', match it to a form_id
  let form_id = null;
  if (field === 'form_name') {
    const match = formsData.find(f => f.form_name === newValue);
    if (!match) {
      alert('Unknown form name. Please use the modal for a bigger edit or select from known forms.');
      await loadPupils(document.getElementById('formFilter').value);
      return;
    }
    form_id = match.form_id;
  }

  // Gather current row data from other cells
  // Notice the changed cell indexes:
  //  0 -> first_name
  //  1 -> last_name
  //  2 -> form_name
  //  3 -> merits
  //  4 -> remaining_merits (NOT editable)
  //
  // So for reading, you can query them by data-field:
  function getFieldValue(fieldName) {
    const td = row.querySelector(`td[data-field="${fieldName}"]`);
    return td ? td.textContent.trim() : '';
  }

  const first_name = getFieldValue('first_name');
  const last_name = getFieldValue('last_name');
  const currentFormId = row.querySelector('td[data-field="form_name"]')?.getAttribute('data-formid') || '';
  const merits = getFieldValue('merits');

  const updatedData = {
    first_name: (field === 'first_name') ? newValue : first_name,
    last_name: (field === 'last_name') ? newValue : last_name,
    form_id: form_id || currentFormId,
    merits: (field === 'merits') ? newValue : merits
  };

  await updatePupil(pupil_id, updatedData);
}

// POST the update to /pupils/edit/:id
async function updatePupil(pupil_id, data) {
  try {
    const response = await fetch(`/pupils/edit/${pupil_id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();

    if (!response.ok) {
      alert(result.error || 'Error updating pupil');
    } else {
      // Reload table data to show changes
      await loadPupils(document.getElementById('formFilter').value);
    }
  } catch (err) {
    console.error('Update Pupil Error:', err);
  }
}

// Open the edit modal with existing data
async function openEditModal(pupil_id) {
  try {
    // Fetch single pupil data
    const res = await fetch(`/pupils/${pupil_id}/json`);
    if (!res.ok) throw new Error('Unable to fetch pupil details');

    const pupil = await res.json();

    // Populate form fields
    document.getElementById('editPupilId').value = pupil.pupil_id;
    document.getElementById('editFirstName').value = pupil.first_name;
    document.getElementById('editLastName').value = pupil.last_name;
    document.getElementById('editMerits').value = pupil.merits;

    // Populate form select
    const editFormSelect = document.getElementById('editFormSelect');
    editFormSelect.innerHTML = '';
    formsData.forEach(f => {
      const option = document.createElement('option');
      option.value = f.form_id;
      option.textContent = f.form_name;
      if (f.form_id === pupil.form_id) {
        option.selected = true;
      }
      editFormSelect.appendChild(option);
    });

    // Show the modal
    document.getElementById('editModal').style.display = 'block';
  } catch (err) {
    console.error(err);
  }
}

// Submit the edit form in modal
async function submitEditForm() {
  const modalFeedback = document.getElementById('editModalFeedback');
  modalFeedback.textContent = '';

  const pupil_id = document.getElementById('editPupilId').value;
  const first_name = document.getElementById('editFirstName').value.trim();
  const last_name = document.getElementById('editLastName').value.trim();
  const form_id = document.getElementById('editFormSelect').value;
  const meritsVal = document.getElementById('editMerits').value;
  const merits = parseInt(meritsVal, 10);

  // Front-end validation
  if (!first_name || !last_name || !form_id || isNaN(merits) || merits < 0) {
    modalFeedback.style.color = 'red';
    modalFeedback.textContent = 'Please provide valid inputs.';
    return;
  }

  const data = { first_name, last_name, form_id, merits };

  try {
    const response = await fetch(`/pupils/edit/${pupil_id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();

    if (!response.ok) {
      modalFeedback.style.color = 'red';
      modalFeedback.textContent = result.error || 'Error updating pupil.';
    } else {
      modalFeedback.style.color = 'green';
      modalFeedback.textContent = 'Pupil updated successfully.';
      // Close modal after a short delay
      setTimeout(() => {
        document.getElementById('editModal').style.display = 'none';
        loadPupils(document.getElementById('formFilter').value);
      }, 800);
    }
  } catch (err) {
    console.error('submitEditForm error:', err);
    modalFeedback.style.color = 'red';
    modalFeedback.textContent = 'An error occurred.';
  }
}

// Confirm delete pupil
function confirmDeletePupil(pupil_id) {
  if (confirm('Are you sure you want to delete this pupil?')) {
    deletePupil(pupil_id);
  }
}

// Delete pupil (set active = false)
async function deletePupil(pupil_id) {
  try {
    const res = await fetch(`/pupils/delete/${pupil_id}`);
    if (!res.ok) {
      const errData = await res.json();
      alert(errData.error || 'Failed to delete pupil.');
      return;
    }
    // Successfully "deleted"
    await loadPupils(document.getElementById('formFilter').value);
  } catch (err) {
    console.error('Error deleting pupil:', err);
  }
}

// 1. REFS to the new add modals and buttons
const addPupilBtn = document.getElementById('addPupilBtn');
const addPupilModal = document.getElementById('addPupilModal');
const closeAddPupilModal = document.getElementById('closeAddPupilModal');
const cancelAddPupilBtn = document.getElementById('cancelAddPupilBtn');
const addPupilForm = document.getElementById('addPupilForm');

const addFormBtn = document.getElementById('addFormBtn');
const addFormModal = document.getElementById('addFormModal');
const closeAddFormModal = document.getElementById('closeAddFormModal');
const cancelAddFormBtn = document.getElementById('cancelAddFormBtn');
const addFormFormEl = document.getElementById('addFormForm');

// 2. EVENT LISTENERS to open / close modals
addPupilBtn.addEventListener('click', () => {
  // Before showing the "Add Pupil" modal, populate the "Form" dropdown
  populateAddPupilFormSelect();
  addPupilModal.style.display = 'block';
});

closeAddPupilModal.addEventListener('click', () => {
  addPupilModal.style.display = 'none';
});
cancelAddPupilBtn.addEventListener('click', () => {
  addPupilModal.style.display = 'none';
});

// For Add Form
addFormBtn.addEventListener('click', () => {
  addFormModal.style.display = 'block';
});
closeAddFormModal.addEventListener('click', () => {
  addFormModal.style.display = 'none';
});
cancelAddFormBtn.addEventListener('click', () => {
  addFormModal.style.display = 'none';
});

// 3. SUBMIT Add Pupil form
addPupilForm.addEventListener('submit', async (event) => {
  event.preventDefault();
  const feedbackEl = document.getElementById('addPupilFeedback');
  feedbackEl.textContent = '';

  const first_name = document.getElementById('addPupilFirstName').value.trim();
  const last_name = document.getElementById('addPupilLastName').value.trim();
  const form_id = document.getElementById('addPupilFormSelect').value;

  if (!first_name || !last_name || !form_id) {
    feedbackEl.textContent = 'Please fill out all required fields.';
    return;
  }

  // Send POST request to /pupils/add
  try {
    const res = await fetch('/pupils/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ first_name, last_name, form_id })
    });
    const data = await res.json();
    if (!res.ok) {
      feedbackEl.textContent = data.error || 'Failed to add pupil.';
    } else {
      feedbackEl.style.color = 'green';
      feedbackEl.textContent = 'Pupil added successfully!';
      // Close modal after a short delay
      setTimeout(() => {
        addPupilModal.style.display = 'none';
        // Reload pupils to show the new entry
        loadPupils(document.getElementById('formFilter').value);
      }, 800);
    }
  } catch (err) {
    console.error(err);
    feedbackEl.textContent = 'An error occurred.';
  }
});

// 4. SUBMIT Add Form form
addFormFormEl.addEventListener('submit', async (event) => {
  event.preventDefault();
  const feedbackEl = document.getElementById('addFormFeedback');
  feedbackEl.textContent = '';

  const form_name = document.getElementById('addFormName').value.trim();
  const form_tutor = document.getElementById('addFormTutor').value.trim();
  const year_group = document.getElementById('addFormYearGroup').value.trim();

  if (!form_name) {
    feedbackEl.textContent = 'Form name is required.';
    return;
  }

  // Send POST request to /pupils/addForm
  try {
    const res = await fetch('/pupils/addForm', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ form_name, form_tutor, year_group })
    });
    const data = await res.json();
    if (!res.ok) {
      feedbackEl.textContent = data.error || 'Failed to add form.';
    } else {
      feedbackEl.style.color = 'green';
      feedbackEl.textContent = 'Form added successfully!';
      // Close modal after a short delay
      setTimeout(async () => {
        addFormModal.style.display = 'none';
        // Reload forms so new form appears in dropdowns
        await loadForms();
      }, 800);
    }
  } catch (err) {
    console.error(err);
    feedbackEl.textContent = 'An error occurred.';
  }
});

// 5. POPULATE the "Add Pupil" form's dropdown with the existing forms
function populateAddPupilFormSelect() {
  const select = document.getElementById('addPupilFormSelect');
  select.innerHTML = '';
  // formsData is loaded by loadForms() on page load
  formsData.forEach(f => {
    const option = document.createElement('option');
    option.value = f.form_id;
    option.textContent = f.form_name;
    select.appendChild(option);
  });
}



===== FILE: public/purchase/purchase.css =====
/* public/purchase/purchase.css */

/* RESET / BASE STYLES */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  background-color: #ffffff;
  color: #333;
}

/* HEADER */
header {
  display: flex;
  align-items: center;
  background-color: #003a69; /* School's dark blue */
  color: #ffffff;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* subtle modern shadow */
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

header h1 {
  font-size: 1.6rem;
  margin: 0;
}

/* MAIN CONTENT */
main {
  padding: 20px;
}

.page-subtitle {
  margin-bottom: 15px;
  font-size: 1.2rem;
}

/* PRIZE CONTAINER + CARDS */
#prizeContainer {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: flex-start;
}

/* Example card style for each prize */
.prize-card {
  width: 160px;
  background-color: #fafafa;
  border: 1px solid #ddd;
  border-radius: 6px;
  cursor: pointer;
  text-align: center;
  padding: 10px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.prize-card:hover {
  transform: scale(1.03);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

.prize-card img {
  width: 100%;
  height: auto;
  border-radius: 4px;
}

.prize-card h3 {
  margin: 10px 0 5px 0;
  font-size: 1rem;
  color: #333;
}

.prize-card p {
  margin: 5px 0;
  font-size: 0.9rem;
  color: #555;
}

/* MODAL OVERLAY */
.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5); /* darker overlay for clarity */
  /* You can optionally add a fade-in transition if you switch display via a class: 
     transition: opacity 0.3s ease; 
     opacity: 0; 
     &.active { display: block; opacity: 1; } 
     (But that also requires JS changes.) */
}

/* MODAL CONTENT */
.modal-content {
  background-color: #ffffff;
  margin: 70px auto;
  padding: 20px;
  width: 90%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  position: relative;
}

.modal-content h2 {
  margin-top: 0;
  font-size: 1.3rem;
}

/* CLOSE BUTTON */
.close {
  position: absolute;
  top: 15px;
  right: 15px;
  font-size: 1.5rem;
  cursor: pointer;
  color: #555;
}

/* PUPIL SEARCH / RESULTS */
#pupilSearch {
  width: 100%;
  padding: 10px;
  margin: 10px 0 15px 0;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 6px;
}

#searchResults div,
#recentPupils div {
  padding: 8px;
  border: 1px solid #ccc;
  margin-bottom: 6px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.95rem;
}

#searchResults div:hover,
#recentPupils div:hover {
  background-color: #f0f0f0;
}

/* HEADINGS INSIDE THE MODAL */
#searchResults h3,
#recentPupils h3 {
  margin-top: 20px;
  margin-bottom: 10px;
  font-size: 1.1rem;
}
/* Optional: Adjust confirmation modal styles specifically */
#confirmationModal .modal-content {
  /* For example, different background color */
  /* background-color: #eef; */
}
/* 
  purchase.css 
  (Below the existing .modal, .modal-content, etc.)
*/

/* Make the confirmation modal's heading and message stand out */
#confirmationModal .modal-content h2 {
  margin-top: 0;
  font-size: 1.4rem;
  margin-bottom: 10px;
}

#confirmationModal .modal-content p {
  line-height: 1.4;
  margin-bottom: 20px;
}

/* 
  Use a .highlight utility class to emphasize 
  the pupil’s name and purchased item 
*/
.highlight {
  font-weight: bold;
  color: #003a69; /* your school’s dark blue, for instance */
  font-size: 1.1rem;
}

/* 
  Example styling for the buttons in the confirmation modal.
  Adjust margins, padding, colors, etc. as needed.
*/
#confirmationModal button {
  margin-right: 10px;
  padding: 8px 16px;
  cursor: pointer;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
}

#confirmationOkBtn {
  background-color: #003a69; 
  color: #ffffff;
}

#confirmationOkBtn:hover {
  background-color: #005a98;
}

/* 
  “Cancel Purchase” button might be red 
  (only relevant if you implement a true “undo”/”void”).
*/
#cancelPurchaseBtn {
  background-color: #cc0000; 
  color: #ffffff;
}

#cancelPurchaseBtn:hover {
  background-color: #e60000;
}



===== FILE: public/purchase/purchase.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Purchase Page</title>
  <link rel="stylesheet" href="purchase.css">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Purchase Prizes</h1>
  </header>

  <main>
    <h2 class="page-subtitle">Tap on a prize to begin purchase</h2>
    <div id="prizeContainer">
      <!-- JavaScript will populate with available prizes -->
    </div>
  </main>

  <!-- Existing Modal for selecting pupil -->
  <div id="pupilModal" class="modal">
    <div class="modal-content">
      <span id="closeModal" class="close">&times;</span>
      <h2>Select Pupil</h2>
      <input type="text" id="pupilSearch" placeholder="Type pupil name..." />
      <div id="searchResults"></div>
      <h3>Recently Selected Pupils</h3>
      <div id="recentPupils"></div>
    </div>
  </div>

  <!-- New Modal for purchase confirmation -->
<div id="confirmationModal" class="modal">
  <div class="modal-content">
    <span id="closeConfirmation" class="close">&times;</span>
    <h2>Purchase Confirmed</h2>
    <p id="confirmationMessage"></p>
    <button id="confirmationOkBtn">OK</button>
    <button id="cancelPurchaseBtn">Cancel Purchase</button>
  </div>
</div>

  <script src="purchase.js"></script>
    <script>
  // Immediately after the DOM is loaded, create a button 
  // in the top-right corner of the header or body:
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('header');
    if (header) {
      const signOutBtn = document.createElement('button');
      signOutBtn.textContent = 'Sign Out';
      Object.assign(signOutBtn.style, {
        position: 'absolute',
        right: '20px',
        top: '10px',
        backgroundColor: '#005a98',
        border: 'none',
        color: '#ffffff',
        padding: '8px 16px',
        cursor: 'pointer',
        borderRadius: '4px'
      });
      signOutBtn.addEventListener('click', () => {
        window.location.href = '/logout';
      });
      // Positioning: might need a "position: relative" on the header
      header.style.position = 'relative';
      header.appendChild(signOutBtn);
    }
  });
</script>

</body>
</html>



===== FILE: public/purchase/purchase.js =====
// public/purchase/purchase.js

let selectedPrizeId = null;
let selectedPrizeDescription = '';
let recentPupils = []; // Store last few selected pupils for quick reuse

document.addEventListener('DOMContentLoaded', () => {
  const prizeContainer = document.getElementById('prizeContainer');
  const pupilModal = document.getElementById('pupilModal');
  const closeModal = document.getElementById('closeModal');
  const pupilSearchInput = document.getElementById('pupilSearch');
  const searchResultsDiv = document.getElementById('searchResults');
  const recentPupilsDiv = document.getElementById('recentPupils');

  // Elements for the confirmation modal
  const confirmationModal = document.getElementById('confirmationModal');
  const closeConfirmation = document.getElementById('closeConfirmation');
  const confirmationOkBtn = document.getElementById('confirmationOkBtn');
  const confirmationMessage = document.getElementById('confirmationMessage');
  const cancelPurchaseBtn = document.getElementById('cancelPurchaseBtn');

//cancelPurchaseBtn.addEventListener('click', () => {
  // This is where you'd call a route to revert the purchase if you want 
  // (e.g., /purchase/cancel/:purchaseId), or simply hide the modal.
  // If the purchase was already saved in the DB, you'd need a special 
  // route or logic to 'void' or 'delete' the record.

  // If you only want to dismiss the modal without any DB changes:
//  confirmationModal.style.display = 'none';
//});

  // 1) Load all prizes
  loadPrizes();

  // 2) Click to close modal
  closeModal.addEventListener('click', () => {
    pupilModal.style.display = 'none';
    selectedPrizeId = null; // reset
    selectedPrizeDescription = '';
  });

  // Close confirmation modal (both the X and the OK button)
  closeConfirmation.addEventListener('click', () => {
    confirmationModal.style.display = 'none';
  });
  confirmationOkBtn.addEventListener('click', () => {
    confirmationModal.style.display = 'none';
  });

  // 3) Search Pupils on input
  let searchTimeout = null;
  pupilSearchInput.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    const query = pupilSearchInput.value.trim();
    if (!query) {
      searchResultsDiv.innerHTML = '';
      return;
    }
    // Add small delay to avoid spamming
    searchTimeout = setTimeout(() => {
      searchPupils(query);
    }, 300);
  });

  // 4) Render recent pupils
  function renderRecentPupils() {
    recentPupilsDiv.innerHTML = '';
    recentPupils.forEach(p => {
      const div = document.createElement('div');
      div.textContent = `${p.first_name} ${p.last_name} (Merits: ${p.merits})`;
      div.addEventListener('click', () => {
        handlePurchase(p.pupil_id, p.first_name + ' ' + p.last_name);
      });
      recentPupilsDiv.appendChild(div);
    });
  }

  // 5) Load Prizes from server
  async function loadPrizes() {
    try {
      const res = await fetch('/purchase/allPrizes');
      if (!res.ok) throw new Error('Failed to load prizes');
      const prizes = await res.json();
      prizeContainer.innerHTML = '';
      prizes.forEach(prize => {
        const card = document.createElement('div');
        card.className = 'prize-card';
        card.innerHTML = `
          <img src="${prize.image_path}" alt="Prize Image">
          <h3>${prize.description}</h3>
          <p>Cost (Merits): ${prize.cost_merits}</p>
        `;
        card.addEventListener('click', () => {
          // store the selected prize_id
          selectedPrizeId = prize.prize_id;
          selectedPrizeDescription = prize.description;
          // open the modal
          pupilModal.style.display = 'block';
          pupilSearchInput.value = '';
          searchResultsDiv.innerHTML = '';
        });
        prizeContainer.appendChild(card);
      });
    } catch (err) {
      console.error(err);
    }
  }

  // 6) Search Pupils by partial name
  async function searchPupils(query) {
    try {
      const res = await fetch(`/purchase/searchPupil?query=${encodeURIComponent(query)}`);
      if (!res.ok) throw new Error('Failed to search pupils');
      const pupils = await res.json();
      searchResultsDiv.innerHTML = '';
      pupils.forEach(p => {
        const div = document.createElement('div');
        div.textContent = `${p.first_name} ${p.last_name} (Merits: ${p.merits})`;
        div.addEventListener('click', () => handlePurchase(p.pupil_id, p.first_name + ' ' + p.last_name));
        searchResultsDiv.appendChild(div);
      });
    } catch (err) {
      console.error(err);
    }
  }

 // 7) Handle the actual purchase
async function handlePurchase(pupil_id, pupilName) {
  if (!selectedPrizeId) return; // no prize selected => do nothing
  try {
    const res = await fetch('/purchase/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prize_id: selectedPrizeId, pupil_id })
    });

    if (!res.ok) {
      const errorData = await res.json();
      // This is where you'd still show an alert if the pupil has insufficient merits (or any error):
      alert(errorData.error || 'Error creating purchase');
      return;
    }

    const data = await res.json();
    if (data.success) {
      // 1) Remove or comment out the alert:
      // alert(`Purchase successful! New merits: ${data.newRemaining}`);
      currentPurchaseId = data.newPurchaseId;
      // 2) Show the confirmation modal instead:
      confirmationMessage.innerHTML = `
        Successfully purchased <span class="highlight">${selectedPrizeDescription}</span>
        for <span class="highlight">${pupilName}</span>.<br>
        Remaining merits: <span class="highlight">${data.newRemaining}</span>        `;
      confirmationModal.style.display = 'block';

      // 3) Update recent pupils (so we can tap them again quickly)
      addRecentPupil(pupil_id, data.newMerits);

      // 4) Optionally close the "select pupil" modal, if it's still open
      pupilModal.style.display = 'none';
    }
  } catch (err) {
    console.error(err);
    alert('Error creating purchase');
  }
}
  // 8) Add or update recent pupil in the array
  //    We'll need to fetch the pupil name if we don't have it,
  //    but we do from the search results (maybe store that).
  function addRecentPupil(pupil_id, newMerits) {
    // We'll do a quick approach: if the pupil was one of the search results,
    // we likely already have first_name, last_name, etc. 
    // But we haven't stored it. Let's do a direct approach with a short fetch:

    fetch(`/purchase/searchPupil?query=${pupil_id}`)
      .then(r => r.json())
      .then(list => {
        // We'll see if any pupil matches exactly
        const found = list.find(x => x.pupil_id === pupil_id);
        if (found) {
          found.merits = newMerits; // update merits
          // remove existing if in array
          recentPupils = recentPupils.filter(rp => rp.pupil_id !== pupil_id);
          // unshift to front
          recentPupils.unshift(found);
          // limit to 5
          if (recentPupils.length > 5) {
            recentPupils.pop();
          }
          renderRecentPupils();
        }
      });
  }
    // When user clicks “Cancel Purchase”
  cancelPurchaseBtn.addEventListener('click', async () => {
    if (!currentPurchaseId) {
      // If there's no purchase ID saved, just close the modal or do nothing
      confirmationModal.style.display = 'none';
      return;
    }

    // Call the new route
    try {
      const res = await fetch(`/purchase/cancel/${currentPurchaseId}`, {
        method: 'DELETE'
      });
      if (!res.ok) throw new Error('Failed to cancel purchase');

      const result = await res.json();
      if (result.success) {
        // e.g. show a message or reload updated data
        alert('Purchase canceled.');

        // Hide the modal
        confirmationModal.style.display = 'none';

        // Optionally clear the stored ID
        currentPurchaseId = null;
      } else {
        alert(result.error || 'Could not cancel purchase');
      }
    } catch (err) {
      console.error(err);
      alert('Error canceling purchase');
    }
  });
});



===== FILE: public/uploadCSV/uploadCSV.css =====
/* public/uploadCSV/uploadCSV.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
}

.upload-section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 100px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="file"] {
  padding: 5px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#uploadMessage {
  margin-top: 10px;
  color: green; /* or red if an error */
}



===== FILE: public/uploadCSV/uploadCSV.html =====
<!-- public/uploadCSV/uploadCSV.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload CSV (Pupils)</title>
  <link rel="stylesheet" href="/uploadCSV/uploadCSV.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Upload CSV for Pupils</h1>
  </header>

  <main>
    <section class="upload-section">
      <h2>Select CSV file</h2>
      <form id="uploadForm" action="/upload/csv/pupils" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="csvFile">CSV File:</label>
          <input type="file" id="csvFile" name="csvFile" accept=".csv" required />
        </div>
        <button type="submit">Upload</button>
      </form>
      <p id="uploadMessage"></p>
    </section>
  </main>

  <script src="/uploadCSV/uploadCSV.js"></script>
  <script src="/commonMenu.js"></script>
</body>
</html>



===== FILE: public/uploadCSV/uploadCSV.js =====
// public/uploadCSV/uploadCSV.js

document.addEventListener('DOMContentLoaded', () => {
  const uploadForm = document.getElementById('uploadForm');
  const uploadMessage = document.getElementById('uploadMessage');

  // If you want to do AJAX, you could do:
  // uploadForm.addEventListener('submit', (e) => {
  //   e.preventDefault();
  //   // handle with fetch or FormData
  // });

  // For now, let it submit normally, and you can set a success message in the controller redirect or response.
});



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.css =====
/* public/uploadMeritsCSV/uploadMeritsCSV.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
}

header {
  display: flex;
  align-items: center;
  background-color: #003a69;
  color: #ffffff;
  padding: 10px;
}

.exhall-logo {
  height: 50px;
  margin-right: 20px;
}

h1 {
  margin: 0;
}

main {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
}

.upload-section {
  background-color: #f7f7f7;
  padding: 15px;
  border-radius: 4px;
}

h2 {
  margin-top: 0;
}

.form-group {
  margin-bottom: 10px;
}

label {
  display: inline-block;
  width: 100px;
  font-weight: bold;
  margin-right: 10px;
}

input[type="file"] {
  padding: 5px;
}

button {
  background-color: #003a69;
  border: none;
  color: #ffffff;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 14px;
}

button:hover {
  background-color: #005a98;
}

#errorBox {
  margin-top: 20px;
  background-color: #ffebe6;
  padding: 10px;
  border: 1px solid #cc0000;
  border-radius: 4px;
}

#errorBox h3 {
  margin-top: 0;
  color: #cc0000;
}



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.html =====
<!-- public/uploadMeritsCSV/uploadMeritsCSV.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Upload Merits CSV</title>
  <link rel="stylesheet" href="/uploadMeritsCSV/uploadMeritsCSV.css" />
</head>
<body>
  <header>
    <img src="/images/exhall-grange-logo.png" alt="Exhall Grange School Logo" class="exhall-logo">
    <h1>Upload CSV to Update Merits</h1>
  </header>

  <main>
    <section class="upload-section">
      <h2>Select CSV file</h2>
      <form id="uploadForm" enctype="multipart/form-data">
        <div class="form-group">
          <label for="csvFile">CSV File:</label>
          <input type="file" id="csvFile" name="csvFile" accept=".csv" required />
        </div>
        <button type="submit">Upload</button>
      </form>
      <div id="uploadMessage"></div>

      <div class="error-box" id="errorBox" style="display: none;">
        <h3>Could Not Update These Pupils (Not Found):</h3>
        <ul id="errorList"></ul>
      </div>
    </section>
  </main>

  <script src="/uploadMeritsCSV/uploadMeritsCSV.js"></script>
  <script src="/commonMenu.js"></script>
</body>
</html>



===== FILE: public/uploadMeritsCSV/uploadMeritsCSV.js =====
// public/uploadMeritsCSV/uploadMeritsCSV.js
document.addEventListener('DOMContentLoaded', () => {
  const uploadForm = document.getElementById('uploadForm');
  const csvFileInput = document.getElementById('csvFile');
  const uploadMessage = document.getElementById('uploadMessage');
  const errorBox = document.getElementById('errorBox');
  const errorList = document.getElementById('errorList');

  uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    uploadMessage.textContent = '';
    errorBox.style.display = 'none';
    errorList.innerHTML = '';

    const file = csvFileInput.files[0];
    if (!file) {
      uploadMessage.textContent = 'Please select a CSV file.';
      return;
    }

    const formData = new FormData();
    formData.append('csvFile', file);

    try {
      const response = await fetch('/upload/csv/merits', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const result = await response.json(); 
      // e.g. { updatedCount: 3, missing: ["bob jones", "alice rogers"] }

      // Show success message:
      uploadMessage.style.color = 'green';
      uploadMessage.textContent = 
        `Upload complete. Updated: ${result.updatedCount}.`;

      // If we have missing pupils, display them:
      if (result.missing && result.missing.length > 0) {
        errorBox.style.display = 'block';
        result.missing.forEach(name => {
          const li = document.createElement('li');
          li.textContent = name;
          errorList.appendChild(li);
        });
      }

    } catch (err) {
      console.error(err);
      uploadMessage.style.color = 'red';
      uploadMessage.textContent = 'Error uploading or processing CSV.';
    }
  });
});



===== FILE: routes/csvRoutes.js =====
// routes/csvRoutes.js
const express = require('express');
const router = express.Router();
const csvController = require('../controllers/csvController');
const { requireFullAccess } = require('../middlewares/auth');

// Multer setup for file uploads
const multer = require('multer');
const path = require('path');

// We'll store the uploaded CSV in a temp folder
const upload = multer({ dest: path.join(__dirname, '..', 'temp') });

// Show the Upload CSV page
router.get('/pupils', requireFullAccess, csvController.showUploadPupilCSVPage);

// Handle CSV file upload
router.post('/pupils', requireFullAccess, upload.single('csvFile'), csvController.uploadPupilCSV);

// Merits CSV
// 1) Show the upload form
router.get('/merits', requireFullAccess, csvController.showUploadMeritsCSVPage);

// Add a new route for "upload merits CSV"
router.post('/merits', requireFullAccess, upload.single('csvFile'), csvController.uploadMeritsCSV);


module.exports = router;



===== FILE: routes/pinRoutes.js =====
// routes/pinRoutes.js
const express = require('express');
const router = express.Router();
const pinController = require('../controllers/pinController');

// GET: Show the PIN entry page
router.get('/enter-pin', pinController.showPinPage);

// POST: Check the PIN submission
router.post('/check-pin', pinController.checkPin);

// Optional: Log out
router.get('/logout', pinController.logout);

module.exports = router;



===== FILE: routes/prizeRoutes.js =====
// routes/prizeRoutes.js
const express = require('express');
const router = express.Router();
const path = require('path');
const multer = require('multer');
const prizeController = require('../controllers/prizeController');
const { requireFullAccess } = require('../middlewares/auth');

// Configure multer storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Save files to public/uploads
    cb(null, path.join(__dirname, '..', 'public', 'images'));
  },
  filename: function (req, file, cb) {
    // Create a unique file name
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage });

// Show main Prizes page (HTML)
router.get('/', requireFullAccess, prizeController.showPrizesPage);

// Return all Prizes as JSON
router.get('/all/json', requireFullAccess, prizeController.getAllPrizes);

// Show "Add Prize" page (HTML)
router.get('/add', requireFullAccess, prizeController.showAddPrizeForm);

// Handle "Add Prize" form submission with image upload
router.post('/add', requireFullAccess, upload.single('image'), prizeController.addPrize);

// Show "Edit Prize" page (HTML)
router.get('/edit/:id', requireFullAccess, prizeController.showEditPrizeForm);

// Return single prize as JSON for the edit form
router.get('/:id/json', requireFullAccess, prizeController.getPrizeById);

// Handle "Edit Prize" form submission with optional image upload
router.post('/edit/:id', requireFullAccess, upload.single('image'), prizeController.editPrize);

// Handle "Delete Prize"
router.get('/delete/:id', requireFullAccess, prizeController.deletePrize);

module.exports = router;



===== FILE: routes/pupilRoutes.js =====
// routes/pupilRoutes.js
const express = require('express');
const router = express.Router();
const pupilController = require('../controllers/pupilController');
const { requireFullAccess } = require('../middlewares/auth');

// Show main Pupils page
router.get('/', requireFullAccess, pupilController.showPupilPage);

// Return Pupils as JSON with optional filter
router.get('/all/json', requireFullAccess, pupilController.getAllPupils);

// Get single pupil by ID (for editing)
router.get('/:id/json', requireFullAccess, pupilController.getSinglePupil);

// Show the "Add Pupil" page
//router.get('/add', pupilController.showAddPupilForm);

// Return all active forms as JSON
router.get('/getForms', requireFullAccess, pupilController.getAllForms);

// Handle "Add Pupil"
router.post('/add', requireFullAccess, pupilController.addPupil);

// Show the "Edit Pupil" page (unused if using modal)
router.get('/edit/:id', requireFullAccess, pupilController.showEditPupilForm);

// Handle "Edit Pupil"
router.post('/edit/:id', requireFullAccess, pupilController.editPupil);

// Handle "Add Form"
router.post('/addForm', requireFullAccess, pupilController.addForm);

// Handle "Delete Pupil" (set active=false)
router.get('/delete/:id', requireFullAccess, pupilController.deletePupil);

module.exports = router;



===== FILE: routes/purchaseRoutes.js =====
// routes/purchaseRoutes.js
const express = require('express');
const router = express.Router();
const purchaseController = require('../controllers/purchaseController');
const { requirePurchaseAccess } = require('../middlewares/auth');

// 1) Show the main "Purchase" page
router.get('/', requirePurchaseAccess, purchaseController.showPurchasePage);

// 2) Return all active prizes (for listing)
router.get('/allPrizes', requirePurchaseAccess, purchaseController.getAllPrizes);

// 3) Search Pupils by partial name
router.get('/searchPupil', requirePurchaseAccess, purchaseController.searchPupil);

// 4) Create a Purchase
router.post('/create', requirePurchaseAccess, purchaseController.createPurchase);

// 5) Cancel (DELETE) a Purchase by ID
router.delete('/cancel/:purchaseId', requirePurchaseAccess, purchaseController.cancelPurchase);

module.exports = router;



===== FILE: server.js =====
// server.js
require('dotenv').config();
const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const path = require('path');
const app = express();
const prizeRoutes = require('./routes/prizeRoutes');
const csvRoutes = require('./routes/csvRoutes');
const purchaseRoutes = require('./routes/purchaseRoutes');
const pinRoutes = require('./routes/pinRoutes');

// Body Parser
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

console.log('Database Host:', process.env.DB_HOST);
// Import routes
const pupilRoutes = require('./routes/pupilRoutes');

// Initialize session
app.use(session({
  secret: 'hskKY46hssppqiu99she527h',
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 60 * 60 * 1000, // 1 hour in milliseconds
  }
}));

// Serve all files in the public folder (CSS, JS, images, HTML, etc.)
app.use(express.static(path.join(__dirname, 'public')));

// Attach /pupils routes
app.use('/pupils', pupilRoutes);
app.use('/prizes', prizeRoutes);
app.use('/upload/csv', csvRoutes);
app.use('/purchase', purchaseRoutes);
app.use('/', pinRoutes);  // or app.use(pinRoutes);
// Example of a default route to redirect or show a home page
app.get('/', (req, res) => {
  // Could send a landing page, or redirect to /pupils, etc.
  res.redirect('/pupils');
});
// Start server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});



===== FILE: testdata/meritupdate.csv =====
first_name,last_name,merits
John,Smith,3
Sally,Jones,5
Michael,Brown,10
Emily,Johnson,7
David,Wilson,2
Amy,Davis,5
Robert,Clark,8
Lisa,Williams,4
Steven,Roberts,3
Helen,Wright,6
Mark,Lee,5
Charlotte,Bennett,2
Olivia,Baker,10
James,Parker,1
Elizabeth,Adams,7
Chris,Evans,9
Abigail,Hughes,4
Joshua,Cook,3
Megan,Campbell,5
NotInDatabase,Name,4



===== FILE: testdata/meritupdate2.csv =====
first_name,last_name,merits
Emily,Jones,5
Lucas,Taylor,3
James,Wright,10
Sophia,Hughes,7
Oliver,Green,2
Chloe,Hall,12
Noah,Clark,1
Mia,Walker,6
Ava,Harris,9
Lily,Baker,5
John,Smith,10
Megan,Mills,3
David,Miller,4
Sarah,Davis,8
Daniel,Fox,5
William,Anderson,2
Grace,Edwards,4
Freya,Bell3,5
Henry,Gray,8
Anna,Owen,10



===== FILE: testdata/sampledata.sql =====
TRUNCATE TABLE purchase, prizes, pupils, form RESTART IDENTITY CASCADE;

-- =========================--
-- 1) Insert Forms
-- =========================
INSERT INTO form (form_name, form_tutor, year_group, active)
VALUES
  ('7A',   'Mr. Adams',     7,  true),
  ('7B',   'Ms. Baker',     7,  true),
  ('8A',   'Mr. Carter',    8,  true),
  ('9A',   'Mr. Davis',     9,  true),
  ('10A',  'Ms. Evans',    10,  true),
  ('11B',  'Mr. Fisher',   11,  true);

-- =========================
-- 2) Insert Pupils
--    We'll create 30 pupils (5 per form).
--    Merits vary among them. The form_id references the 6 forms above
--    (serial IDs typically start at 1; adjust if needed).
-- =========================

-- Pupils for form_id = 1 (7A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('John',   'Smith',   10, 1, true),
  ('Emily',  'Jones',   15, 1, true),
  ('Lucas',  'Taylor',  0,  1, true),
  ('Lily',   'Baker',   5,  1, true),
  ('James',  'Wright',  8,  1, true);

-- Pupils for form_id = 2 (7B)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Sophia',  'Hughes',  12, 2, true),
  ('Oliver',  'Green',   4,  2, true),
  ('Chloe',   'Hall',    2,  2, true),
  ('Noah',    'Clark',   20, 2, true),
  ('Mia',     'Walker',  1,  2, true);

-- Pupils for form_id = 3 (8A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Ava',     'Harris',  9,  3, true),
  ('Ethan',   'Lewis',   3,  3, true),
  ('Amelia',  'Roberts', 7,  3, true),
  ('Jacob',   'Bennett', 11, 3, true),
  ('Layla',   'Price',   0,  3, true);

-- Pupils for form_id = 4 (9A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Isaac',   'Wood',    6,  4, true),
  ('Grace',   'Edwards', 15, 4, true),
  ('Daniel',  'Fox',     2,  4, true),
  ('Freya',   'Bell',    14, 4, true),
  ('Ben',     'Bryant',  6,  4, true);

-- Pupils for form_id = 5 (10A)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Emma',    'Bailey',   13, 5, true),
  ('Logan',   'Cooper',   8,  5, true),
  ('Megan',   'Mills',    3,  5, true),
  ('Zoe',     'Shaw',     9,  5, true),
  ('Henry',   'Gray',     4,  5, true);

-- Pupils for form_id = 6 (11B)
INSERT INTO pupils (first_name, last_name, merits, form_id, active)
VALUES
  ('Ellie',   'Long',     25, 6, true),
  ('Evan',    'Sharp',    18, 6, true),
  ('Anna',    'Owen',     2,  6, true),
  ('Dylan',   'Reid',     10, 6, true),
  ('Heidi',   'Pearson',  5,  6, true);

-- =========================
-- 3) Insert Prizes
--    We'll create 6 prizes with varied costs.
--    cost_money is in pence (e.g., 199 = £1.99).
-- =========================
INSERT INTO prizes
  (description, cost_merits, cost_money, image_path, total_stocked_ever, stock_adjustment, active)
VALUES
  ('Blue Pen',          5,   99,   '/images/blue_pen.png',      50,  0,  true),
  ('School T-Shirt',   15,  799,   '/images/tshirt.png',        30,  5,  true),
  ('Notebook',          8,   199,  '/images/notebook.png',      40,  0,  true),
  ('Water Bottle',      10,  299,  '/images/water_bottle.png',  25,  0,  true),
  ('USB Flash Drive',   20,  699,  '/images/usb_drive.png',     15,  0,  true),
  ('Headphones',        25,  1299, '/images/headphones.png',    10,  2,  true);

-- =========================
-- 4) Insert Purchases
--    We'll create 12 example purchase records.
--    * "merit_cost_at_time" should match the cost in merits used at the time of purchase
--    * "date" is a timestamp
--    * "active" = true (or you could set some to false if you want to test "voided" purchases)
--    Make sure the pupil_id and prize_id reference actual inserted IDs
--    (pupils start at 1..30, prizes start at 1..6, typically).
-- =========================

INSERT INTO purchase (pupil_id, prize_id, merit_cost_at_time, date, active)
VALUES
  (1,   1,   5,   '2025-03-01 10:15:00', true),  -- John Smith buys Blue Pen
  (2,   3,   8,   '2025-03-01 11:00:00', true),  -- Emily Jones buys Notebook
  (9,   2,   15,  '2025-03-02 09:30:00', true),  -- Mia Walker buys T-Shirt
  (15,  5,   20,  '2025-03-02 14:45:00', true),  -- Layla Price buys USB Drive
  (18,  1,   5,   '2025-03-03 08:20:00', true),  -- Daniel Fox buys Blue Pen
  (23,  2,   15,  '2025-03-03 10:10:00', true),  -- Megan Mills buys T-Shirt
  (28,  4,   10,  '2025-03-04 13:05:00', true),  -- Anna Owen buys Water Bottle
  (30,  3,   8,   '2025-03-04 15:00:00', true),  -- Heidi Pearson buys Notebook
  (19,  6,   25,  '2025-03-05 09:00:00', true),  -- Grace Edwards buys Headphones
  (25,  1,   5,   '2025-03-05 11:30:00', true),  -- Emma Bailey buys Blue Pen
  (26,  4,   10,  '2025-03-06 16:00:00', true),  -- Logan Cooper buys Water Bottle
  (28,  6,   25,  '2025-03-07 10:00:00', true);  -- Anna Owen also buys Headphones

-- Done!
-- This script should create 6 forms, 30 pupils, 6 prizes, and 12 purchase records,
-- giving you a good test dataset for your application.


